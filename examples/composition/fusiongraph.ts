export default 'schema @transport(kind: "http", subgraph: "nft", location: "https://api.thegraph.com/subgraphs/name/amxx/eip721-subgraph", options: {}) @transport(kind: "http", subgraph: "uniswap", location: "https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v2", options: {}) {\n  query: Query\n  subscription: Subscription\n}\n\n"""\nMarks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive.\n"""\ndirective @entity on OBJECT\n\n"""Defined a Subgraph ID for an object type"""\ndirective @subgraphId(id: String!) on OBJECT\n\n"""\ncreates a virtual field on the entity that may be queried but cannot be set manually through the mappings API.\n"""\ndirective @derivedFrom(field: String!) on FIELD_DEFINITION\n\ntype User @source(subgraph: "nft", name: "Account") @source(subgraph: "uniswap", name: "User") @resolver(subgraph: "nft", operation: "query GetAccountById($Account_id: Bytes!) { accounts(where: { id: $Account_id) } }", kind: "FETCH") @resolver(subgraph: "nft", operation: "query GetAccountsByIds($Account_id: [Bytes!]!) { accounts(where: { id_in: $Account_id }) }", kind: "BATCH") @resolver(subgraph: "uniswap", operation: "query UserById($User_id: ID!) { user(id: $User_id) }", kind: "FETCH") @resolver(subgraph: "uniswap", operation: "query GetUserById($User_id: ID!) { users(where: { id: $User_id) } }", kind: "FETCH") @resolver(subgraph: "uniswap", operation: "query GetUsersByIds($User_id: [ID!]!) { users(where: { id_in: $User_id }) }", kind: "BATCH") @variable(subgraph: "nft", name: "Account_id", select: "id") @variable(subgraph: "nft", name: "User_id", select: "id") @variable(subgraph: "uniswap", name: "User_id", select: "id") {\n  id: ID! @source(subgraph: "nft", name: "id", type: "Bytes!") @source(subgraph: "uniswap", name: "id", type: "ID!")\n  asERC721: ERC721Contract @source(subgraph: "nft", name: "asERC721", type: "ERC721Contract")\n  ERC721tokens(skip: Int = 0, first: Int = 100, orderBy: ERC721Token_orderBy, orderDirection: OrderDirection, where: ERC721Token_filter): [ERC721Token!]! @source(subgraph: "nft", name: "ERC721tokens", type: "[ERC721Token!]!")\n  ERC721operatorOwner(skip: Int = 0, first: Int = 100, orderBy: ERC721Operator_orderBy, orderDirection: OrderDirection, where: ERC721Operator_filter): [ERC721Operator!]! @source(subgraph: "nft", name: "ERC721operatorOwner", type: "[ERC721Operator!]!")\n  ERC721operatorOperator(skip: Int = 0, first: Int = 100, orderBy: ERC721Operator_orderBy, orderDirection: OrderDirection, where: ERC721Operator_filter): [ERC721Operator!]! @source(subgraph: "nft", name: "ERC721operatorOperator", type: "[ERC721Operator!]!")\n  ERC721transferFromEvent(skip: Int = 0, first: Int = 100, orderBy: ERC721Transfer_orderBy, orderDirection: OrderDirection, where: ERC721Transfer_filter): [ERC721Transfer!]! @source(subgraph: "nft", name: "ERC721transferFromEvent", type: "[ERC721Transfer!]!")\n  ERC721transferToEvent(skip: Int = 0, first: Int = 100, orderBy: ERC721Transfer_orderBy, orderDirection: OrderDirection, where: ERC721Transfer_filter): [ERC721Transfer!]! @source(subgraph: "nft", name: "ERC721transferToEvent", type: "[ERC721Transfer!]!")\n  events(skip: Int = 0, first: Int = 100, orderBy: Event_orderBy, orderDirection: OrderDirection, where: Event_filter): [Event!]! @source(subgraph: "nft", name: "events", type: "[Event!]!")\n  liquidityPositions(skip: Int = 0, first: Int = 100, orderBy: LiquidityPosition_orderBy, orderDirection: OrderDirection, where: LiquidityPosition_filter): [LiquidityPosition!] @source(subgraph: "uniswap", name: "liquidityPositions", type: "[LiquidityPosition!]")\n  usdSwapped: BigDecimal! @source(subgraph: "uniswap", name: "usdSwapped", type: "BigDecimal!")\n}\n\ninput Account_filter @source(subgraph: "nft", name: "Account_filter") {\n  id: Bytes @source(subgraph: "nft", name: "id", type: "Bytes")\n  id_not: Bytes @source(subgraph: "nft", name: "id_not", type: "Bytes")\n  id_gt: Bytes @source(subgraph: "nft", name: "id_gt", type: "Bytes")\n  id_lt: Bytes @source(subgraph: "nft", name: "id_lt", type: "Bytes")\n  id_gte: Bytes @source(subgraph: "nft", name: "id_gte", type: "Bytes")\n  id_lte: Bytes @source(subgraph: "nft", name: "id_lte", type: "Bytes")\n  id_in: [Bytes!] @source(subgraph: "nft", name: "id_in", type: "[Bytes!]")\n  id_not_in: [Bytes!] @source(subgraph: "nft", name: "id_not_in", type: "[Bytes!]")\n  id_contains: Bytes @source(subgraph: "nft", name: "id_contains", type: "Bytes")\n  id_not_contains: Bytes @source(subgraph: "nft", name: "id_not_contains", type: "Bytes")\n  asERC721: String @source(subgraph: "nft", name: "asERC721", type: "String")\n  asERC721_not: String @source(subgraph: "nft", name: "asERC721_not", type: "String")\n  asERC721_gt: String @source(subgraph: "nft", name: "asERC721_gt", type: "String")\n  asERC721_lt: String @source(subgraph: "nft", name: "asERC721_lt", type: "String")\n  asERC721_gte: String @source(subgraph: "nft", name: "asERC721_gte", type: "String")\n  asERC721_lte: String @source(subgraph: "nft", name: "asERC721_lte", type: "String")\n  asERC721_in: [String!] @source(subgraph: "nft", name: "asERC721_in", type: "[String!]")\n  asERC721_not_in: [String!] @source(subgraph: "nft", name: "asERC721_not_in", type: "[String!]")\n  asERC721_contains: String @source(subgraph: "nft", name: "asERC721_contains", type: "String")\n  asERC721_contains_nocase: String @source(subgraph: "nft", name: "asERC721_contains_nocase", type: "String")\n  asERC721_not_contains: String @source(subgraph: "nft", name: "asERC721_not_contains", type: "String")\n  asERC721_not_contains_nocase: String @source(subgraph: "nft", name: "asERC721_not_contains_nocase", type: "String")\n  asERC721_starts_with: String @source(subgraph: "nft", name: "asERC721_starts_with", type: "String")\n  asERC721_starts_with_nocase: String @source(subgraph: "nft", name: "asERC721_starts_with_nocase", type: "String")\n  asERC721_not_starts_with: String @source(subgraph: "nft", name: "asERC721_not_starts_with", type: "String")\n  asERC721_not_starts_with_nocase: String @source(subgraph: "nft", name: "asERC721_not_starts_with_nocase", type: "String")\n  asERC721_ends_with: String @source(subgraph: "nft", name: "asERC721_ends_with", type: "String")\n  asERC721_ends_with_nocase: String @source(subgraph: "nft", name: "asERC721_ends_with_nocase", type: "String")\n  asERC721_not_ends_with: String @source(subgraph: "nft", name: "asERC721_not_ends_with", type: "String")\n  asERC721_not_ends_with_nocase: String @source(subgraph: "nft", name: "asERC721_not_ends_with_nocase", type: "String")\n  asERC721_: ERC721Contract_filter @source(subgraph: "nft", name: "asERC721_", type: "ERC721Contract_filter")\n  ERC721tokens_: ERC721Token_filter @source(subgraph: "nft", name: "ERC721tokens_", type: "ERC721Token_filter")\n  ERC721operatorOwner_: ERC721Operator_filter @source(subgraph: "nft", name: "ERC721operatorOwner_", type: "ERC721Operator_filter")\n  ERC721operatorOperator_: ERC721Operator_filter @source(subgraph: "nft", name: "ERC721operatorOperator_", type: "ERC721Operator_filter")\n  ERC721transferFromEvent_: ERC721Transfer_filter @source(subgraph: "nft", name: "ERC721transferFromEvent_", type: "ERC721Transfer_filter")\n  ERC721transferToEvent_: ERC721Transfer_filter @source(subgraph: "nft", name: "ERC721transferToEvent_", type: "ERC721Transfer_filter")\n  events_: Event_filter @source(subgraph: "nft", name: "events_", type: "Event_filter")\n  """Filter for the block changed event."""\n  _change_block: BlockChangedFilter @source(subgraph: "nft", name: "_change_block", type: "BlockChangedFilter")\n  and: [Account_filter] @source(subgraph: "nft", name: "and", type: "[Account_filter]")\n  or: [Account_filter] @source(subgraph: "nft", name: "or", type: "[Account_filter]")\n}\n\nenum Account_orderBy @source(subgraph: "nft", name: "Account_orderBy") {\n  id @source(subgraph: "nft", name: "id")\n  asERC721 @source(subgraph: "nft", name: "asERC721")\n  asERC721__id @source(subgraph: "nft", name: "asERC721__id")\n  asERC721__supportsMetadata @source(subgraph: "nft", name: "asERC721__supportsMetadata")\n  asERC721__name @source(subgraph: "nft", name: "asERC721__name")\n  asERC721__symbol @source(subgraph: "nft", name: "asERC721__symbol")\n  ERC721tokens @source(subgraph: "nft", name: "ERC721tokens")\n  ERC721operatorOwner @source(subgraph: "nft", name: "ERC721operatorOwner")\n  ERC721operatorOperator @source(subgraph: "nft", name: "ERC721operatorOperator")\n  ERC721transferFromEvent @source(subgraph: "nft", name: "ERC721transferFromEvent")\n  ERC721transferToEvent @source(subgraph: "nft", name: "ERC721transferToEvent")\n  events @source(subgraph: "nft", name: "events")\n}\n\nenum Aggregation_interval @source(subgraph: "nft", name: "Aggregation_interval") @source(subgraph: "uniswap", name: "Aggregation_interval") {\n  hour @source(subgraph: "nft", name: "hour") @source(subgraph: "uniswap", name: "hour")\n  day @source(subgraph: "nft", name: "day") @source(subgraph: "uniswap", name: "day")\n}\n\nscalar BigDecimal @source(subgraph: "uniswap", name: "BigDecimal") @source(subgraph: "nft", name: "BigDecimal") @source(subgraph: "uniswap", name: "BigDecimal")\n\nscalar BigInt @source(subgraph: "uniswap", name: "BigInt") @source(subgraph: "nft", name: "BigInt") @source(subgraph: "uniswap", name: "BigInt")\n\ninput BlockChangedFilter @source(subgraph: "nft", name: "BlockChangedFilter") @source(subgraph: "uniswap", name: "BlockChangedFilter") {\n  number_gte: Int! @source(subgraph: "nft", name: "number_gte", type: "Int!") @source(subgraph: "uniswap", name: "number_gte", type: "Int!")\n}\n\ninput Block_height @source(subgraph: "nft", name: "Block_height") @source(subgraph: "uniswap", name: "Block_height") {\n  hash: Bytes @source(subgraph: "nft", name: "hash", type: "Bytes") @source(subgraph: "uniswap", name: "hash", type: "Bytes")\n  number: Int @source(subgraph: "nft", name: "number", type: "Int") @source(subgraph: "uniswap", name: "number", type: "Int")\n  number_gte: Int @source(subgraph: "nft", name: "number_gte", type: "Int") @source(subgraph: "uniswap", name: "number_gte", type: "Int")\n}\n\nscalar Bytes @source(subgraph: "uniswap", name: "Bytes") @source(subgraph: "nft", name: "Bytes") @source(subgraph: "uniswap", name: "Bytes")\n\ntype ERC721Contract @source(subgraph: "nft", name: "ERC721Contract") @resolver(subgraph: "nft", operation: "query GetErc721ContractById($ERC721Contract_id: Bytes!) { erc721Contracts(where: { id: $ERC721Contract_id) } }", kind: "FETCH") @resolver(subgraph: "nft", operation: "query GetErc721ContractsByIds($ERC721Contract_id: [Bytes!]!) { erc721Contracts(where: { id_in: $ERC721Contract_id }) }", kind: "BATCH") @resolver(subgraph: "nft", operation: "query GetErc721ContractById($ERC721Contract_id: Bytes!) { erc721Contracts(where: { id: $ERC721Contract_id) } }", kind: "FETCH") @resolver(subgraph: "nft", operation: "query GetErc721ContractsByIds($ERC721Contract_id: [Bytes!]!) { erc721Contracts(where: { id_in: $ERC721Contract_id }) }", kind: "BATCH") @variable(subgraph: "nft", name: "ERC721Contract_id", select: "id") {\n  id: Bytes! @source(subgraph: "nft", name: "id", type: "Bytes!")\n  asAccount: User! @source(subgraph: "nft", name: "asAccount", type: "Account!")\n  supportsMetadata: Boolean @source(subgraph: "nft", name: "supportsMetadata", type: "Boolean")\n  name: String @source(subgraph: "nft", name: "name", type: "String")\n  symbol: String @source(subgraph: "nft", name: "symbol", type: "String")\n  tokens(skip: Int = 0, first: Int = 100, orderBy: ERC721Token_orderBy, orderDirection: OrderDirection, where: ERC721Token_filter): [ERC721Token!]! @source(subgraph: "nft", name: "tokens", type: "[ERC721Token!]!")\n  operators(skip: Int = 0, first: Int = 100, orderBy: ERC721Operator_orderBy, orderDirection: OrderDirection, where: ERC721Operator_filter): [ERC721Operator!]! @source(subgraph: "nft", name: "operators", type: "[ERC721Operator!]!")\n  transfers(skip: Int = 0, first: Int = 100, orderBy: ERC721Transfer_orderBy, orderDirection: OrderDirection, where: ERC721Transfer_filter): [ERC721Transfer!]! @source(subgraph: "nft", name: "transfers", type: "[ERC721Transfer!]!")\n}\n\ninput ERC721Contract_filter @source(subgraph: "nft", name: "ERC721Contract_filter") {\n  id: Bytes @source(subgraph: "nft", name: "id", type: "Bytes")\n  id_not: Bytes @source(subgraph: "nft", name: "id_not", type: "Bytes")\n  id_gt: Bytes @source(subgraph: "nft", name: "id_gt", type: "Bytes")\n  id_lt: Bytes @source(subgraph: "nft", name: "id_lt", type: "Bytes")\n  id_gte: Bytes @source(subgraph: "nft", name: "id_gte", type: "Bytes")\n  id_lte: Bytes @source(subgraph: "nft", name: "id_lte", type: "Bytes")\n  id_in: [Bytes!] @source(subgraph: "nft", name: "id_in", type: "[Bytes!]")\n  id_not_in: [Bytes!] @source(subgraph: "nft", name: "id_not_in", type: "[Bytes!]")\n  id_contains: Bytes @source(subgraph: "nft", name: "id_contains", type: "Bytes")\n  id_not_contains: Bytes @source(subgraph: "nft", name: "id_not_contains", type: "Bytes")\n  asAccount: String @source(subgraph: "nft", name: "asAccount", type: "String")\n  asAccount_not: String @source(subgraph: "nft", name: "asAccount_not", type: "String")\n  asAccount_gt: String @source(subgraph: "nft", name: "asAccount_gt", type: "String")\n  asAccount_lt: String @source(subgraph: "nft", name: "asAccount_lt", type: "String")\n  asAccount_gte: String @source(subgraph: "nft", name: "asAccount_gte", type: "String")\n  asAccount_lte: String @source(subgraph: "nft", name: "asAccount_lte", type: "String")\n  asAccount_in: [String!] @source(subgraph: "nft", name: "asAccount_in", type: "[String!]")\n  asAccount_not_in: [String!] @source(subgraph: "nft", name: "asAccount_not_in", type: "[String!]")\n  asAccount_contains: String @source(subgraph: "nft", name: "asAccount_contains", type: "String")\n  asAccount_contains_nocase: String @source(subgraph: "nft", name: "asAccount_contains_nocase", type: "String")\n  asAccount_not_contains: String @source(subgraph: "nft", name: "asAccount_not_contains", type: "String")\n  asAccount_not_contains_nocase: String @source(subgraph: "nft", name: "asAccount_not_contains_nocase", type: "String")\n  asAccount_starts_with: String @source(subgraph: "nft", name: "asAccount_starts_with", type: "String")\n  asAccount_starts_with_nocase: String @source(subgraph: "nft", name: "asAccount_starts_with_nocase", type: "String")\n  asAccount_not_starts_with: String @source(subgraph: "nft", name: "asAccount_not_starts_with", type: "String")\n  asAccount_not_starts_with_nocase: String @source(subgraph: "nft", name: "asAccount_not_starts_with_nocase", type: "String")\n  asAccount_ends_with: String @source(subgraph: "nft", name: "asAccount_ends_with", type: "String")\n  asAccount_ends_with_nocase: String @source(subgraph: "nft", name: "asAccount_ends_with_nocase", type: "String")\n  asAccount_not_ends_with: String @source(subgraph: "nft", name: "asAccount_not_ends_with", type: "String")\n  asAccount_not_ends_with_nocase: String @source(subgraph: "nft", name: "asAccount_not_ends_with_nocase", type: "String")\n  asAccount_: Account_filter @source(subgraph: "nft", name: "asAccount_", type: "Account_filter")\n  supportsMetadata: Boolean @source(subgraph: "nft", name: "supportsMetadata", type: "Boolean")\n  supportsMetadata_not: Boolean @source(subgraph: "nft", name: "supportsMetadata_not", type: "Boolean")\n  supportsMetadata_in: [Boolean!] @source(subgraph: "nft", name: "supportsMetadata_in", type: "[Boolean!]")\n  supportsMetadata_not_in: [Boolean!] @source(subgraph: "nft", name: "supportsMetadata_not_in", type: "[Boolean!]")\n  name: String @source(subgraph: "nft", name: "name", type: "String")\n  name_not: String @source(subgraph: "nft", name: "name_not", type: "String")\n  name_gt: String @source(subgraph: "nft", name: "name_gt", type: "String")\n  name_lt: String @source(subgraph: "nft", name: "name_lt", type: "String")\n  name_gte: String @source(subgraph: "nft", name: "name_gte", type: "String")\n  name_lte: String @source(subgraph: "nft", name: "name_lte", type: "String")\n  name_in: [String!] @source(subgraph: "nft", name: "name_in", type: "[String!]")\n  name_not_in: [String!] @source(subgraph: "nft", name: "name_not_in", type: "[String!]")\n  name_contains: String @source(subgraph: "nft", name: "name_contains", type: "String")\n  name_contains_nocase: String @source(subgraph: "nft", name: "name_contains_nocase", type: "String")\n  name_not_contains: String @source(subgraph: "nft", name: "name_not_contains", type: "String")\n  name_not_contains_nocase: String @source(subgraph: "nft", name: "name_not_contains_nocase", type: "String")\n  name_starts_with: String @source(subgraph: "nft", name: "name_starts_with", type: "String")\n  name_starts_with_nocase: String @source(subgraph: "nft", name: "name_starts_with_nocase", type: "String")\n  name_not_starts_with: String @source(subgraph: "nft", name: "name_not_starts_with", type: "String")\n  name_not_starts_with_nocase: String @source(subgraph: "nft", name: "name_not_starts_with_nocase", type: "String")\n  name_ends_with: String @source(subgraph: "nft", name: "name_ends_with", type: "String")\n  name_ends_with_nocase: String @source(subgraph: "nft", name: "name_ends_with_nocase", type: "String")\n  name_not_ends_with: String @source(subgraph: "nft", name: "name_not_ends_with", type: "String")\n  name_not_ends_with_nocase: String @source(subgraph: "nft", name: "name_not_ends_with_nocase", type: "String")\n  symbol: String @source(subgraph: "nft", name: "symbol", type: "String")\n  symbol_not: String @source(subgraph: "nft", name: "symbol_not", type: "String")\n  symbol_gt: String @source(subgraph: "nft", name: "symbol_gt", type: "String")\n  symbol_lt: String @source(subgraph: "nft", name: "symbol_lt", type: "String")\n  symbol_gte: String @source(subgraph: "nft", name: "symbol_gte", type: "String")\n  symbol_lte: String @source(subgraph: "nft", name: "symbol_lte", type: "String")\n  symbol_in: [String!] @source(subgraph: "nft", name: "symbol_in", type: "[String!]")\n  symbol_not_in: [String!] @source(subgraph: "nft", name: "symbol_not_in", type: "[String!]")\n  symbol_contains: String @source(subgraph: "nft", name: "symbol_contains", type: "String")\n  symbol_contains_nocase: String @source(subgraph: "nft", name: "symbol_contains_nocase", type: "String")\n  symbol_not_contains: String @source(subgraph: "nft", name: "symbol_not_contains", type: "String")\n  symbol_not_contains_nocase: String @source(subgraph: "nft", name: "symbol_not_contains_nocase", type: "String")\n  symbol_starts_with: String @source(subgraph: "nft", name: "symbol_starts_with", type: "String")\n  symbol_starts_with_nocase: String @source(subgraph: "nft", name: "symbol_starts_with_nocase", type: "String")\n  symbol_not_starts_with: String @source(subgraph: "nft", name: "symbol_not_starts_with", type: "String")\n  symbol_not_starts_with_nocase: String @source(subgraph: "nft", name: "symbol_not_starts_with_nocase", type: "String")\n  symbol_ends_with: String @source(subgraph: "nft", name: "symbol_ends_with", type: "String")\n  symbol_ends_with_nocase: String @source(subgraph: "nft", name: "symbol_ends_with_nocase", type: "String")\n  symbol_not_ends_with: String @source(subgraph: "nft", name: "symbol_not_ends_with", type: "String")\n  symbol_not_ends_with_nocase: String @source(subgraph: "nft", name: "symbol_not_ends_with_nocase", type: "String")\n  tokens_: ERC721Token_filter @source(subgraph: "nft", name: "tokens_", type: "ERC721Token_filter")\n  operators_: ERC721Operator_filter @source(subgraph: "nft", name: "operators_", type: "ERC721Operator_filter")\n  transfers_: ERC721Transfer_filter @source(subgraph: "nft", name: "transfers_", type: "ERC721Transfer_filter")\n  """Filter for the block changed event."""\n  _change_block: BlockChangedFilter @source(subgraph: "nft", name: "_change_block", type: "BlockChangedFilter")\n  and: [ERC721Contract_filter] @source(subgraph: "nft", name: "and", type: "[ERC721Contract_filter]")\n  or: [ERC721Contract_filter] @source(subgraph: "nft", name: "or", type: "[ERC721Contract_filter]")\n}\n\nenum ERC721Contract_orderBy @source(subgraph: "nft", name: "ERC721Contract_orderBy") {\n  id @source(subgraph: "nft", name: "id")\n  asAccount @source(subgraph: "nft", name: "asAccount")\n  asAccount__id @source(subgraph: "nft", name: "asAccount__id")\n  supportsMetadata @source(subgraph: "nft", name: "supportsMetadata")\n  name @source(subgraph: "nft", name: "name")\n  symbol @source(subgraph: "nft", name: "symbol")\n  tokens @source(subgraph: "nft", name: "tokens")\n  operators @source(subgraph: "nft", name: "operators")\n  transfers @source(subgraph: "nft", name: "transfers")\n}\n\ntype ERC721Operator @source(subgraph: "nft", name: "ERC721Operator") @resolver(subgraph: "nft", operation: "query Erc721OperatorById($ERC721Operator_id: ID!) { erc721Operator(id: $ERC721Operator_id) }", kind: "FETCH") @resolver(subgraph: "nft", operation: "query GetErc721OperatorById($ERC721Operator_id: ID!) { erc721Operators(where: { id: $ERC721Operator_id) } }", kind: "FETCH") @resolver(subgraph: "nft", operation: "query GetErc721OperatorsByIds($ERC721Operator_id: [ID!]!) { erc721Operators(where: { id_in: $ERC721Operator_id }) }", kind: "BATCH") @resolver(subgraph: "nft", operation: "query Erc721OperatorById($ERC721Operator_id: ID!) { erc721Operator(id: $ERC721Operator_id) }", kind: "FETCH") @resolver(subgraph: "nft", operation: "query GetErc721OperatorById($ERC721Operator_id: ID!) { erc721Operators(where: { id: $ERC721Operator_id) } }", kind: "FETCH") @resolver(subgraph: "nft", operation: "query GetErc721OperatorsByIds($ERC721Operator_id: [ID!]!) { erc721Operators(where: { id_in: $ERC721Operator_id }) }", kind: "BATCH") @variable(subgraph: "nft", name: "ERC721Operator_id", select: "id") {\n  id: ID! @source(subgraph: "nft", name: "id", type: "ID!")\n  contract: ERC721Contract! @source(subgraph: "nft", name: "contract", type: "ERC721Contract!")\n  owner: User! @source(subgraph: "nft", name: "owner", type: "Account!")\n  operator: User! @source(subgraph: "nft", name: "operator", type: "Account!")\n  approved: Boolean! @source(subgraph: "nft", name: "approved", type: "Boolean!")\n}\n\ninput ERC721Operator_filter @source(subgraph: "nft", name: "ERC721Operator_filter") {\n  id: ID @source(subgraph: "nft", name: "id", type: "ID")\n  id_not: ID @source(subgraph: "nft", name: "id_not", type: "ID")\n  id_gt: ID @source(subgraph: "nft", name: "id_gt", type: "ID")\n  id_lt: ID @source(subgraph: "nft", name: "id_lt", type: "ID")\n  id_gte: ID @source(subgraph: "nft", name: "id_gte", type: "ID")\n  id_lte: ID @source(subgraph: "nft", name: "id_lte", type: "ID")\n  id_in: [ID!] @source(subgraph: "nft", name: "id_in", type: "[ID!]")\n  id_not_in: [ID!] @source(subgraph: "nft", name: "id_not_in", type: "[ID!]")\n  contract: String @source(subgraph: "nft", name: "contract", type: "String")\n  contract_not: String @source(subgraph: "nft", name: "contract_not", type: "String")\n  contract_gt: String @source(subgraph: "nft", name: "contract_gt", type: "String")\n  contract_lt: String @source(subgraph: "nft", name: "contract_lt", type: "String")\n  contract_gte: String @source(subgraph: "nft", name: "contract_gte", type: "String")\n  contract_lte: String @source(subgraph: "nft", name: "contract_lte", type: "String")\n  contract_in: [String!] @source(subgraph: "nft", name: "contract_in", type: "[String!]")\n  contract_not_in: [String!] @source(subgraph: "nft", name: "contract_not_in", type: "[String!]")\n  contract_contains: String @source(subgraph: "nft", name: "contract_contains", type: "String")\n  contract_contains_nocase: String @source(subgraph: "nft", name: "contract_contains_nocase", type: "String")\n  contract_not_contains: String @source(subgraph: "nft", name: "contract_not_contains", type: "String")\n  contract_not_contains_nocase: String @source(subgraph: "nft", name: "contract_not_contains_nocase", type: "String")\n  contract_starts_with: String @source(subgraph: "nft", name: "contract_starts_with", type: "String")\n  contract_starts_with_nocase: String @source(subgraph: "nft", name: "contract_starts_with_nocase", type: "String")\n  contract_not_starts_with: String @source(subgraph: "nft", name: "contract_not_starts_with", type: "String")\n  contract_not_starts_with_nocase: String @source(subgraph: "nft", name: "contract_not_starts_with_nocase", type: "String")\n  contract_ends_with: String @source(subgraph: "nft", name: "contract_ends_with", type: "String")\n  contract_ends_with_nocase: String @source(subgraph: "nft", name: "contract_ends_with_nocase", type: "String")\n  contract_not_ends_with: String @source(subgraph: "nft", name: "contract_not_ends_with", type: "String")\n  contract_not_ends_with_nocase: String @source(subgraph: "nft", name: "contract_not_ends_with_nocase", type: "String")\n  contract_: ERC721Contract_filter @source(subgraph: "nft", name: "contract_", type: "ERC721Contract_filter")\n  owner: String @source(subgraph: "nft", name: "owner", type: "String")\n  owner_not: String @source(subgraph: "nft", name: "owner_not", type: "String")\n  owner_gt: String @source(subgraph: "nft", name: "owner_gt", type: "String")\n  owner_lt: String @source(subgraph: "nft", name: "owner_lt", type: "String")\n  owner_gte: String @source(subgraph: "nft", name: "owner_gte", type: "String")\n  owner_lte: String @source(subgraph: "nft", name: "owner_lte", type: "String")\n  owner_in: [String!] @source(subgraph: "nft", name: "owner_in", type: "[String!]")\n  owner_not_in: [String!] @source(subgraph: "nft", name: "owner_not_in", type: "[String!]")\n  owner_contains: String @source(subgraph: "nft", name: "owner_contains", type: "String")\n  owner_contains_nocase: String @source(subgraph: "nft", name: "owner_contains_nocase", type: "String")\n  owner_not_contains: String @source(subgraph: "nft", name: "owner_not_contains", type: "String")\n  owner_not_contains_nocase: String @source(subgraph: "nft", name: "owner_not_contains_nocase", type: "String")\n  owner_starts_with: String @source(subgraph: "nft", name: "owner_starts_with", type: "String")\n  owner_starts_with_nocase: String @source(subgraph: "nft", name: "owner_starts_with_nocase", type: "String")\n  owner_not_starts_with: String @source(subgraph: "nft", name: "owner_not_starts_with", type: "String")\n  owner_not_starts_with_nocase: String @source(subgraph: "nft", name: "owner_not_starts_with_nocase", type: "String")\n  owner_ends_with: String @source(subgraph: "nft", name: "owner_ends_with", type: "String")\n  owner_ends_with_nocase: String @source(subgraph: "nft", name: "owner_ends_with_nocase", type: "String")\n  owner_not_ends_with: String @source(subgraph: "nft", name: "owner_not_ends_with", type: "String")\n  owner_not_ends_with_nocase: String @source(subgraph: "nft", name: "owner_not_ends_with_nocase", type: "String")\n  owner_: Account_filter @source(subgraph: "nft", name: "owner_", type: "Account_filter")\n  operator: String @source(subgraph: "nft", name: "operator", type: "String")\n  operator_not: String @source(subgraph: "nft", name: "operator_not", type: "String")\n  operator_gt: String @source(subgraph: "nft", name: "operator_gt", type: "String")\n  operator_lt: String @source(subgraph: "nft", name: "operator_lt", type: "String")\n  operator_gte: String @source(subgraph: "nft", name: "operator_gte", type: "String")\n  operator_lte: String @source(subgraph: "nft", name: "operator_lte", type: "String")\n  operator_in: [String!] @source(subgraph: "nft", name: "operator_in", type: "[String!]")\n  operator_not_in: [String!] @source(subgraph: "nft", name: "operator_not_in", type: "[String!]")\n  operator_contains: String @source(subgraph: "nft", name: "operator_contains", type: "String")\n  operator_contains_nocase: String @source(subgraph: "nft", name: "operator_contains_nocase", type: "String")\n  operator_not_contains: String @source(subgraph: "nft", name: "operator_not_contains", type: "String")\n  operator_not_contains_nocase: String @source(subgraph: "nft", name: "operator_not_contains_nocase", type: "String")\n  operator_starts_with: String @source(subgraph: "nft", name: "operator_starts_with", type: "String")\n  operator_starts_with_nocase: String @source(subgraph: "nft", name: "operator_starts_with_nocase", type: "String")\n  operator_not_starts_with: String @source(subgraph: "nft", name: "operator_not_starts_with", type: "String")\n  operator_not_starts_with_nocase: String @source(subgraph: "nft", name: "operator_not_starts_with_nocase", type: "String")\n  operator_ends_with: String @source(subgraph: "nft", name: "operator_ends_with", type: "String")\n  operator_ends_with_nocase: String @source(subgraph: "nft", name: "operator_ends_with_nocase", type: "String")\n  operator_not_ends_with: String @source(subgraph: "nft", name: "operator_not_ends_with", type: "String")\n  operator_not_ends_with_nocase: String @source(subgraph: "nft", name: "operator_not_ends_with_nocase", type: "String")\n  operator_: Account_filter @source(subgraph: "nft", name: "operator_", type: "Account_filter")\n  approved: Boolean @source(subgraph: "nft", name: "approved", type: "Boolean")\n  approved_not: Boolean @source(subgraph: "nft", name: "approved_not", type: "Boolean")\n  approved_in: [Boolean!] @source(subgraph: "nft", name: "approved_in", type: "[Boolean!]")\n  approved_not_in: [Boolean!] @source(subgraph: "nft", name: "approved_not_in", type: "[Boolean!]")\n  """Filter for the block changed event."""\n  _change_block: BlockChangedFilter @source(subgraph: "nft", name: "_change_block", type: "BlockChangedFilter")\n  and: [ERC721Operator_filter] @source(subgraph: "nft", name: "and", type: "[ERC721Operator_filter]")\n  or: [ERC721Operator_filter] @source(subgraph: "nft", name: "or", type: "[ERC721Operator_filter]")\n}\n\nenum ERC721Operator_orderBy @source(subgraph: "nft", name: "ERC721Operator_orderBy") {\n  id @source(subgraph: "nft", name: "id")\n  contract @source(subgraph: "nft", name: "contract")\n  contract__id @source(subgraph: "nft", name: "contract__id")\n  contract__supportsMetadata @source(subgraph: "nft", name: "contract__supportsMetadata")\n  contract__name @source(subgraph: "nft", name: "contract__name")\n  contract__symbol @source(subgraph: "nft", name: "contract__symbol")\n  owner @source(subgraph: "nft", name: "owner")\n  owner__id @source(subgraph: "nft", name: "owner__id")\n  operator @source(subgraph: "nft", name: "operator")\n  operator__id @source(subgraph: "nft", name: "operator__id")\n  approved @source(subgraph: "nft", name: "approved")\n}\n\ntype ERC721Token @source(subgraph: "nft", name: "ERC721Token") @resolver(subgraph: "nft", operation: "query Erc721TokenById($ERC721Token_id: ID!) { erc721Token(id: $ERC721Token_id) }", kind: "FETCH") @resolver(subgraph: "nft", operation: "query GetErc721TokenById($ERC721Token_id: ID!) { erc721Tokens(where: { id: $ERC721Token_id) } }", kind: "FETCH") @resolver(subgraph: "nft", operation: "query GetErc721TokensByIds($ERC721Token_id: [ID!]!) { erc721Tokens(where: { id_in: $ERC721Token_id }) }", kind: "BATCH") @resolver(subgraph: "nft", operation: "query Erc721TokenById($ERC721Token_id: ID!) { erc721Token(id: $ERC721Token_id) }", kind: "FETCH") @resolver(subgraph: "nft", operation: "query GetErc721TokenById($ERC721Token_id: ID!) { erc721Tokens(where: { id: $ERC721Token_id) } }", kind: "FETCH") @resolver(subgraph: "nft", operation: "query GetErc721TokensByIds($ERC721Token_id: [ID!]!) { erc721Tokens(where: { id_in: $ERC721Token_id }) }", kind: "BATCH") @variable(subgraph: "nft", name: "ERC721Token_id", select: "id") {\n  id: ID! @source(subgraph: "nft", name: "id", type: "ID!")\n  contract: ERC721Contract! @source(subgraph: "nft", name: "contract", type: "ERC721Contract!")\n  identifier: BigInt! @source(subgraph: "nft", name: "identifier", type: "BigInt!")\n  owner: User! @source(subgraph: "nft", name: "owner", type: "Account!")\n  approval: User! @source(subgraph: "nft", name: "approval", type: "Account!")\n  uri: String @source(subgraph: "nft", name: "uri", type: "String")\n  transfers(skip: Int = 0, first: Int = 100, orderBy: ERC721Transfer_orderBy, orderDirection: OrderDirection, where: ERC721Transfer_filter): [ERC721Transfer!]! @source(subgraph: "nft", name: "transfers", type: "[ERC721Transfer!]!")\n}\n\ninput ERC721Token_filter @source(subgraph: "nft", name: "ERC721Token_filter") {\n  id: ID @source(subgraph: "nft", name: "id", type: "ID")\n  id_not: ID @source(subgraph: "nft", name: "id_not", type: "ID")\n  id_gt: ID @source(subgraph: "nft", name: "id_gt", type: "ID")\n  id_lt: ID @source(subgraph: "nft", name: "id_lt", type: "ID")\n  id_gte: ID @source(subgraph: "nft", name: "id_gte", type: "ID")\n  id_lte: ID @source(subgraph: "nft", name: "id_lte", type: "ID")\n  id_in: [ID!] @source(subgraph: "nft", name: "id_in", type: "[ID!]")\n  id_not_in: [ID!] @source(subgraph: "nft", name: "id_not_in", type: "[ID!]")\n  contract: String @source(subgraph: "nft", name: "contract", type: "String")\n  contract_not: String @source(subgraph: "nft", name: "contract_not", type: "String")\n  contract_gt: String @source(subgraph: "nft", name: "contract_gt", type: "String")\n  contract_lt: String @source(subgraph: "nft", name: "contract_lt", type: "String")\n  contract_gte: String @source(subgraph: "nft", name: "contract_gte", type: "String")\n  contract_lte: String @source(subgraph: "nft", name: "contract_lte", type: "String")\n  contract_in: [String!] @source(subgraph: "nft", name: "contract_in", type: "[String!]")\n  contract_not_in: [String!] @source(subgraph: "nft", name: "contract_not_in", type: "[String!]")\n  contract_contains: String @source(subgraph: "nft", name: "contract_contains", type: "String")\n  contract_contains_nocase: String @source(subgraph: "nft", name: "contract_contains_nocase", type: "String")\n  contract_not_contains: String @source(subgraph: "nft", name: "contract_not_contains", type: "String")\n  contract_not_contains_nocase: String @source(subgraph: "nft", name: "contract_not_contains_nocase", type: "String")\n  contract_starts_with: String @source(subgraph: "nft", name: "contract_starts_with", type: "String")\n  contract_starts_with_nocase: String @source(subgraph: "nft", name: "contract_starts_with_nocase", type: "String")\n  contract_not_starts_with: String @source(subgraph: "nft", name: "contract_not_starts_with", type: "String")\n  contract_not_starts_with_nocase: String @source(subgraph: "nft", name: "contract_not_starts_with_nocase", type: "String")\n  contract_ends_with: String @source(subgraph: "nft", name: "contract_ends_with", type: "String")\n  contract_ends_with_nocase: String @source(subgraph: "nft", name: "contract_ends_with_nocase", type: "String")\n  contract_not_ends_with: String @source(subgraph: "nft", name: "contract_not_ends_with", type: "String")\n  contract_not_ends_with_nocase: String @source(subgraph: "nft", name: "contract_not_ends_with_nocase", type: "String")\n  contract_: ERC721Contract_filter @source(subgraph: "nft", name: "contract_", type: "ERC721Contract_filter")\n  identifier: BigInt @source(subgraph: "nft", name: "identifier", type: "BigInt")\n  identifier_not: BigInt @source(subgraph: "nft", name: "identifier_not", type: "BigInt")\n  identifier_gt: BigInt @source(subgraph: "nft", name: "identifier_gt", type: "BigInt")\n  identifier_lt: BigInt @source(subgraph: "nft", name: "identifier_lt", type: "BigInt")\n  identifier_gte: BigInt @source(subgraph: "nft", name: "identifier_gte", type: "BigInt")\n  identifier_lte: BigInt @source(subgraph: "nft", name: "identifier_lte", type: "BigInt")\n  identifier_in: [BigInt!] @source(subgraph: "nft", name: "identifier_in", type: "[BigInt!]")\n  identifier_not_in: [BigInt!] @source(subgraph: "nft", name: "identifier_not_in", type: "[BigInt!]")\n  owner: String @source(subgraph: "nft", name: "owner", type: "String")\n  owner_not: String @source(subgraph: "nft", name: "owner_not", type: "String")\n  owner_gt: String @source(subgraph: "nft", name: "owner_gt", type: "String")\n  owner_lt: String @source(subgraph: "nft", name: "owner_lt", type: "String")\n  owner_gte: String @source(subgraph: "nft", name: "owner_gte", type: "String")\n  owner_lte: String @source(subgraph: "nft", name: "owner_lte", type: "String")\n  owner_in: [String!] @source(subgraph: "nft", name: "owner_in", type: "[String!]")\n  owner_not_in: [String!] @source(subgraph: "nft", name: "owner_not_in", type: "[String!]")\n  owner_contains: String @source(subgraph: "nft", name: "owner_contains", type: "String")\n  owner_contains_nocase: String @source(subgraph: "nft", name: "owner_contains_nocase", type: "String")\n  owner_not_contains: String @source(subgraph: "nft", name: "owner_not_contains", type: "String")\n  owner_not_contains_nocase: String @source(subgraph: "nft", name: "owner_not_contains_nocase", type: "String")\n  owner_starts_with: String @source(subgraph: "nft", name: "owner_starts_with", type: "String")\n  owner_starts_with_nocase: String @source(subgraph: "nft", name: "owner_starts_with_nocase", type: "String")\n  owner_not_starts_with: String @source(subgraph: "nft", name: "owner_not_starts_with", type: "String")\n  owner_not_starts_with_nocase: String @source(subgraph: "nft", name: "owner_not_starts_with_nocase", type: "String")\n  owner_ends_with: String @source(subgraph: "nft", name: "owner_ends_with", type: "String")\n  owner_ends_with_nocase: String @source(subgraph: "nft", name: "owner_ends_with_nocase", type: "String")\n  owner_not_ends_with: String @source(subgraph: "nft", name: "owner_not_ends_with", type: "String")\n  owner_not_ends_with_nocase: String @source(subgraph: "nft", name: "owner_not_ends_with_nocase", type: "String")\n  owner_: Account_filter @source(subgraph: "nft", name: "owner_", type: "Account_filter")\n  approval: String @source(subgraph: "nft", name: "approval", type: "String")\n  approval_not: String @source(subgraph: "nft", name: "approval_not", type: "String")\n  approval_gt: String @source(subgraph: "nft", name: "approval_gt", type: "String")\n  approval_lt: String @source(subgraph: "nft", name: "approval_lt", type: "String")\n  approval_gte: String @source(subgraph: "nft", name: "approval_gte", type: "String")\n  approval_lte: String @source(subgraph: "nft", name: "approval_lte", type: "String")\n  approval_in: [String!] @source(subgraph: "nft", name: "approval_in", type: "[String!]")\n  approval_not_in: [String!] @source(subgraph: "nft", name: "approval_not_in", type: "[String!]")\n  approval_contains: String @source(subgraph: "nft", name: "approval_contains", type: "String")\n  approval_contains_nocase: String @source(subgraph: "nft", name: "approval_contains_nocase", type: "String")\n  approval_not_contains: String @source(subgraph: "nft", name: "approval_not_contains", type: "String")\n  approval_not_contains_nocase: String @source(subgraph: "nft", name: "approval_not_contains_nocase", type: "String")\n  approval_starts_with: String @source(subgraph: "nft", name: "approval_starts_with", type: "String")\n  approval_starts_with_nocase: String @source(subgraph: "nft", name: "approval_starts_with_nocase", type: "String")\n  approval_not_starts_with: String @source(subgraph: "nft", name: "approval_not_starts_with", type: "String")\n  approval_not_starts_with_nocase: String @source(subgraph: "nft", name: "approval_not_starts_with_nocase", type: "String")\n  approval_ends_with: String @source(subgraph: "nft", name: "approval_ends_with", type: "String")\n  approval_ends_with_nocase: String @source(subgraph: "nft", name: "approval_ends_with_nocase", type: "String")\n  approval_not_ends_with: String @source(subgraph: "nft", name: "approval_not_ends_with", type: "String")\n  approval_not_ends_with_nocase: String @source(subgraph: "nft", name: "approval_not_ends_with_nocase", type: "String")\n  approval_: Account_filter @source(subgraph: "nft", name: "approval_", type: "Account_filter")\n  uri: String @source(subgraph: "nft", name: "uri", type: "String")\n  uri_not: String @source(subgraph: "nft", name: "uri_not", type: "String")\n  uri_gt: String @source(subgraph: "nft", name: "uri_gt", type: "String")\n  uri_lt: String @source(subgraph: "nft", name: "uri_lt", type: "String")\n  uri_gte: String @source(subgraph: "nft", name: "uri_gte", type: "String")\n  uri_lte: String @source(subgraph: "nft", name: "uri_lte", type: "String")\n  uri_in: [String!] @source(subgraph: "nft", name: "uri_in", type: "[String!]")\n  uri_not_in: [String!] @source(subgraph: "nft", name: "uri_not_in", type: "[String!]")\n  uri_contains: String @source(subgraph: "nft", name: "uri_contains", type: "String")\n  uri_contains_nocase: String @source(subgraph: "nft", name: "uri_contains_nocase", type: "String")\n  uri_not_contains: String @source(subgraph: "nft", name: "uri_not_contains", type: "String")\n  uri_not_contains_nocase: String @source(subgraph: "nft", name: "uri_not_contains_nocase", type: "String")\n  uri_starts_with: String @source(subgraph: "nft", name: "uri_starts_with", type: "String")\n  uri_starts_with_nocase: String @source(subgraph: "nft", name: "uri_starts_with_nocase", type: "String")\n  uri_not_starts_with: String @source(subgraph: "nft", name: "uri_not_starts_with", type: "String")\n  uri_not_starts_with_nocase: String @source(subgraph: "nft", name: "uri_not_starts_with_nocase", type: "String")\n  uri_ends_with: String @source(subgraph: "nft", name: "uri_ends_with", type: "String")\n  uri_ends_with_nocase: String @source(subgraph: "nft", name: "uri_ends_with_nocase", type: "String")\n  uri_not_ends_with: String @source(subgraph: "nft", name: "uri_not_ends_with", type: "String")\n  uri_not_ends_with_nocase: String @source(subgraph: "nft", name: "uri_not_ends_with_nocase", type: "String")\n  transfers_: ERC721Transfer_filter @source(subgraph: "nft", name: "transfers_", type: "ERC721Transfer_filter")\n  """Filter for the block changed event."""\n  _change_block: BlockChangedFilter @source(subgraph: "nft", name: "_change_block", type: "BlockChangedFilter")\n  and: [ERC721Token_filter] @source(subgraph: "nft", name: "and", type: "[ERC721Token_filter]")\n  or: [ERC721Token_filter] @source(subgraph: "nft", name: "or", type: "[ERC721Token_filter]")\n}\n\nenum ERC721Token_orderBy @source(subgraph: "nft", name: "ERC721Token_orderBy") {\n  id @source(subgraph: "nft", name: "id")\n  contract @source(subgraph: "nft", name: "contract")\n  contract__id @source(subgraph: "nft", name: "contract__id")\n  contract__supportsMetadata @source(subgraph: "nft", name: "contract__supportsMetadata")\n  contract__name @source(subgraph: "nft", name: "contract__name")\n  contract__symbol @source(subgraph: "nft", name: "contract__symbol")\n  identifier @source(subgraph: "nft", name: "identifier")\n  owner @source(subgraph: "nft", name: "owner")\n  owner__id @source(subgraph: "nft", name: "owner__id")\n  approval @source(subgraph: "nft", name: "approval")\n  approval__id @source(subgraph: "nft", name: "approval__id")\n  uri @source(subgraph: "nft", name: "uri")\n  transfers @source(subgraph: "nft", name: "transfers")\n}\n\ntype ERC721Transfer implements Event @source(subgraph: "nft", name: "ERC721Transfer") @resolver(subgraph: "nft", operation: "query Erc721TransferById($ERC721Transfer_id: ID!) { erc721Transfer(id: $ERC721Transfer_id) }", kind: "FETCH") @resolver(subgraph: "nft", operation: "query GetErc721TransferById($ERC721Transfer_id: ID!) { erc721Transfers(where: { id: $ERC721Transfer_id) } }", kind: "FETCH") @resolver(subgraph: "nft", operation: "query GetErc721TransfersByIds($ERC721Transfer_id: [ID!]!) { erc721Transfers(where: { id_in: $ERC721Transfer_id }) }", kind: "BATCH") @resolver(subgraph: "nft", operation: "query Erc721TransferById($ERC721Transfer_id: ID!) { erc721Transfer(id: $ERC721Transfer_id) }", kind: "FETCH") @resolver(subgraph: "nft", operation: "query GetErc721TransferById($ERC721Transfer_id: ID!) { erc721Transfers(where: { id: $ERC721Transfer_id) } }", kind: "FETCH") @resolver(subgraph: "nft", operation: "query GetErc721TransfersByIds($ERC721Transfer_id: [ID!]!) { erc721Transfers(where: { id_in: $ERC721Transfer_id }) }", kind: "BATCH") @variable(subgraph: "nft", name: "ERC721Transfer_id", select: "id") {\n  id: ID! @source(subgraph: "nft", name: "id", type: "ID!")\n  emitter: User! @source(subgraph: "nft", name: "emitter", type: "Account!")\n  transaction: Transaction! @source(subgraph: "nft", name: "transaction", type: "Transaction!")\n  timestamp: BigInt! @source(subgraph: "nft", name: "timestamp", type: "BigInt!")\n  contract: ERC721Contract! @source(subgraph: "nft", name: "contract", type: "ERC721Contract!")\n  token: ERC721Token! @source(subgraph: "nft", name: "token", type: "ERC721Token!")\n  from: User! @source(subgraph: "nft", name: "from", type: "Account!")\n  to: User! @source(subgraph: "nft", name: "to", type: "Account!")\n}\n\ninput ERC721Transfer_filter @source(subgraph: "nft", name: "ERC721Transfer_filter") {\n  id: ID @source(subgraph: "nft", name: "id", type: "ID")\n  id_not: ID @source(subgraph: "nft", name: "id_not", type: "ID")\n  id_gt: ID @source(subgraph: "nft", name: "id_gt", type: "ID")\n  id_lt: ID @source(subgraph: "nft", name: "id_lt", type: "ID")\n  id_gte: ID @source(subgraph: "nft", name: "id_gte", type: "ID")\n  id_lte: ID @source(subgraph: "nft", name: "id_lte", type: "ID")\n  id_in: [ID!] @source(subgraph: "nft", name: "id_in", type: "[ID!]")\n  id_not_in: [ID!] @source(subgraph: "nft", name: "id_not_in", type: "[ID!]")\n  emitter: String @source(subgraph: "nft", name: "emitter", type: "String")\n  emitter_not: String @source(subgraph: "nft", name: "emitter_not", type: "String")\n  emitter_gt: String @source(subgraph: "nft", name: "emitter_gt", type: "String")\n  emitter_lt: String @source(subgraph: "nft", name: "emitter_lt", type: "String")\n  emitter_gte: String @source(subgraph: "nft", name: "emitter_gte", type: "String")\n  emitter_lte: String @source(subgraph: "nft", name: "emitter_lte", type: "String")\n  emitter_in: [String!] @source(subgraph: "nft", name: "emitter_in", type: "[String!]")\n  emitter_not_in: [String!] @source(subgraph: "nft", name: "emitter_not_in", type: "[String!]")\n  emitter_contains: String @source(subgraph: "nft", name: "emitter_contains", type: "String")\n  emitter_contains_nocase: String @source(subgraph: "nft", name: "emitter_contains_nocase", type: "String")\n  emitter_not_contains: String @source(subgraph: "nft", name: "emitter_not_contains", type: "String")\n  emitter_not_contains_nocase: String @source(subgraph: "nft", name: "emitter_not_contains_nocase", type: "String")\n  emitter_starts_with: String @source(subgraph: "nft", name: "emitter_starts_with", type: "String")\n  emitter_starts_with_nocase: String @source(subgraph: "nft", name: "emitter_starts_with_nocase", type: "String")\n  emitter_not_starts_with: String @source(subgraph: "nft", name: "emitter_not_starts_with", type: "String")\n  emitter_not_starts_with_nocase: String @source(subgraph: "nft", name: "emitter_not_starts_with_nocase", type: "String")\n  emitter_ends_with: String @source(subgraph: "nft", name: "emitter_ends_with", type: "String")\n  emitter_ends_with_nocase: String @source(subgraph: "nft", name: "emitter_ends_with_nocase", type: "String")\n  emitter_not_ends_with: String @source(subgraph: "nft", name: "emitter_not_ends_with", type: "String")\n  emitter_not_ends_with_nocase: String @source(subgraph: "nft", name: "emitter_not_ends_with_nocase", type: "String")\n  emitter_: Account_filter @source(subgraph: "nft", name: "emitter_", type: "Account_filter")\n  transaction: String @source(subgraph: "nft", name: "transaction", type: "String")\n  transaction_not: String @source(subgraph: "nft", name: "transaction_not", type: "String")\n  transaction_gt: String @source(subgraph: "nft", name: "transaction_gt", type: "String")\n  transaction_lt: String @source(subgraph: "nft", name: "transaction_lt", type: "String")\n  transaction_gte: String @source(subgraph: "nft", name: "transaction_gte", type: "String")\n  transaction_lte: String @source(subgraph: "nft", name: "transaction_lte", type: "String")\n  transaction_in: [String!] @source(subgraph: "nft", name: "transaction_in", type: "[String!]")\n  transaction_not_in: [String!] @source(subgraph: "nft", name: "transaction_not_in", type: "[String!]")\n  transaction_contains: String @source(subgraph: "nft", name: "transaction_contains", type: "String")\n  transaction_contains_nocase: String @source(subgraph: "nft", name: "transaction_contains_nocase", type: "String")\n  transaction_not_contains: String @source(subgraph: "nft", name: "transaction_not_contains", type: "String")\n  transaction_not_contains_nocase: String @source(subgraph: "nft", name: "transaction_not_contains_nocase", type: "String")\n  transaction_starts_with: String @source(subgraph: "nft", name: "transaction_starts_with", type: "String")\n  transaction_starts_with_nocase: String @source(subgraph: "nft", name: "transaction_starts_with_nocase", type: "String")\n  transaction_not_starts_with: String @source(subgraph: "nft", name: "transaction_not_starts_with", type: "String")\n  transaction_not_starts_with_nocase: String @source(subgraph: "nft", name: "transaction_not_starts_with_nocase", type: "String")\n  transaction_ends_with: String @source(subgraph: "nft", name: "transaction_ends_with", type: "String")\n  transaction_ends_with_nocase: String @source(subgraph: "nft", name: "transaction_ends_with_nocase", type: "String")\n  transaction_not_ends_with: String @source(subgraph: "nft", name: "transaction_not_ends_with", type: "String")\n  transaction_not_ends_with_nocase: String @source(subgraph: "nft", name: "transaction_not_ends_with_nocase", type: "String")\n  transaction_: Transaction_filter @source(subgraph: "nft", name: "transaction_", type: "Transaction_filter")\n  timestamp: BigInt @source(subgraph: "nft", name: "timestamp", type: "BigInt")\n  timestamp_not: BigInt @source(subgraph: "nft", name: "timestamp_not", type: "BigInt")\n  timestamp_gt: BigInt @source(subgraph: "nft", name: "timestamp_gt", type: "BigInt")\n  timestamp_lt: BigInt @source(subgraph: "nft", name: "timestamp_lt", type: "BigInt")\n  timestamp_gte: BigInt @source(subgraph: "nft", name: "timestamp_gte", type: "BigInt")\n  timestamp_lte: BigInt @source(subgraph: "nft", name: "timestamp_lte", type: "BigInt")\n  timestamp_in: [BigInt!] @source(subgraph: "nft", name: "timestamp_in", type: "[BigInt!]")\n  timestamp_not_in: [BigInt!] @source(subgraph: "nft", name: "timestamp_not_in", type: "[BigInt!]")\n  contract: String @source(subgraph: "nft", name: "contract", type: "String")\n  contract_not: String @source(subgraph: "nft", name: "contract_not", type: "String")\n  contract_gt: String @source(subgraph: "nft", name: "contract_gt", type: "String")\n  contract_lt: String @source(subgraph: "nft", name: "contract_lt", type: "String")\n  contract_gte: String @source(subgraph: "nft", name: "contract_gte", type: "String")\n  contract_lte: String @source(subgraph: "nft", name: "contract_lte", type: "String")\n  contract_in: [String!] @source(subgraph: "nft", name: "contract_in", type: "[String!]")\n  contract_not_in: [String!] @source(subgraph: "nft", name: "contract_not_in", type: "[String!]")\n  contract_contains: String @source(subgraph: "nft", name: "contract_contains", type: "String")\n  contract_contains_nocase: String @source(subgraph: "nft", name: "contract_contains_nocase", type: "String")\n  contract_not_contains: String @source(subgraph: "nft", name: "contract_not_contains", type: "String")\n  contract_not_contains_nocase: String @source(subgraph: "nft", name: "contract_not_contains_nocase", type: "String")\n  contract_starts_with: String @source(subgraph: "nft", name: "contract_starts_with", type: "String")\n  contract_starts_with_nocase: String @source(subgraph: "nft", name: "contract_starts_with_nocase", type: "String")\n  contract_not_starts_with: String @source(subgraph: "nft", name: "contract_not_starts_with", type: "String")\n  contract_not_starts_with_nocase: String @source(subgraph: "nft", name: "contract_not_starts_with_nocase", type: "String")\n  contract_ends_with: String @source(subgraph: "nft", name: "contract_ends_with", type: "String")\n  contract_ends_with_nocase: String @source(subgraph: "nft", name: "contract_ends_with_nocase", type: "String")\n  contract_not_ends_with: String @source(subgraph: "nft", name: "contract_not_ends_with", type: "String")\n  contract_not_ends_with_nocase: String @source(subgraph: "nft", name: "contract_not_ends_with_nocase", type: "String")\n  contract_: ERC721Contract_filter @source(subgraph: "nft", name: "contract_", type: "ERC721Contract_filter")\n  token: String @source(subgraph: "nft", name: "token", type: "String")\n  token_not: String @source(subgraph: "nft", name: "token_not", type: "String")\n  token_gt: String @source(subgraph: "nft", name: "token_gt", type: "String")\n  token_lt: String @source(subgraph: "nft", name: "token_lt", type: "String")\n  token_gte: String @source(subgraph: "nft", name: "token_gte", type: "String")\n  token_lte: String @source(subgraph: "nft", name: "token_lte", type: "String")\n  token_in: [String!] @source(subgraph: "nft", name: "token_in", type: "[String!]")\n  token_not_in: [String!] @source(subgraph: "nft", name: "token_not_in", type: "[String!]")\n  token_contains: String @source(subgraph: "nft", name: "token_contains", type: "String")\n  token_contains_nocase: String @source(subgraph: "nft", name: "token_contains_nocase", type: "String")\n  token_not_contains: String @source(subgraph: "nft", name: "token_not_contains", type: "String")\n  token_not_contains_nocase: String @source(subgraph: "nft", name: "token_not_contains_nocase", type: "String")\n  token_starts_with: String @source(subgraph: "nft", name: "token_starts_with", type: "String")\n  token_starts_with_nocase: String @source(subgraph: "nft", name: "token_starts_with_nocase", type: "String")\n  token_not_starts_with: String @source(subgraph: "nft", name: "token_not_starts_with", type: "String")\n  token_not_starts_with_nocase: String @source(subgraph: "nft", name: "token_not_starts_with_nocase", type: "String")\n  token_ends_with: String @source(subgraph: "nft", name: "token_ends_with", type: "String")\n  token_ends_with_nocase: String @source(subgraph: "nft", name: "token_ends_with_nocase", type: "String")\n  token_not_ends_with: String @source(subgraph: "nft", name: "token_not_ends_with", type: "String")\n  token_not_ends_with_nocase: String @source(subgraph: "nft", name: "token_not_ends_with_nocase", type: "String")\n  token_: ERC721Token_filter @source(subgraph: "nft", name: "token_", type: "ERC721Token_filter")\n  from: String @source(subgraph: "nft", name: "from", type: "String")\n  from_not: String @source(subgraph: "nft", name: "from_not", type: "String")\n  from_gt: String @source(subgraph: "nft", name: "from_gt", type: "String")\n  from_lt: String @source(subgraph: "nft", name: "from_lt", type: "String")\n  from_gte: String @source(subgraph: "nft", name: "from_gte", type: "String")\n  from_lte: String @source(subgraph: "nft", name: "from_lte", type: "String")\n  from_in: [String!] @source(subgraph: "nft", name: "from_in", type: "[String!]")\n  from_not_in: [String!] @source(subgraph: "nft", name: "from_not_in", type: "[String!]")\n  from_contains: String @source(subgraph: "nft", name: "from_contains", type: "String")\n  from_contains_nocase: String @source(subgraph: "nft", name: "from_contains_nocase", type: "String")\n  from_not_contains: String @source(subgraph: "nft", name: "from_not_contains", type: "String")\n  from_not_contains_nocase: String @source(subgraph: "nft", name: "from_not_contains_nocase", type: "String")\n  from_starts_with: String @source(subgraph: "nft", name: "from_starts_with", type: "String")\n  from_starts_with_nocase: String @source(subgraph: "nft", name: "from_starts_with_nocase", type: "String")\n  from_not_starts_with: String @source(subgraph: "nft", name: "from_not_starts_with", type: "String")\n  from_not_starts_with_nocase: String @source(subgraph: "nft", name: "from_not_starts_with_nocase", type: "String")\n  from_ends_with: String @source(subgraph: "nft", name: "from_ends_with", type: "String")\n  from_ends_with_nocase: String @source(subgraph: "nft", name: "from_ends_with_nocase", type: "String")\n  from_not_ends_with: String @source(subgraph: "nft", name: "from_not_ends_with", type: "String")\n  from_not_ends_with_nocase: String @source(subgraph: "nft", name: "from_not_ends_with_nocase", type: "String")\n  from_: Account_filter @source(subgraph: "nft", name: "from_", type: "Account_filter")\n  to: String @source(subgraph: "nft", name: "to", type: "String")\n  to_not: String @source(subgraph: "nft", name: "to_not", type: "String")\n  to_gt: String @source(subgraph: "nft", name: "to_gt", type: "String")\n  to_lt: String @source(subgraph: "nft", name: "to_lt", type: "String")\n  to_gte: String @source(subgraph: "nft", name: "to_gte", type: "String")\n  to_lte: String @source(subgraph: "nft", name: "to_lte", type: "String")\n  to_in: [String!] @source(subgraph: "nft", name: "to_in", type: "[String!]")\n  to_not_in: [String!] @source(subgraph: "nft", name: "to_not_in", type: "[String!]")\n  to_contains: String @source(subgraph: "nft", name: "to_contains", type: "String")\n  to_contains_nocase: String @source(subgraph: "nft", name: "to_contains_nocase", type: "String")\n  to_not_contains: String @source(subgraph: "nft", name: "to_not_contains", type: "String")\n  to_not_contains_nocase: String @source(subgraph: "nft", name: "to_not_contains_nocase", type: "String")\n  to_starts_with: String @source(subgraph: "nft", name: "to_starts_with", type: "String")\n  to_starts_with_nocase: String @source(subgraph: "nft", name: "to_starts_with_nocase", type: "String")\n  to_not_starts_with: String @source(subgraph: "nft", name: "to_not_starts_with", type: "String")\n  to_not_starts_with_nocase: String @source(subgraph: "nft", name: "to_not_starts_with_nocase", type: "String")\n  to_ends_with: String @source(subgraph: "nft", name: "to_ends_with", type: "String")\n  to_ends_with_nocase: String @source(subgraph: "nft", name: "to_ends_with_nocase", type: "String")\n  to_not_ends_with: String @source(subgraph: "nft", name: "to_not_ends_with", type: "String")\n  to_not_ends_with_nocase: String @source(subgraph: "nft", name: "to_not_ends_with_nocase", type: "String")\n  to_: Account_filter @source(subgraph: "nft", name: "to_", type: "Account_filter")\n  """Filter for the block changed event."""\n  _change_block: BlockChangedFilter @source(subgraph: "nft", name: "_change_block", type: "BlockChangedFilter")\n  and: [ERC721Transfer_filter] @source(subgraph: "nft", name: "and", type: "[ERC721Transfer_filter]")\n  or: [ERC721Transfer_filter] @source(subgraph: "nft", name: "or", type: "[ERC721Transfer_filter]")\n}\n\nenum ERC721Transfer_orderBy @source(subgraph: "nft", name: "ERC721Transfer_orderBy") {\n  id @source(subgraph: "nft", name: "id")\n  emitter @source(subgraph: "nft", name: "emitter")\n  emitter__id @source(subgraph: "nft", name: "emitter__id")\n  transaction @source(subgraph: "nft", name: "transaction")\n  transaction__id @source(subgraph: "nft", name: "transaction__id")\n  transaction__timestamp @source(subgraph: "nft", name: "transaction__timestamp")\n  transaction__blockNumber @source(subgraph: "nft", name: "transaction__blockNumber")\n  timestamp @source(subgraph: "nft", name: "timestamp")\n  contract @source(subgraph: "nft", name: "contract")\n  contract__id @source(subgraph: "nft", name: "contract__id")\n  contract__supportsMetadata @source(subgraph: "nft", name: "contract__supportsMetadata")\n  contract__name @source(subgraph: "nft", name: "contract__name")\n  contract__symbol @source(subgraph: "nft", name: "contract__symbol")\n  token @source(subgraph: "nft", name: "token")\n  token__id @source(subgraph: "nft", name: "token__id")\n  token__identifier @source(subgraph: "nft", name: "token__identifier")\n  token__uri @source(subgraph: "nft", name: "token__uri")\n  from @source(subgraph: "nft", name: "from")\n  from__id @source(subgraph: "nft", name: "from__id")\n  to @source(subgraph: "nft", name: "to")\n  to__id @source(subgraph: "nft", name: "to__id")\n}\n\ninterface Event @source(subgraph: "nft", name: "Event") {\n  id: ID! @source(subgraph: "nft", name: "id", type: "ID!")\n  transaction: Transaction! @source(subgraph: "nft", name: "transaction", type: "Transaction!")\n  emitter: User! @source(subgraph: "nft", name: "emitter", type: "Account!")\n  timestamp: BigInt! @source(subgraph: "nft", name: "timestamp", type: "BigInt!")\n}\n\ninput Event_filter @source(subgraph: "nft", name: "Event_filter") {\n  id: ID @source(subgraph: "nft", name: "id", type: "ID")\n  id_not: ID @source(subgraph: "nft", name: "id_not", type: "ID")\n  id_gt: ID @source(subgraph: "nft", name: "id_gt", type: "ID")\n  id_lt: ID @source(subgraph: "nft", name: "id_lt", type: "ID")\n  id_gte: ID @source(subgraph: "nft", name: "id_gte", type: "ID")\n  id_lte: ID @source(subgraph: "nft", name: "id_lte", type: "ID")\n  id_in: [ID!] @source(subgraph: "nft", name: "id_in", type: "[ID!]")\n  id_not_in: [ID!] @source(subgraph: "nft", name: "id_not_in", type: "[ID!]")\n  transaction: String @source(subgraph: "nft", name: "transaction", type: "String")\n  transaction_not: String @source(subgraph: "nft", name: "transaction_not", type: "String")\n  transaction_gt: String @source(subgraph: "nft", name: "transaction_gt", type: "String")\n  transaction_lt: String @source(subgraph: "nft", name: "transaction_lt", type: "String")\n  transaction_gte: String @source(subgraph: "nft", name: "transaction_gte", type: "String")\n  transaction_lte: String @source(subgraph: "nft", name: "transaction_lte", type: "String")\n  transaction_in: [String!] @source(subgraph: "nft", name: "transaction_in", type: "[String!]")\n  transaction_not_in: [String!] @source(subgraph: "nft", name: "transaction_not_in", type: "[String!]")\n  transaction_contains: String @source(subgraph: "nft", name: "transaction_contains", type: "String")\n  transaction_contains_nocase: String @source(subgraph: "nft", name: "transaction_contains_nocase", type: "String")\n  transaction_not_contains: String @source(subgraph: "nft", name: "transaction_not_contains", type: "String")\n  transaction_not_contains_nocase: String @source(subgraph: "nft", name: "transaction_not_contains_nocase", type: "String")\n  transaction_starts_with: String @source(subgraph: "nft", name: "transaction_starts_with", type: "String")\n  transaction_starts_with_nocase: String @source(subgraph: "nft", name: "transaction_starts_with_nocase", type: "String")\n  transaction_not_starts_with: String @source(subgraph: "nft", name: "transaction_not_starts_with", type: "String")\n  transaction_not_starts_with_nocase: String @source(subgraph: "nft", name: "transaction_not_starts_with_nocase", type: "String")\n  transaction_ends_with: String @source(subgraph: "nft", name: "transaction_ends_with", type: "String")\n  transaction_ends_with_nocase: String @source(subgraph: "nft", name: "transaction_ends_with_nocase", type: "String")\n  transaction_not_ends_with: String @source(subgraph: "nft", name: "transaction_not_ends_with", type: "String")\n  transaction_not_ends_with_nocase: String @source(subgraph: "nft", name: "transaction_not_ends_with_nocase", type: "String")\n  transaction_: Transaction_filter @source(subgraph: "nft", name: "transaction_", type: "Transaction_filter")\n  emitter: String @source(subgraph: "nft", name: "emitter", type: "String")\n  emitter_not: String @source(subgraph: "nft", name: "emitter_not", type: "String")\n  emitter_gt: String @source(subgraph: "nft", name: "emitter_gt", type: "String")\n  emitter_lt: String @source(subgraph: "nft", name: "emitter_lt", type: "String")\n  emitter_gte: String @source(subgraph: "nft", name: "emitter_gte", type: "String")\n  emitter_lte: String @source(subgraph: "nft", name: "emitter_lte", type: "String")\n  emitter_in: [String!] @source(subgraph: "nft", name: "emitter_in", type: "[String!]")\n  emitter_not_in: [String!] @source(subgraph: "nft", name: "emitter_not_in", type: "[String!]")\n  emitter_contains: String @source(subgraph: "nft", name: "emitter_contains", type: "String")\n  emitter_contains_nocase: String @source(subgraph: "nft", name: "emitter_contains_nocase", type: "String")\n  emitter_not_contains: String @source(subgraph: "nft", name: "emitter_not_contains", type: "String")\n  emitter_not_contains_nocase: String @source(subgraph: "nft", name: "emitter_not_contains_nocase", type: "String")\n  emitter_starts_with: String @source(subgraph: "nft", name: "emitter_starts_with", type: "String")\n  emitter_starts_with_nocase: String @source(subgraph: "nft", name: "emitter_starts_with_nocase", type: "String")\n  emitter_not_starts_with: String @source(subgraph: "nft", name: "emitter_not_starts_with", type: "String")\n  emitter_not_starts_with_nocase: String @source(subgraph: "nft", name: "emitter_not_starts_with_nocase", type: "String")\n  emitter_ends_with: String @source(subgraph: "nft", name: "emitter_ends_with", type: "String")\n  emitter_ends_with_nocase: String @source(subgraph: "nft", name: "emitter_ends_with_nocase", type: "String")\n  emitter_not_ends_with: String @source(subgraph: "nft", name: "emitter_not_ends_with", type: "String")\n  emitter_not_ends_with_nocase: String @source(subgraph: "nft", name: "emitter_not_ends_with_nocase", type: "String")\n  emitter_: Account_filter @source(subgraph: "nft", name: "emitter_", type: "Account_filter")\n  timestamp: BigInt @source(subgraph: "nft", name: "timestamp", type: "BigInt")\n  timestamp_not: BigInt @source(subgraph: "nft", name: "timestamp_not", type: "BigInt")\n  timestamp_gt: BigInt @source(subgraph: "nft", name: "timestamp_gt", type: "BigInt")\n  timestamp_lt: BigInt @source(subgraph: "nft", name: "timestamp_lt", type: "BigInt")\n  timestamp_gte: BigInt @source(subgraph: "nft", name: "timestamp_gte", type: "BigInt")\n  timestamp_lte: BigInt @source(subgraph: "nft", name: "timestamp_lte", type: "BigInt")\n  timestamp_in: [BigInt!] @source(subgraph: "nft", name: "timestamp_in", type: "[BigInt!]")\n  timestamp_not_in: [BigInt!] @source(subgraph: "nft", name: "timestamp_not_in", type: "[BigInt!]")\n  """Filter for the block changed event."""\n  _change_block: BlockChangedFilter @source(subgraph: "nft", name: "_change_block", type: "BlockChangedFilter")\n  and: [Event_filter] @source(subgraph: "nft", name: "and", type: "[Event_filter]")\n  or: [Event_filter] @source(subgraph: "nft", name: "or", type: "[Event_filter]")\n}\n\nenum Event_orderBy @source(subgraph: "nft", name: "Event_orderBy") {\n  id @source(subgraph: "nft", name: "id")\n  transaction @source(subgraph: "nft", name: "transaction")\n  transaction__id @source(subgraph: "nft", name: "transaction__id")\n  transaction__timestamp @source(subgraph: "nft", name: "transaction__timestamp")\n  transaction__blockNumber @source(subgraph: "nft", name: "transaction__blockNumber")\n  emitter @source(subgraph: "nft", name: "emitter")\n  emitter__id @source(subgraph: "nft", name: "emitter__id")\n  timestamp @source(subgraph: "nft", name: "timestamp")\n}\n\n"""\n8 bytes signed integer\n\n"""\nscalar Int8 @source(subgraph: "uniswap", name: "Int8") @source(subgraph: "nft", name: "Int8") @source(subgraph: "uniswap", name: "Int8")\n\n"""Defines the order direction, either ascending or descending"""\nenum OrderDirection @source(subgraph: "nft", name: "OrderDirection") @source(subgraph: "uniswap", name: "OrderDirection") {\n  asc @source(subgraph: "nft", name: "asc") @source(subgraph: "uniswap", name: "asc")\n  desc @source(subgraph: "nft", name: "desc") @source(subgraph: "uniswap", name: "desc")\n}\n\ntype Query {\n  account(\n    id: ID!\n    """\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    """\n    block: Block_height\n    """\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    """\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): User @resolver(subgraph: "nft", operation: "query account($id: ID!, $block: Block_height, $subgraphError: _SubgraphErrorPolicy_! = \\"deny\\") { account(id: $id, block: $block, subgraphError: $subgraphError) }") @source(subgraph: "nft", name: "account", type: "Account")\n  accounts(\n    skip: Int = 0\n    first: Int = 100\n    orderBy: Account_orderBy\n    orderDirection: OrderDirection\n    where: Account_filter\n    """\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    """\n    block: Block_height\n    """\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    """\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): [User!]! @resolver(subgraph: "nft", operation: "query accounts($skip: Int, $first: Int = 100, $orderBy: Account_orderBy, $orderDirection: OrderDirection, $where: Account_filter, $block: Block_height, $subgraphError: _SubgraphErrorPolicy_! = \\"deny\\") { accounts(skip: $skip, first: $first, orderBy: $orderBy, orderDirection: $orderDirection, where: $where, block: $block, subgraphError: $subgraphError) }") @source(subgraph: "nft", name: "accounts", type: "[Account!]!")\n  erc721Contract(\n    id: ID!\n    """\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    """\n    block: Block_height\n    """\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    """\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): ERC721Contract @resolver(subgraph: "nft", operation: "query erc721Contract($id: ID!, $block: Block_height, $subgraphError: _SubgraphErrorPolicy_! = \\"deny\\") { erc721Contract(id: $id, block: $block, subgraphError: $subgraphError) }") @source(subgraph: "nft", name: "erc721Contract", type: "ERC721Contract")\n  erc721Contracts(\n    skip: Int = 0\n    first: Int = 100\n    orderBy: ERC721Contract_orderBy\n    orderDirection: OrderDirection\n    where: ERC721Contract_filter\n    """\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    """\n    block: Block_height\n    """\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    """\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): [ERC721Contract!]! @resolver(subgraph: "nft", operation: "query erc721Contracts($skip: Int, $first: Int = 100, $orderBy: ERC721Contract_orderBy, $orderDirection: OrderDirection, $where: ERC721Contract_filter, $block: Block_height, $subgraphError: _SubgraphErrorPolicy_! = \\"deny\\") { erc721Contracts(skip: $skip, first: $first, orderBy: $orderBy, orderDirection: $orderDirection, where: $where, block: $block, subgraphError: $subgraphError) }") @source(subgraph: "nft", name: "erc721Contracts", type: "[ERC721Contract!]!")\n  erc721Token(\n    id: ID!\n    """\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    """\n    block: Block_height\n    """\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    """\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): ERC721Token @resolver(subgraph: "nft", operation: "query erc721Token($id: ID!, $block: Block_height, $subgraphError: _SubgraphErrorPolicy_! = \\"deny\\") { erc721Token(id: $id, block: $block, subgraphError: $subgraphError) }") @source(subgraph: "nft", name: "erc721Token", type: "ERC721Token")\n  erc721Tokens(\n    skip: Int = 0\n    first: Int = 100\n    orderBy: ERC721Token_orderBy\n    orderDirection: OrderDirection\n    where: ERC721Token_filter\n    """\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    """\n    block: Block_height\n    """\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    """\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): [ERC721Token!]! @resolver(subgraph: "nft", operation: "query erc721Tokens($skip: Int, $first: Int = 100, $orderBy: ERC721Token_orderBy, $orderDirection: OrderDirection, $where: ERC721Token_filter, $block: Block_height, $subgraphError: _SubgraphErrorPolicy_! = \\"deny\\") { erc721Tokens(skip: $skip, first: $first, orderBy: $orderBy, orderDirection: $orderDirection, where: $where, block: $block, subgraphError: $subgraphError) }") @source(subgraph: "nft", name: "erc721Tokens", type: "[ERC721Token!]!")\n  erc721Operator(\n    id: ID!\n    """\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    """\n    block: Block_height\n    """\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    """\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): ERC721Operator @resolver(subgraph: "nft", operation: "query erc721Operator($id: ID!, $block: Block_height, $subgraphError: _SubgraphErrorPolicy_! = \\"deny\\") { erc721Operator(id: $id, block: $block, subgraphError: $subgraphError) }") @source(subgraph: "nft", name: "erc721Operator", type: "ERC721Operator")\n  erc721Operators(\n    skip: Int = 0\n    first: Int = 100\n    orderBy: ERC721Operator_orderBy\n    orderDirection: OrderDirection\n    where: ERC721Operator_filter\n    """\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    """\n    block: Block_height\n    """\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    """\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): [ERC721Operator!]! @resolver(subgraph: "nft", operation: "query erc721Operators($skip: Int, $first: Int = 100, $orderBy: ERC721Operator_orderBy, $orderDirection: OrderDirection, $where: ERC721Operator_filter, $block: Block_height, $subgraphError: _SubgraphErrorPolicy_! = \\"deny\\") { erc721Operators(skip: $skip, first: $first, orderBy: $orderBy, orderDirection: $orderDirection, where: $where, block: $block, subgraphError: $subgraphError) }") @source(subgraph: "nft", name: "erc721Operators", type: "[ERC721Operator!]!")\n  erc721Transfer(\n    id: ID!\n    """\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    """\n    block: Block_height\n    """\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    """\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): ERC721Transfer @resolver(subgraph: "nft", operation: "query erc721Transfer($id: ID!, $block: Block_height, $subgraphError: _SubgraphErrorPolicy_! = \\"deny\\") { erc721Transfer(id: $id, block: $block, subgraphError: $subgraphError) }") @source(subgraph: "nft", name: "erc721Transfer", type: "ERC721Transfer")\n  erc721Transfers(\n    skip: Int = 0\n    first: Int = 100\n    orderBy: ERC721Transfer_orderBy\n    orderDirection: OrderDirection\n    where: ERC721Transfer_filter\n    """\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    """\n    block: Block_height\n    """\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    """\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): [ERC721Transfer!]! @resolver(subgraph: "nft", operation: "query erc721Transfers($skip: Int, $first: Int = 100, $orderBy: ERC721Transfer_orderBy, $orderDirection: OrderDirection, $where: ERC721Transfer_filter, $block: Block_height, $subgraphError: _SubgraphErrorPolicy_! = \\"deny\\") { erc721Transfers(skip: $skip, first: $first, orderBy: $orderBy, orderDirection: $orderDirection, where: $where, block: $block, subgraphError: $subgraphError) }") @source(subgraph: "nft", name: "erc721Transfers", type: "[ERC721Transfer!]!")\n  transaction(\n    id: ID!\n    """\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    """\n    block: Block_height\n    """\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    """\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): Transaction @resolver(subgraph: "nft", operation: "query transaction($id: ID!, $block: Block_height, $subgraphError: _SubgraphErrorPolicy_! = \\"deny\\") { transaction(id: $id, block: $block, subgraphError: $subgraphError) }") @resolver(subgraph: "uniswap", operation: "query transaction($id: ID!, $block: Block_height, $subgraphError: _SubgraphErrorPolicy_! = \\"deny\\") { transaction(id: $id, block: $block, subgraphError: $subgraphError) }") @source(subgraph: "nft", name: "transaction", type: "Transaction") @source(subgraph: "uniswap", name: "transaction", type: "Transaction")\n  transactions(\n    skip: Int = 0\n    first: Int = 100\n    orderBy: Transaction_orderBy\n    orderDirection: OrderDirection\n    where: Transaction_filter\n    """\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    """\n    block: Block_height\n    """\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    """\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): [Transaction!]! @resolver(subgraph: "nft", operation: "query transactions($skip: Int, $first: Int = 100, $orderBy: Transaction_orderBy, $orderDirection: OrderDirection, $where: Transaction_filter, $block: Block_height, $subgraphError: _SubgraphErrorPolicy_! = \\"deny\\") { transactions(skip: $skip, first: $first, orderBy: $orderBy, orderDirection: $orderDirection, where: $where, block: $block, subgraphError: $subgraphError) }") @resolver(subgraph: "uniswap", operation: "query transactions($skip: Int, $first: Int = 100, $orderBy: Transaction_orderBy, $orderDirection: OrderDirection, $where: Transaction_filter, $block: Block_height, $subgraphError: _SubgraphErrorPolicy_! = \\"deny\\") { transactions(skip: $skip, first: $first, orderBy: $orderBy, orderDirection: $orderDirection, where: $where, block: $block, subgraphError: $subgraphError) }") @source(subgraph: "nft", name: "transactions", type: "[Transaction!]!") @source(subgraph: "uniswap", name: "transactions", type: "[Transaction!]!")\n  event(\n    id: ID!\n    """\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    """\n    block: Block_height\n    """\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    """\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): Event @resolver(subgraph: "nft", operation: "query event($id: ID!, $block: Block_height, $subgraphError: _SubgraphErrorPolicy_! = \\"deny\\") { event(id: $id, block: $block, subgraphError: $subgraphError) }") @source(subgraph: "nft", name: "event", type: "Event")\n  events(\n    skip: Int = 0\n    first: Int = 100\n    orderBy: Event_orderBy\n    orderDirection: OrderDirection\n    where: Event_filter\n    """\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    """\n    block: Block_height\n    """\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    """\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): [Event!]! @resolver(subgraph: "nft", operation: "query events($skip: Int, $first: Int = 100, $orderBy: Event_orderBy, $orderDirection: OrderDirection, $where: Event_filter, $block: Block_height, $subgraphError: _SubgraphErrorPolicy_! = \\"deny\\") { events(skip: $skip, first: $first, orderBy: $orderBy, orderDirection: $orderDirection, where: $where, block: $block, subgraphError: $subgraphError) }") @source(subgraph: "nft", name: "events", type: "[Event!]!")\n  """Access to subgraph metadata"""\n  _meta(block: Block_height): _Meta_ @resolver(subgraph: "nft", operation: "query _meta($block: Block_height) { _meta(block: $block) }") @resolver(subgraph: "uniswap", operation: "query _meta($block: Block_height) { _meta(block: $block) }") @source(subgraph: "nft", name: "_meta", type: "_Meta_") @source(subgraph: "uniswap", name: "_meta", type: "_Meta_")\n  uniswapFactory(\n    id: ID!\n    """\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    """\n    block: Block_height\n    """\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    """\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): UniswapFactory @resolver(subgraph: "uniswap", operation: "query uniswapFactory($id: ID!, $block: Block_height, $subgraphError: _SubgraphErrorPolicy_! = \\"deny\\") { uniswapFactory(id: $id, block: $block, subgraphError: $subgraphError) }") @source(subgraph: "uniswap", name: "uniswapFactory", type: "UniswapFactory")\n  uniswapFactories(\n    skip: Int = 0\n    first: Int = 100\n    orderBy: UniswapFactory_orderBy\n    orderDirection: OrderDirection\n    where: UniswapFactory_filter\n    """\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    """\n    block: Block_height\n    """\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    """\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): [UniswapFactory!]! @resolver(subgraph: "uniswap", operation: "query uniswapFactories($skip: Int, $first: Int = 100, $orderBy: UniswapFactory_orderBy, $orderDirection: OrderDirection, $where: UniswapFactory_filter, $block: Block_height, $subgraphError: _SubgraphErrorPolicy_! = \\"deny\\") { uniswapFactories(skip: $skip, first: $first, orderBy: $orderBy, orderDirection: $orderDirection, where: $where, block: $block, subgraphError: $subgraphError) }") @source(subgraph: "uniswap", name: "uniswapFactories", type: "[UniswapFactory!]!")\n  token(\n    id: ID!\n    """\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    """\n    block: Block_height\n    """\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    """\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): Token @resolver(subgraph: "uniswap", operation: "query token($id: ID!, $block: Block_height, $subgraphError: _SubgraphErrorPolicy_! = \\"deny\\") { token(id: $id, block: $block, subgraphError: $subgraphError) }") @source(subgraph: "uniswap", name: "token", type: "Token")\n  tokens(\n    skip: Int = 0\n    first: Int = 100\n    orderBy: Token_orderBy\n    orderDirection: OrderDirection\n    where: Token_filter\n    """\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    """\n    block: Block_height\n    """\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    """\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): [Token!]! @resolver(subgraph: "uniswap", operation: "query tokens($skip: Int, $first: Int = 100, $orderBy: Token_orderBy, $orderDirection: OrderDirection, $where: Token_filter, $block: Block_height, $subgraphError: _SubgraphErrorPolicy_! = \\"deny\\") { tokens(skip: $skip, first: $first, orderBy: $orderBy, orderDirection: $orderDirection, where: $where, block: $block, subgraphError: $subgraphError) }") @source(subgraph: "uniswap", name: "tokens", type: "[Token!]!")\n  pair(\n    id: ID!\n    """\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    """\n    block: Block_height\n    """\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    """\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): Pair @resolver(subgraph: "uniswap", operation: "query pair($id: ID!, $block: Block_height, $subgraphError: _SubgraphErrorPolicy_! = \\"deny\\") { pair(id: $id, block: $block, subgraphError: $subgraphError) }") @source(subgraph: "uniswap", name: "pair", type: "Pair")\n  pairs(\n    skip: Int = 0\n    first: Int = 100\n    orderBy: Pair_orderBy\n    orderDirection: OrderDirection\n    where: Pair_filter\n    """\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    """\n    block: Block_height\n    """\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    """\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): [Pair!]! @resolver(subgraph: "uniswap", operation: "query pairs($skip: Int, $first: Int = 100, $orderBy: Pair_orderBy, $orderDirection: OrderDirection, $where: Pair_filter, $block: Block_height, $subgraphError: _SubgraphErrorPolicy_! = \\"deny\\") { pairs(skip: $skip, first: $first, orderBy: $orderBy, orderDirection: $orderDirection, where: $where, block: $block, subgraphError: $subgraphError) }") @source(subgraph: "uniswap", name: "pairs", type: "[Pair!]!")\n  user(\n    id: ID!\n    """\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    """\n    block: Block_height\n    """\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    """\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): User @resolver(subgraph: "uniswap", operation: "query user($id: ID!, $block: Block_height, $subgraphError: _SubgraphErrorPolicy_! = \\"deny\\") { user(id: $id, block: $block, subgraphError: $subgraphError) }") @source(subgraph: "uniswap", name: "user", type: "User")\n  users(\n    skip: Int = 0\n    first: Int = 100\n    orderBy: User_orderBy\n    orderDirection: OrderDirection\n    where: User_filter\n    """\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    """\n    block: Block_height\n    """\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    """\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): [User!]! @resolver(subgraph: "uniswap", operation: "query users($skip: Int, $first: Int = 100, $orderBy: User_orderBy, $orderDirection: OrderDirection, $where: User_filter, $block: Block_height, $subgraphError: _SubgraphErrorPolicy_! = \\"deny\\") { users(skip: $skip, first: $first, orderBy: $orderBy, orderDirection: $orderDirection, where: $where, block: $block, subgraphError: $subgraphError) }") @source(subgraph: "uniswap", name: "users", type: "[User!]!")\n  liquidityPosition(\n    id: ID!\n    """\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    """\n    block: Block_height\n    """\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    """\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): LiquidityPosition @resolver(subgraph: "uniswap", operation: "query liquidityPosition($id: ID!, $block: Block_height, $subgraphError: _SubgraphErrorPolicy_! = \\"deny\\") { liquidityPosition(id: $id, block: $block, subgraphError: $subgraphError) }") @source(subgraph: "uniswap", name: "liquidityPosition", type: "LiquidityPosition")\n  liquidityPositions(\n    skip: Int = 0\n    first: Int = 100\n    orderBy: LiquidityPosition_orderBy\n    orderDirection: OrderDirection\n    where: LiquidityPosition_filter\n    """\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    """\n    block: Block_height\n    """\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    """\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): [LiquidityPosition!]! @resolver(subgraph: "uniswap", operation: "query liquidityPositions($skip: Int, $first: Int = 100, $orderBy: LiquidityPosition_orderBy, $orderDirection: OrderDirection, $where: LiquidityPosition_filter, $block: Block_height, $subgraphError: _SubgraphErrorPolicy_! = \\"deny\\") { liquidityPositions(skip: $skip, first: $first, orderBy: $orderBy, orderDirection: $orderDirection, where: $where, block: $block, subgraphError: $subgraphError) }") @source(subgraph: "uniswap", name: "liquidityPositions", type: "[LiquidityPosition!]!")\n  liquidityPositionSnapshot(\n    id: ID!\n    """\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    """\n    block: Block_height\n    """\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    """\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): LiquidityPositionSnapshot @resolver(subgraph: "uniswap", operation: "query liquidityPositionSnapshot($id: ID!, $block: Block_height, $subgraphError: _SubgraphErrorPolicy_! = \\"deny\\") { liquidityPositionSnapshot(id: $id, block: $block, subgraphError: $subgraphError) }") @source(subgraph: "uniswap", name: "liquidityPositionSnapshot", type: "LiquidityPositionSnapshot")\n  liquidityPositionSnapshots(\n    skip: Int = 0\n    first: Int = 100\n    orderBy: LiquidityPositionSnapshot_orderBy\n    orderDirection: OrderDirection\n    where: LiquidityPositionSnapshot_filter\n    """\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    """\n    block: Block_height\n    """\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    """\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): [LiquidityPositionSnapshot!]! @resolver(subgraph: "uniswap", operation: "query liquidityPositionSnapshots($skip: Int, $first: Int = 100, $orderBy: LiquidityPositionSnapshot_orderBy, $orderDirection: OrderDirection, $where: LiquidityPositionSnapshot_filter, $block: Block_height, $subgraphError: _SubgraphErrorPolicy_! = \\"deny\\") { liquidityPositionSnapshots(skip: $skip, first: $first, orderBy: $orderBy, orderDirection: $orderDirection, where: $where, block: $block, subgraphError: $subgraphError) }") @source(subgraph: "uniswap", name: "liquidityPositionSnapshots", type: "[LiquidityPositionSnapshot!]!")\n  mint(\n    id: ID!\n    """\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    """\n    block: Block_height\n    """\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    """\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): Mint @resolver(subgraph: "uniswap", operation: "query mint($id: ID!, $block: Block_height, $subgraphError: _SubgraphErrorPolicy_! = \\"deny\\") { mint(id: $id, block: $block, subgraphError: $subgraphError) }") @source(subgraph: "uniswap", name: "mint", type: "Mint")\n  mints(\n    skip: Int = 0\n    first: Int = 100\n    orderBy: Mint_orderBy\n    orderDirection: OrderDirection\n    where: Mint_filter\n    """\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    """\n    block: Block_height\n    """\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    """\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): [Mint!]! @resolver(subgraph: "uniswap", operation: "query mints($skip: Int, $first: Int = 100, $orderBy: Mint_orderBy, $orderDirection: OrderDirection, $where: Mint_filter, $block: Block_height, $subgraphError: _SubgraphErrorPolicy_! = \\"deny\\") { mints(skip: $skip, first: $first, orderBy: $orderBy, orderDirection: $orderDirection, where: $where, block: $block, subgraphError: $subgraphError) }") @source(subgraph: "uniswap", name: "mints", type: "[Mint!]!")\n  burn(\n    id: ID!\n    """\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    """\n    block: Block_height\n    """\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    """\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): Burn @resolver(subgraph: "uniswap", operation: "query burn($id: ID!, $block: Block_height, $subgraphError: _SubgraphErrorPolicy_! = \\"deny\\") { burn(id: $id, block: $block, subgraphError: $subgraphError) }") @source(subgraph: "uniswap", name: "burn", type: "Burn")\n  burns(\n    skip: Int = 0\n    first: Int = 100\n    orderBy: Burn_orderBy\n    orderDirection: OrderDirection\n    where: Burn_filter\n    """\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    """\n    block: Block_height\n    """\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    """\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): [Burn!]! @resolver(subgraph: "uniswap", operation: "query burns($skip: Int, $first: Int = 100, $orderBy: Burn_orderBy, $orderDirection: OrderDirection, $where: Burn_filter, $block: Block_height, $subgraphError: _SubgraphErrorPolicy_! = \\"deny\\") { burns(skip: $skip, first: $first, orderBy: $orderBy, orderDirection: $orderDirection, where: $where, block: $block, subgraphError: $subgraphError) }") @source(subgraph: "uniswap", name: "burns", type: "[Burn!]!")\n  swap(\n    id: ID!\n    """\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    """\n    block: Block_height\n    """\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    """\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): Swap @resolver(subgraph: "uniswap", operation: "query swap($id: ID!, $block: Block_height, $subgraphError: _SubgraphErrorPolicy_! = \\"deny\\") { swap(id: $id, block: $block, subgraphError: $subgraphError) }") @source(subgraph: "uniswap", name: "swap", type: "Swap")\n  swaps(\n    skip: Int = 0\n    first: Int = 100\n    orderBy: Swap_orderBy\n    orderDirection: OrderDirection\n    where: Swap_filter\n    """\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    """\n    block: Block_height\n    """\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    """\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): [Swap!]! @resolver(subgraph: "uniswap", operation: "query swaps($skip: Int, $first: Int = 100, $orderBy: Swap_orderBy, $orderDirection: OrderDirection, $where: Swap_filter, $block: Block_height, $subgraphError: _SubgraphErrorPolicy_! = \\"deny\\") { swaps(skip: $skip, first: $first, orderBy: $orderBy, orderDirection: $orderDirection, where: $where, block: $block, subgraphError: $subgraphError) }") @source(subgraph: "uniswap", name: "swaps", type: "[Swap!]!")\n  bundle(\n    id: ID!\n    """\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    """\n    block: Block_height\n    """\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    """\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): Bundle @resolver(subgraph: "uniswap", operation: "query bundle($id: ID!, $block: Block_height, $subgraphError: _SubgraphErrorPolicy_! = \\"deny\\") { bundle(id: $id, block: $block, subgraphError: $subgraphError) }") @source(subgraph: "uniswap", name: "bundle", type: "Bundle")\n  bundles(\n    skip: Int = 0\n    first: Int = 100\n    orderBy: Bundle_orderBy\n    orderDirection: OrderDirection\n    where: Bundle_filter\n    """\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    """\n    block: Block_height\n    """\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    """\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): [Bundle!]! @resolver(subgraph: "uniswap", operation: "query bundles($skip: Int, $first: Int = 100, $orderBy: Bundle_orderBy, $orderDirection: OrderDirection, $where: Bundle_filter, $block: Block_height, $subgraphError: _SubgraphErrorPolicy_! = \\"deny\\") { bundles(skip: $skip, first: $first, orderBy: $orderBy, orderDirection: $orderDirection, where: $where, block: $block, subgraphError: $subgraphError) }") @source(subgraph: "uniswap", name: "bundles", type: "[Bundle!]!")\n  uniswapDayData(\n    id: ID!\n    """\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    """\n    block: Block_height\n    """\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    """\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): UniswapDayData @resolver(subgraph: "uniswap", operation: "query uniswapDayData($id: ID!, $block: Block_height, $subgraphError: _SubgraphErrorPolicy_! = \\"deny\\") { uniswapDayData(id: $id, block: $block, subgraphError: $subgraphError) }") @source(subgraph: "uniswap", name: "uniswapDayData", type: "UniswapDayData")\n  uniswapDayDatas(\n    skip: Int = 0\n    first: Int = 100\n    orderBy: UniswapDayData_orderBy\n    orderDirection: OrderDirection\n    where: UniswapDayData_filter\n    """\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    """\n    block: Block_height\n    """\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    """\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): [UniswapDayData!]! @resolver(subgraph: "uniswap", operation: "query uniswapDayDatas($skip: Int, $first: Int = 100, $orderBy: UniswapDayData_orderBy, $orderDirection: OrderDirection, $where: UniswapDayData_filter, $block: Block_height, $subgraphError: _SubgraphErrorPolicy_! = \\"deny\\") { uniswapDayDatas(skip: $skip, first: $first, orderBy: $orderBy, orderDirection: $orderDirection, where: $where, block: $block, subgraphError: $subgraphError) }") @source(subgraph: "uniswap", name: "uniswapDayDatas", type: "[UniswapDayData!]!")\n  pairHourData(\n    id: ID!\n    """\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    """\n    block: Block_height\n    """\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    """\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): PairHourData @resolver(subgraph: "uniswap", operation: "query pairHourData($id: ID!, $block: Block_height, $subgraphError: _SubgraphErrorPolicy_! = \\"deny\\") { pairHourData(id: $id, block: $block, subgraphError: $subgraphError) }") @source(subgraph: "uniswap", name: "pairHourData", type: "PairHourData")\n  pairHourDatas(\n    skip: Int = 0\n    first: Int = 100\n    orderBy: PairHourData_orderBy\n    orderDirection: OrderDirection\n    where: PairHourData_filter\n    """\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    """\n    block: Block_height\n    """\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    """\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): [PairHourData!]! @resolver(subgraph: "uniswap", operation: "query pairHourDatas($skip: Int, $first: Int = 100, $orderBy: PairHourData_orderBy, $orderDirection: OrderDirection, $where: PairHourData_filter, $block: Block_height, $subgraphError: _SubgraphErrorPolicy_! = \\"deny\\") { pairHourDatas(skip: $skip, first: $first, orderBy: $orderBy, orderDirection: $orderDirection, where: $where, block: $block, subgraphError: $subgraphError) }") @source(subgraph: "uniswap", name: "pairHourDatas", type: "[PairHourData!]!")\n  pairDayData(\n    id: ID!\n    """\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    """\n    block: Block_height\n    """\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    """\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): PairDayData @resolver(subgraph: "uniswap", operation: "query pairDayData($id: ID!, $block: Block_height, $subgraphError: _SubgraphErrorPolicy_! = \\"deny\\") { pairDayData(id: $id, block: $block, subgraphError: $subgraphError) }") @source(subgraph: "uniswap", name: "pairDayData", type: "PairDayData")\n  pairDayDatas(\n    skip: Int = 0\n    first: Int = 100\n    orderBy: PairDayData_orderBy\n    orderDirection: OrderDirection\n    where: PairDayData_filter\n    """\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    """\n    block: Block_height\n    """\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    """\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): [PairDayData!]! @resolver(subgraph: "uniswap", operation: "query pairDayDatas($skip: Int, $first: Int = 100, $orderBy: PairDayData_orderBy, $orderDirection: OrderDirection, $where: PairDayData_filter, $block: Block_height, $subgraphError: _SubgraphErrorPolicy_! = \\"deny\\") { pairDayDatas(skip: $skip, first: $first, orderBy: $orderBy, orderDirection: $orderDirection, where: $where, block: $block, subgraphError: $subgraphError) }") @source(subgraph: "uniswap", name: "pairDayDatas", type: "[PairDayData!]!")\n  tokenDayData(\n    id: ID!\n    """\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    """\n    block: Block_height\n    """\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    """\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): TokenDayData @resolver(subgraph: "uniswap", operation: "query tokenDayData($id: ID!, $block: Block_height, $subgraphError: _SubgraphErrorPolicy_! = \\"deny\\") { tokenDayData(id: $id, block: $block, subgraphError: $subgraphError) }") @source(subgraph: "uniswap", name: "tokenDayData", type: "TokenDayData")\n  tokenDayDatas(\n    skip: Int = 0\n    first: Int = 100\n    orderBy: TokenDayData_orderBy\n    orderDirection: OrderDirection\n    where: TokenDayData_filter\n    """\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    """\n    block: Block_height\n    """\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    """\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): [TokenDayData!]! @resolver(subgraph: "uniswap", operation: "query tokenDayDatas($skip: Int, $first: Int = 100, $orderBy: TokenDayData_orderBy, $orderDirection: OrderDirection, $where: TokenDayData_filter, $block: Block_height, $subgraphError: _SubgraphErrorPolicy_! = \\"deny\\") { tokenDayDatas(skip: $skip, first: $first, orderBy: $orderBy, orderDirection: $orderDirection, where: $where, block: $block, subgraphError: $subgraphError) }") @source(subgraph: "uniswap", name: "tokenDayDatas", type: "[TokenDayData!]!")\n}\n\ntype Subscription {\n  account(\n    id: ID!\n    """\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    """\n    block: Block_height\n    """\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    """\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): User @resolver(subgraph: "nft", operation: "subscription subscriptionaccount($id: ID!, $block: Block_height, $subgraphError: _SubgraphErrorPolicy_! = \\"deny\\") { account(id: $id, block: $block, subgraphError: $subgraphError) }") @source(subgraph: "nft", name: "account", type: "Account")\n  accounts(\n    skip: Int = 0\n    first: Int = 100\n    orderBy: Account_orderBy\n    orderDirection: OrderDirection\n    where: Account_filter\n    """\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    """\n    block: Block_height\n    """\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    """\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): [User!]! @resolver(subgraph: "nft", operation: "subscription subscriptionaccounts($skip: Int, $first: Int = 100, $orderBy: Account_orderBy, $orderDirection: OrderDirection, $where: Account_filter, $block: Block_height, $subgraphError: _SubgraphErrorPolicy_! = \\"deny\\") { accounts(skip: $skip, first: $first, orderBy: $orderBy, orderDirection: $orderDirection, where: $where, block: $block, subgraphError: $subgraphError) }") @source(subgraph: "nft", name: "accounts", type: "[Account!]!")\n  erc721Contract(\n    id: ID!\n    """\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    """\n    block: Block_height\n    """\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    """\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): ERC721Contract @resolver(subgraph: "nft", operation: "subscription subscriptionerc721Contract($id: ID!, $block: Block_height, $subgraphError: _SubgraphErrorPolicy_! = \\"deny\\") { erc721Contract(id: $id, block: $block, subgraphError: $subgraphError) }") @source(subgraph: "nft", name: "erc721Contract", type: "ERC721Contract")\n  erc721Contracts(\n    skip: Int = 0\n    first: Int = 100\n    orderBy: ERC721Contract_orderBy\n    orderDirection: OrderDirection\n    where: ERC721Contract_filter\n    """\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    """\n    block: Block_height\n    """\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    """\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): [ERC721Contract!]! @resolver(subgraph: "nft", operation: "subscription subscriptionerc721Contracts($skip: Int, $first: Int = 100, $orderBy: ERC721Contract_orderBy, $orderDirection: OrderDirection, $where: ERC721Contract_filter, $block: Block_height, $subgraphError: _SubgraphErrorPolicy_! = \\"deny\\") { erc721Contracts(skip: $skip, first: $first, orderBy: $orderBy, orderDirection: $orderDirection, where: $where, block: $block, subgraphError: $subgraphError) }") @source(subgraph: "nft", name: "erc721Contracts", type: "[ERC721Contract!]!")\n  erc721Token(\n    id: ID!\n    """\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    """\n    block: Block_height\n    """\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    """\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): ERC721Token @resolver(subgraph: "nft", operation: "subscription subscriptionerc721Token($id: ID!, $block: Block_height, $subgraphError: _SubgraphErrorPolicy_! = \\"deny\\") { erc721Token(id: $id, block: $block, subgraphError: $subgraphError) }") @source(subgraph: "nft", name: "erc721Token", type: "ERC721Token")\n  erc721Tokens(\n    skip: Int = 0\n    first: Int = 100\n    orderBy: ERC721Token_orderBy\n    orderDirection: OrderDirection\n    where: ERC721Token_filter\n    """\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    """\n    block: Block_height\n    """\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    """\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): [ERC721Token!]! @resolver(subgraph: "nft", operation: "subscription subscriptionerc721Tokens($skip: Int, $first: Int = 100, $orderBy: ERC721Token_orderBy, $orderDirection: OrderDirection, $where: ERC721Token_filter, $block: Block_height, $subgraphError: _SubgraphErrorPolicy_! = \\"deny\\") { erc721Tokens(skip: $skip, first: $first, orderBy: $orderBy, orderDirection: $orderDirection, where: $where, block: $block, subgraphError: $subgraphError) }") @source(subgraph: "nft", name: "erc721Tokens", type: "[ERC721Token!]!")\n  erc721Operator(\n    id: ID!\n    """\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    """\n    block: Block_height\n    """\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    """\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): ERC721Operator @resolver(subgraph: "nft", operation: "subscription subscriptionerc721Operator($id: ID!, $block: Block_height, $subgraphError: _SubgraphErrorPolicy_! = \\"deny\\") { erc721Operator(id: $id, block: $block, subgraphError: $subgraphError) }") @source(subgraph: "nft", name: "erc721Operator", type: "ERC721Operator")\n  erc721Operators(\n    skip: Int = 0\n    first: Int = 100\n    orderBy: ERC721Operator_orderBy\n    orderDirection: OrderDirection\n    where: ERC721Operator_filter\n    """\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    """\n    block: Block_height\n    """\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    """\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): [ERC721Operator!]! @resolver(subgraph: "nft", operation: "subscription subscriptionerc721Operators($skip: Int, $first: Int = 100, $orderBy: ERC721Operator_orderBy, $orderDirection: OrderDirection, $where: ERC721Operator_filter, $block: Block_height, $subgraphError: _SubgraphErrorPolicy_! = \\"deny\\") { erc721Operators(skip: $skip, first: $first, orderBy: $orderBy, orderDirection: $orderDirection, where: $where, block: $block, subgraphError: $subgraphError) }") @source(subgraph: "nft", name: "erc721Operators", type: "[ERC721Operator!]!")\n  erc721Transfer(\n    id: ID!\n    """\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    """\n    block: Block_height\n    """\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    """\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): ERC721Transfer @resolver(subgraph: "nft", operation: "subscription subscriptionerc721Transfer($id: ID!, $block: Block_height, $subgraphError: _SubgraphErrorPolicy_! = \\"deny\\") { erc721Transfer(id: $id, block: $block, subgraphError: $subgraphError) }") @source(subgraph: "nft", name: "erc721Transfer", type: "ERC721Transfer")\n  erc721Transfers(\n    skip: Int = 0\n    first: Int = 100\n    orderBy: ERC721Transfer_orderBy\n    orderDirection: OrderDirection\n    where: ERC721Transfer_filter\n    """\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    """\n    block: Block_height\n    """\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    """\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): [ERC721Transfer!]! @resolver(subgraph: "nft", operation: "subscription subscriptionerc721Transfers($skip: Int, $first: Int = 100, $orderBy: ERC721Transfer_orderBy, $orderDirection: OrderDirection, $where: ERC721Transfer_filter, $block: Block_height, $subgraphError: _SubgraphErrorPolicy_! = \\"deny\\") { erc721Transfers(skip: $skip, first: $first, orderBy: $orderBy, orderDirection: $orderDirection, where: $where, block: $block, subgraphError: $subgraphError) }") @source(subgraph: "nft", name: "erc721Transfers", type: "[ERC721Transfer!]!")\n  transaction(\n    id: ID!\n    """\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    """\n    block: Block_height\n    """\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    """\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): Transaction @resolver(subgraph: "nft", operation: "subscription subscriptiontransaction($id: ID!, $block: Block_height, $subgraphError: _SubgraphErrorPolicy_! = \\"deny\\") { transaction(id: $id, block: $block, subgraphError: $subgraphError) }") @resolver(subgraph: "uniswap", operation: "subscription subscriptiontransaction($id: ID!, $block: Block_height, $subgraphError: _SubgraphErrorPolicy_! = \\"deny\\") { transaction(id: $id, block: $block, subgraphError: $subgraphError) }") @source(subgraph: "nft", name: "transaction", type: "Transaction") @source(subgraph: "uniswap", name: "transaction", type: "Transaction")\n  transactions(\n    skip: Int = 0\n    first: Int = 100\n    orderBy: Transaction_orderBy\n    orderDirection: OrderDirection\n    where: Transaction_filter\n    """\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    """\n    block: Block_height\n    """\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    """\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): [Transaction!]! @resolver(subgraph: "nft", operation: "subscription subscriptiontransactions($skip: Int, $first: Int = 100, $orderBy: Transaction_orderBy, $orderDirection: OrderDirection, $where: Transaction_filter, $block: Block_height, $subgraphError: _SubgraphErrorPolicy_! = \\"deny\\") { transactions(skip: $skip, first: $first, orderBy: $orderBy, orderDirection: $orderDirection, where: $where, block: $block, subgraphError: $subgraphError) }") @resolver(subgraph: "uniswap", operation: "subscription subscriptiontransactions($skip: Int, $first: Int = 100, $orderBy: Transaction_orderBy, $orderDirection: OrderDirection, $where: Transaction_filter, $block: Block_height, $subgraphError: _SubgraphErrorPolicy_! = \\"deny\\") { transactions(skip: $skip, first: $first, orderBy: $orderBy, orderDirection: $orderDirection, where: $where, block: $block, subgraphError: $subgraphError) }") @source(subgraph: "nft", name: "transactions", type: "[Transaction!]!") @source(subgraph: "uniswap", name: "transactions", type: "[Transaction!]!")\n  event(\n    id: ID!\n    """\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    """\n    block: Block_height\n    """\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    """\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): Event @resolver(subgraph: "nft", operation: "subscription subscriptionevent($id: ID!, $block: Block_height, $subgraphError: _SubgraphErrorPolicy_! = \\"deny\\") { event(id: $id, block: $block, subgraphError: $subgraphError) }") @source(subgraph: "nft", name: "event", type: "Event")\n  events(\n    skip: Int = 0\n    first: Int = 100\n    orderBy: Event_orderBy\n    orderDirection: OrderDirection\n    where: Event_filter\n    """\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    """\n    block: Block_height\n    """\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    """\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): [Event!]! @resolver(subgraph: "nft", operation: "subscription subscriptionevents($skip: Int, $first: Int = 100, $orderBy: Event_orderBy, $orderDirection: OrderDirection, $where: Event_filter, $block: Block_height, $subgraphError: _SubgraphErrorPolicy_! = \\"deny\\") { events(skip: $skip, first: $first, orderBy: $orderBy, orderDirection: $orderDirection, where: $where, block: $block, subgraphError: $subgraphError) }") @source(subgraph: "nft", name: "events", type: "[Event!]!")\n  """Access to subgraph metadata"""\n  _meta(block: Block_height): _Meta_ @resolver(subgraph: "nft", operation: "subscription subscription_meta($block: Block_height) { _meta(block: $block) }") @resolver(subgraph: "uniswap", operation: "subscription subscription_meta($block: Block_height) { _meta(block: $block) }") @source(subgraph: "nft", name: "_meta", type: "_Meta_") @source(subgraph: "uniswap", name: "_meta", type: "_Meta_")\n  uniswapFactory(\n    id: ID!\n    """\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    """\n    block: Block_height\n    """\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    """\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): UniswapFactory @resolver(subgraph: "uniswap", operation: "subscription subscriptionuniswapFactory($id: ID!, $block: Block_height, $subgraphError: _SubgraphErrorPolicy_! = \\"deny\\") { uniswapFactory(id: $id, block: $block, subgraphError: $subgraphError) }") @source(subgraph: "uniswap", name: "uniswapFactory", type: "UniswapFactory")\n  uniswapFactories(\n    skip: Int = 0\n    first: Int = 100\n    orderBy: UniswapFactory_orderBy\n    orderDirection: OrderDirection\n    where: UniswapFactory_filter\n    """\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    """\n    block: Block_height\n    """\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    """\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): [UniswapFactory!]! @resolver(subgraph: "uniswap", operation: "subscription subscriptionuniswapFactories($skip: Int, $first: Int = 100, $orderBy: UniswapFactory_orderBy, $orderDirection: OrderDirection, $where: UniswapFactory_filter, $block: Block_height, $subgraphError: _SubgraphErrorPolicy_! = \\"deny\\") { uniswapFactories(skip: $skip, first: $first, orderBy: $orderBy, orderDirection: $orderDirection, where: $where, block: $block, subgraphError: $subgraphError) }") @source(subgraph: "uniswap", name: "uniswapFactories", type: "[UniswapFactory!]!")\n  token(\n    id: ID!\n    """\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    """\n    block: Block_height\n    """\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    """\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): Token @resolver(subgraph: "uniswap", operation: "subscription subscriptiontoken($id: ID!, $block: Block_height, $subgraphError: _SubgraphErrorPolicy_! = \\"deny\\") { token(id: $id, block: $block, subgraphError: $subgraphError) }") @source(subgraph: "uniswap", name: "token", type: "Token")\n  tokens(\n    skip: Int = 0\n    first: Int = 100\n    orderBy: Token_orderBy\n    orderDirection: OrderDirection\n    where: Token_filter\n    """\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    """\n    block: Block_height\n    """\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    """\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): [Token!]! @resolver(subgraph: "uniswap", operation: "subscription subscriptiontokens($skip: Int, $first: Int = 100, $orderBy: Token_orderBy, $orderDirection: OrderDirection, $where: Token_filter, $block: Block_height, $subgraphError: _SubgraphErrorPolicy_! = \\"deny\\") { tokens(skip: $skip, first: $first, orderBy: $orderBy, orderDirection: $orderDirection, where: $where, block: $block, subgraphError: $subgraphError) }") @source(subgraph: "uniswap", name: "tokens", type: "[Token!]!")\n  pair(\n    id: ID!\n    """\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    """\n    block: Block_height\n    """\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    """\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): Pair @resolver(subgraph: "uniswap", operation: "subscription subscriptionpair($id: ID!, $block: Block_height, $subgraphError: _SubgraphErrorPolicy_! = \\"deny\\") { pair(id: $id, block: $block, subgraphError: $subgraphError) }") @source(subgraph: "uniswap", name: "pair", type: "Pair")\n  pairs(\n    skip: Int = 0\n    first: Int = 100\n    orderBy: Pair_orderBy\n    orderDirection: OrderDirection\n    where: Pair_filter\n    """\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    """\n    block: Block_height\n    """\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    """\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): [Pair!]! @resolver(subgraph: "uniswap", operation: "subscription subscriptionpairs($skip: Int, $first: Int = 100, $orderBy: Pair_orderBy, $orderDirection: OrderDirection, $where: Pair_filter, $block: Block_height, $subgraphError: _SubgraphErrorPolicy_! = \\"deny\\") { pairs(skip: $skip, first: $first, orderBy: $orderBy, orderDirection: $orderDirection, where: $where, block: $block, subgraphError: $subgraphError) }") @source(subgraph: "uniswap", name: "pairs", type: "[Pair!]!")\n  user(\n    id: ID!\n    """\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    """\n    block: Block_height\n    """\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    """\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): User @resolver(subgraph: "uniswap", operation: "subscription subscriptionuser($id: ID!, $block: Block_height, $subgraphError: _SubgraphErrorPolicy_! = \\"deny\\") { user(id: $id, block: $block, subgraphError: $subgraphError) }") @source(subgraph: "uniswap", name: "user", type: "User")\n  users(\n    skip: Int = 0\n    first: Int = 100\n    orderBy: User_orderBy\n    orderDirection: OrderDirection\n    where: User_filter\n    """\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    """\n    block: Block_height\n    """\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    """\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): [User!]! @resolver(subgraph: "uniswap", operation: "subscription subscriptionusers($skip: Int, $first: Int = 100, $orderBy: User_orderBy, $orderDirection: OrderDirection, $where: User_filter, $block: Block_height, $subgraphError: _SubgraphErrorPolicy_! = \\"deny\\") { users(skip: $skip, first: $first, orderBy: $orderBy, orderDirection: $orderDirection, where: $where, block: $block, subgraphError: $subgraphError) }") @source(subgraph: "uniswap", name: "users", type: "[User!]!")\n  liquidityPosition(\n    id: ID!\n    """\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    """\n    block: Block_height\n    """\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    """\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): LiquidityPosition @resolver(subgraph: "uniswap", operation: "subscription subscriptionliquidityPosition($id: ID!, $block: Block_height, $subgraphError: _SubgraphErrorPolicy_! = \\"deny\\") { liquidityPosition(id: $id, block: $block, subgraphError: $subgraphError) }") @source(subgraph: "uniswap", name: "liquidityPosition", type: "LiquidityPosition")\n  liquidityPositions(\n    skip: Int = 0\n    first: Int = 100\n    orderBy: LiquidityPosition_orderBy\n    orderDirection: OrderDirection\n    where: LiquidityPosition_filter\n    """\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    """\n    block: Block_height\n    """\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    """\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): [LiquidityPosition!]! @resolver(subgraph: "uniswap", operation: "subscription subscriptionliquidityPositions($skip: Int, $first: Int = 100, $orderBy: LiquidityPosition_orderBy, $orderDirection: OrderDirection, $where: LiquidityPosition_filter, $block: Block_height, $subgraphError: _SubgraphErrorPolicy_! = \\"deny\\") { liquidityPositions(skip: $skip, first: $first, orderBy: $orderBy, orderDirection: $orderDirection, where: $where, block: $block, subgraphError: $subgraphError) }") @source(subgraph: "uniswap", name: "liquidityPositions", type: "[LiquidityPosition!]!")\n  liquidityPositionSnapshot(\n    id: ID!\n    """\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    """\n    block: Block_height\n    """\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    """\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): LiquidityPositionSnapshot @resolver(subgraph: "uniswap", operation: "subscription subscriptionliquidityPositionSnapshot($id: ID!, $block: Block_height, $subgraphError: _SubgraphErrorPolicy_! = \\"deny\\") { liquidityPositionSnapshot(id: $id, block: $block, subgraphError: $subgraphError) }") @source(subgraph: "uniswap", name: "liquidityPositionSnapshot", type: "LiquidityPositionSnapshot")\n  liquidityPositionSnapshots(\n    skip: Int = 0\n    first: Int = 100\n    orderBy: LiquidityPositionSnapshot_orderBy\n    orderDirection: OrderDirection\n    where: LiquidityPositionSnapshot_filter\n    """\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    """\n    block: Block_height\n    """\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    """\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): [LiquidityPositionSnapshot!]! @resolver(subgraph: "uniswap", operation: "subscription subscriptionliquidityPositionSnapshots($skip: Int, $first: Int = 100, $orderBy: LiquidityPositionSnapshot_orderBy, $orderDirection: OrderDirection, $where: LiquidityPositionSnapshot_filter, $block: Block_height, $subgraphError: _SubgraphErrorPolicy_! = \\"deny\\") { liquidityPositionSnapshots(skip: $skip, first: $first, orderBy: $orderBy, orderDirection: $orderDirection, where: $where, block: $block, subgraphError: $subgraphError) }") @source(subgraph: "uniswap", name: "liquidityPositionSnapshots", type: "[LiquidityPositionSnapshot!]!")\n  mint(\n    id: ID!\n    """\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    """\n    block: Block_height\n    """\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    """\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): Mint @resolver(subgraph: "uniswap", operation: "subscription subscriptionmint($id: ID!, $block: Block_height, $subgraphError: _SubgraphErrorPolicy_! = \\"deny\\") { mint(id: $id, block: $block, subgraphError: $subgraphError) }") @source(subgraph: "uniswap", name: "mint", type: "Mint")\n  mints(\n    skip: Int = 0\n    first: Int = 100\n    orderBy: Mint_orderBy\n    orderDirection: OrderDirection\n    where: Mint_filter\n    """\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    """\n    block: Block_height\n    """\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    """\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): [Mint!]! @resolver(subgraph: "uniswap", operation: "subscription subscriptionmints($skip: Int, $first: Int = 100, $orderBy: Mint_orderBy, $orderDirection: OrderDirection, $where: Mint_filter, $block: Block_height, $subgraphError: _SubgraphErrorPolicy_! = \\"deny\\") { mints(skip: $skip, first: $first, orderBy: $orderBy, orderDirection: $orderDirection, where: $where, block: $block, subgraphError: $subgraphError) }") @source(subgraph: "uniswap", name: "mints", type: "[Mint!]!")\n  burn(\n    id: ID!\n    """\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    """\n    block: Block_height\n    """\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    """\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): Burn @resolver(subgraph: "uniswap", operation: "subscription subscriptionburn($id: ID!, $block: Block_height, $subgraphError: _SubgraphErrorPolicy_! = \\"deny\\") { burn(id: $id, block: $block, subgraphError: $subgraphError) }") @source(subgraph: "uniswap", name: "burn", type: "Burn")\n  burns(\n    skip: Int = 0\n    first: Int = 100\n    orderBy: Burn_orderBy\n    orderDirection: OrderDirection\n    where: Burn_filter\n    """\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    """\n    block: Block_height\n    """\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    """\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): [Burn!]! @resolver(subgraph: "uniswap", operation: "subscription subscriptionburns($skip: Int, $first: Int = 100, $orderBy: Burn_orderBy, $orderDirection: OrderDirection, $where: Burn_filter, $block: Block_height, $subgraphError: _SubgraphErrorPolicy_! = \\"deny\\") { burns(skip: $skip, first: $first, orderBy: $orderBy, orderDirection: $orderDirection, where: $where, block: $block, subgraphError: $subgraphError) }") @source(subgraph: "uniswap", name: "burns", type: "[Burn!]!")\n  swap(\n    id: ID!\n    """\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    """\n    block: Block_height\n    """\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    """\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): Swap @resolver(subgraph: "uniswap", operation: "subscription subscriptionswap($id: ID!, $block: Block_height, $subgraphError: _SubgraphErrorPolicy_! = \\"deny\\") { swap(id: $id, block: $block, subgraphError: $subgraphError) }") @source(subgraph: "uniswap", name: "swap", type: "Swap")\n  swaps(\n    skip: Int = 0\n    first: Int = 100\n    orderBy: Swap_orderBy\n    orderDirection: OrderDirection\n    where: Swap_filter\n    """\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    """\n    block: Block_height\n    """\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    """\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): [Swap!]! @resolver(subgraph: "uniswap", operation: "subscription subscriptionswaps($skip: Int, $first: Int = 100, $orderBy: Swap_orderBy, $orderDirection: OrderDirection, $where: Swap_filter, $block: Block_height, $subgraphError: _SubgraphErrorPolicy_! = \\"deny\\") { swaps(skip: $skip, first: $first, orderBy: $orderBy, orderDirection: $orderDirection, where: $where, block: $block, subgraphError: $subgraphError) }") @source(subgraph: "uniswap", name: "swaps", type: "[Swap!]!")\n  bundle(\n    id: ID!\n    """\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    """\n    block: Block_height\n    """\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    """\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): Bundle @resolver(subgraph: "uniswap", operation: "subscription subscriptionbundle($id: ID!, $block: Block_height, $subgraphError: _SubgraphErrorPolicy_! = \\"deny\\") { bundle(id: $id, block: $block, subgraphError: $subgraphError) }") @source(subgraph: "uniswap", name: "bundle", type: "Bundle")\n  bundles(\n    skip: Int = 0\n    first: Int = 100\n    orderBy: Bundle_orderBy\n    orderDirection: OrderDirection\n    where: Bundle_filter\n    """\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    """\n    block: Block_height\n    """\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    """\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): [Bundle!]! @resolver(subgraph: "uniswap", operation: "subscription subscriptionbundles($skip: Int, $first: Int = 100, $orderBy: Bundle_orderBy, $orderDirection: OrderDirection, $where: Bundle_filter, $block: Block_height, $subgraphError: _SubgraphErrorPolicy_! = \\"deny\\") { bundles(skip: $skip, first: $first, orderBy: $orderBy, orderDirection: $orderDirection, where: $where, block: $block, subgraphError: $subgraphError) }") @source(subgraph: "uniswap", name: "bundles", type: "[Bundle!]!")\n  uniswapDayData(\n    id: ID!\n    """\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    """\n    block: Block_height\n    """\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    """\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): UniswapDayData @resolver(subgraph: "uniswap", operation: "subscription subscriptionuniswapDayData($id: ID!, $block: Block_height, $subgraphError: _SubgraphErrorPolicy_! = \\"deny\\") { uniswapDayData(id: $id, block: $block, subgraphError: $subgraphError) }") @source(subgraph: "uniswap", name: "uniswapDayData", type: "UniswapDayData")\n  uniswapDayDatas(\n    skip: Int = 0\n    first: Int = 100\n    orderBy: UniswapDayData_orderBy\n    orderDirection: OrderDirection\n    where: UniswapDayData_filter\n    """\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    """\n    block: Block_height\n    """\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    """\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): [UniswapDayData!]! @resolver(subgraph: "uniswap", operation: "subscription subscriptionuniswapDayDatas($skip: Int, $first: Int = 100, $orderBy: UniswapDayData_orderBy, $orderDirection: OrderDirection, $where: UniswapDayData_filter, $block: Block_height, $subgraphError: _SubgraphErrorPolicy_! = \\"deny\\") { uniswapDayDatas(skip: $skip, first: $first, orderBy: $orderBy, orderDirection: $orderDirection, where: $where, block: $block, subgraphError: $subgraphError) }") @source(subgraph: "uniswap", name: "uniswapDayDatas", type: "[UniswapDayData!]!")\n  pairHourData(\n    id: ID!\n    """\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    """\n    block: Block_height\n    """\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    """\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): PairHourData @resolver(subgraph: "uniswap", operation: "subscription subscriptionpairHourData($id: ID!, $block: Block_height, $subgraphError: _SubgraphErrorPolicy_! = \\"deny\\") { pairHourData(id: $id, block: $block, subgraphError: $subgraphError) }") @source(subgraph: "uniswap", name: "pairHourData", type: "PairHourData")\n  pairHourDatas(\n    skip: Int = 0\n    first: Int = 100\n    orderBy: PairHourData_orderBy\n    orderDirection: OrderDirection\n    where: PairHourData_filter\n    """\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    """\n    block: Block_height\n    """\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    """\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): [PairHourData!]! @resolver(subgraph: "uniswap", operation: "subscription subscriptionpairHourDatas($skip: Int, $first: Int = 100, $orderBy: PairHourData_orderBy, $orderDirection: OrderDirection, $where: PairHourData_filter, $block: Block_height, $subgraphError: _SubgraphErrorPolicy_! = \\"deny\\") { pairHourDatas(skip: $skip, first: $first, orderBy: $orderBy, orderDirection: $orderDirection, where: $where, block: $block, subgraphError: $subgraphError) }") @source(subgraph: "uniswap", name: "pairHourDatas", type: "[PairHourData!]!")\n  pairDayData(\n    id: ID!\n    """\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    """\n    block: Block_height\n    """\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    """\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): PairDayData @resolver(subgraph: "uniswap", operation: "subscription subscriptionpairDayData($id: ID!, $block: Block_height, $subgraphError: _SubgraphErrorPolicy_! = \\"deny\\") { pairDayData(id: $id, block: $block, subgraphError: $subgraphError) }") @source(subgraph: "uniswap", name: "pairDayData", type: "PairDayData")\n  pairDayDatas(\n    skip: Int = 0\n    first: Int = 100\n    orderBy: PairDayData_orderBy\n    orderDirection: OrderDirection\n    where: PairDayData_filter\n    """\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    """\n    block: Block_height\n    """\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    """\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): [PairDayData!]! @resolver(subgraph: "uniswap", operation: "subscription subscriptionpairDayDatas($skip: Int, $first: Int = 100, $orderBy: PairDayData_orderBy, $orderDirection: OrderDirection, $where: PairDayData_filter, $block: Block_height, $subgraphError: _SubgraphErrorPolicy_! = \\"deny\\") { pairDayDatas(skip: $skip, first: $first, orderBy: $orderBy, orderDirection: $orderDirection, where: $where, block: $block, subgraphError: $subgraphError) }") @source(subgraph: "uniswap", name: "pairDayDatas", type: "[PairDayData!]!")\n  tokenDayData(\n    id: ID!\n    """\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    """\n    block: Block_height\n    """\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    """\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): TokenDayData @resolver(subgraph: "uniswap", operation: "subscription subscriptiontokenDayData($id: ID!, $block: Block_height, $subgraphError: _SubgraphErrorPolicy_! = \\"deny\\") { tokenDayData(id: $id, block: $block, subgraphError: $subgraphError) }") @source(subgraph: "uniswap", name: "tokenDayData", type: "TokenDayData")\n  tokenDayDatas(\n    skip: Int = 0\n    first: Int = 100\n    orderBy: TokenDayData_orderBy\n    orderDirection: OrderDirection\n    where: TokenDayData_filter\n    """\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    """\n    block: Block_height\n    """\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    """\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): [TokenDayData!]! @resolver(subgraph: "uniswap", operation: "subscription subscriptiontokenDayDatas($skip: Int, $first: Int = 100, $orderBy: TokenDayData_orderBy, $orderDirection: OrderDirection, $where: TokenDayData_filter, $block: Block_height, $subgraphError: _SubgraphErrorPolicy_! = \\"deny\\") { tokenDayDatas(skip: $skip, first: $first, orderBy: $orderBy, orderDirection: $orderDirection, where: $where, block: $block, subgraphError: $subgraphError) }") @source(subgraph: "uniswap", name: "tokenDayDatas", type: "[TokenDayData!]!")\n}\n\ntype Transaction @source(subgraph: "nft", name: "Transaction") @source(subgraph: "uniswap", name: "Transaction") @resolver(subgraph: "nft", operation: "query TransactionById($Transaction_id: ID!) { transaction(id: $Transaction_id) }", kind: "FETCH") @resolver(subgraph: "nft", operation: "query GetTransactionById($Transaction_id: ID!) { transactions(where: { id: $Transaction_id) } }", kind: "FETCH") @resolver(subgraph: "nft", operation: "query GetTransactionsByIds($Transaction_id: [ID!]!) { transactions(where: { id_in: $Transaction_id }) }", kind: "BATCH") @resolver(subgraph: "nft", operation: "query TransactionById($Transaction_id: ID!) { transaction(id: $Transaction_id) }", kind: "FETCH") @resolver(subgraph: "nft", operation: "query GetTransactionById($Transaction_id: ID!) { transactions(where: { id: $Transaction_id) } }", kind: "FETCH") @resolver(subgraph: "nft", operation: "query GetTransactionsByIds($Transaction_id: [ID!]!) { transactions(where: { id_in: $Transaction_id }) }", kind: "BATCH") @resolver(subgraph: "uniswap", operation: "query TransactionById($Transaction_id: ID!) { transaction(id: $Transaction_id) }", kind: "FETCH") @resolver(subgraph: "uniswap", operation: "query GetTransactionById($Transaction_id: ID!) { transactions(where: { id: $Transaction_id) } }", kind: "FETCH") @resolver(subgraph: "uniswap", operation: "query GetTransactionsByIds($Transaction_id: [ID!]!) { transactions(where: { id_in: $Transaction_id }) }", kind: "BATCH") @variable(subgraph: "nft", name: "Transaction_id", select: "id") @variable(subgraph: "uniswap", name: "Transaction_id", select: "id") @variable(subgraph: "nft", name: "Transaction_id", select: "id") @variable(subgraph: "uniswap", name: "Transaction_id", select: "id") {\n  id: ID! @source(subgraph: "nft", name: "id", type: "ID!") @source(subgraph: "uniswap", name: "id", type: "ID!")\n  timestamp: BigInt! @source(subgraph: "nft", name: "timestamp", type: "BigInt!") @source(subgraph: "uniswap", name: "timestamp", type: "BigInt!")\n  blockNumber: BigInt! @source(subgraph: "nft", name: "blockNumber", type: "BigInt!") @source(subgraph: "uniswap", name: "blockNumber", type: "BigInt!")\n  events(skip: Int = 0, first: Int = 100, orderBy: Event_orderBy, orderDirection: OrderDirection, where: Event_filter): [Event!]! @source(subgraph: "nft", name: "events", type: "[Event!]!")\n  mints(skip: Int = 0, first: Int = 100, orderBy: Mint_orderBy, orderDirection: OrderDirection, where: Mint_filter): [Mint]! @source(subgraph: "uniswap", name: "mints", type: "[Mint]!")\n  burns(skip: Int = 0, first: Int = 100, orderBy: Burn_orderBy, orderDirection: OrderDirection, where: Burn_filter): [Burn]! @source(subgraph: "uniswap", name: "burns", type: "[Burn]!")\n  swaps(skip: Int = 0, first: Int = 100, orderBy: Swap_orderBy, orderDirection: OrderDirection, where: Swap_filter): [Swap]! @source(subgraph: "uniswap", name: "swaps", type: "[Swap]!")\n}\n\ninput Transaction_filter @source(subgraph: "nft", name: "Transaction_filter") @source(subgraph: "uniswap", name: "Transaction_filter") {\n  id: ID @source(subgraph: "nft", name: "id", type: "ID") @source(subgraph: "uniswap", name: "id", type: "ID")\n  id_not: ID @source(subgraph: "nft", name: "id_not", type: "ID") @source(subgraph: "uniswap", name: "id_not", type: "ID")\n  id_gt: ID @source(subgraph: "nft", name: "id_gt", type: "ID") @source(subgraph: "uniswap", name: "id_gt", type: "ID")\n  id_lt: ID @source(subgraph: "nft", name: "id_lt", type: "ID") @source(subgraph: "uniswap", name: "id_lt", type: "ID")\n  id_gte: ID @source(subgraph: "nft", name: "id_gte", type: "ID") @source(subgraph: "uniswap", name: "id_gte", type: "ID")\n  id_lte: ID @source(subgraph: "nft", name: "id_lte", type: "ID") @source(subgraph: "uniswap", name: "id_lte", type: "ID")\n  id_in: [ID!] @source(subgraph: "nft", name: "id_in", type: "[ID!]") @source(subgraph: "uniswap", name: "id_in", type: "[ID!]")\n  id_not_in: [ID!] @source(subgraph: "nft", name: "id_not_in", type: "[ID!]") @source(subgraph: "uniswap", name: "id_not_in", type: "[ID!]")\n  timestamp: BigInt @source(subgraph: "nft", name: "timestamp", type: "BigInt") @source(subgraph: "uniswap", name: "timestamp", type: "BigInt")\n  timestamp_not: BigInt @source(subgraph: "nft", name: "timestamp_not", type: "BigInt") @source(subgraph: "uniswap", name: "timestamp_not", type: "BigInt")\n  timestamp_gt: BigInt @source(subgraph: "nft", name: "timestamp_gt", type: "BigInt") @source(subgraph: "uniswap", name: "timestamp_gt", type: "BigInt")\n  timestamp_lt: BigInt @source(subgraph: "nft", name: "timestamp_lt", type: "BigInt") @source(subgraph: "uniswap", name: "timestamp_lt", type: "BigInt")\n  timestamp_gte: BigInt @source(subgraph: "nft", name: "timestamp_gte", type: "BigInt") @source(subgraph: "uniswap", name: "timestamp_gte", type: "BigInt")\n  timestamp_lte: BigInt @source(subgraph: "nft", name: "timestamp_lte", type: "BigInt") @source(subgraph: "uniswap", name: "timestamp_lte", type: "BigInt")\n  timestamp_in: [BigInt!] @source(subgraph: "nft", name: "timestamp_in", type: "[BigInt!]") @source(subgraph: "uniswap", name: "timestamp_in", type: "[BigInt!]")\n  timestamp_not_in: [BigInt!] @source(subgraph: "nft", name: "timestamp_not_in", type: "[BigInt!]") @source(subgraph: "uniswap", name: "timestamp_not_in", type: "[BigInt!]")\n  blockNumber: BigInt @source(subgraph: "nft", name: "blockNumber", type: "BigInt") @source(subgraph: "uniswap", name: "blockNumber", type: "BigInt")\n  blockNumber_not: BigInt @source(subgraph: "nft", name: "blockNumber_not", type: "BigInt") @source(subgraph: "uniswap", name: "blockNumber_not", type: "BigInt")\n  blockNumber_gt: BigInt @source(subgraph: "nft", name: "blockNumber_gt", type: "BigInt") @source(subgraph: "uniswap", name: "blockNumber_gt", type: "BigInt")\n  blockNumber_lt: BigInt @source(subgraph: "nft", name: "blockNumber_lt", type: "BigInt") @source(subgraph: "uniswap", name: "blockNumber_lt", type: "BigInt")\n  blockNumber_gte: BigInt @source(subgraph: "nft", name: "blockNumber_gte", type: "BigInt") @source(subgraph: "uniswap", name: "blockNumber_gte", type: "BigInt")\n  blockNumber_lte: BigInt @source(subgraph: "nft", name: "blockNumber_lte", type: "BigInt") @source(subgraph: "uniswap", name: "blockNumber_lte", type: "BigInt")\n  blockNumber_in: [BigInt!] @source(subgraph: "nft", name: "blockNumber_in", type: "[BigInt!]") @source(subgraph: "uniswap", name: "blockNumber_in", type: "[BigInt!]")\n  blockNumber_not_in: [BigInt!] @source(subgraph: "nft", name: "blockNumber_not_in", type: "[BigInt!]") @source(subgraph: "uniswap", name: "blockNumber_not_in", type: "[BigInt!]")\n  events_: Event_filter @source(subgraph: "nft", name: "events_", type: "Event_filter")\n  """Filter for the block changed event."""\n  _change_block: BlockChangedFilter @source(subgraph: "nft", name: "_change_block", type: "BlockChangedFilter") @source(subgraph: "uniswap", name: "_change_block", type: "BlockChangedFilter")\n  and: [Transaction_filter] @source(subgraph: "nft", name: "and", type: "[Transaction_filter]") @source(subgraph: "uniswap", name: "and", type: "[Transaction_filter]")\n  or: [Transaction_filter] @source(subgraph: "nft", name: "or", type: "[Transaction_filter]") @source(subgraph: "uniswap", name: "or", type: "[Transaction_filter]")\n  mints: [String!] @source(subgraph: "uniswap", name: "mints", type: "[String!]")\n  mints_not: [String!] @source(subgraph: "uniswap", name: "mints_not", type: "[String!]")\n  mints_contains: [String!] @source(subgraph: "uniswap", name: "mints_contains", type: "[String!]")\n  mints_contains_nocase: [String!] @source(subgraph: "uniswap", name: "mints_contains_nocase", type: "[String!]")\n  mints_not_contains: [String!] @source(subgraph: "uniswap", name: "mints_not_contains", type: "[String!]")\n  mints_not_contains_nocase: [String!] @source(subgraph: "uniswap", name: "mints_not_contains_nocase", type: "[String!]")\n  mints_: Mint_filter @source(subgraph: "uniswap", name: "mints_", type: "Mint_filter")\n  burns: [String!] @source(subgraph: "uniswap", name: "burns", type: "[String!]")\n  burns_not: [String!] @source(subgraph: "uniswap", name: "burns_not", type: "[String!]")\n  burns_contains: [String!] @source(subgraph: "uniswap", name: "burns_contains", type: "[String!]")\n  burns_contains_nocase: [String!] @source(subgraph: "uniswap", name: "burns_contains_nocase", type: "[String!]")\n  burns_not_contains: [String!] @source(subgraph: "uniswap", name: "burns_not_contains", type: "[String!]")\n  burns_not_contains_nocase: [String!] @source(subgraph: "uniswap", name: "burns_not_contains_nocase", type: "[String!]")\n  burns_: Burn_filter @source(subgraph: "uniswap", name: "burns_", type: "Burn_filter")\n  swaps: [String!] @source(subgraph: "uniswap", name: "swaps", type: "[String!]")\n  swaps_not: [String!] @source(subgraph: "uniswap", name: "swaps_not", type: "[String!]")\n  swaps_contains: [String!] @source(subgraph: "uniswap", name: "swaps_contains", type: "[String!]")\n  swaps_contains_nocase: [String!] @source(subgraph: "uniswap", name: "swaps_contains_nocase", type: "[String!]")\n  swaps_not_contains: [String!] @source(subgraph: "uniswap", name: "swaps_not_contains", type: "[String!]")\n  swaps_not_contains_nocase: [String!] @source(subgraph: "uniswap", name: "swaps_not_contains_nocase", type: "[String!]")\n  swaps_: Swap_filter @source(subgraph: "uniswap", name: "swaps_", type: "Swap_filter")\n}\n\nenum Transaction_orderBy @source(subgraph: "nft", name: "Transaction_orderBy") @source(subgraph: "uniswap", name: "Transaction_orderBy") {\n  id @source(subgraph: "nft", name: "id") @source(subgraph: "uniswap", name: "id")\n  blockNumber @source(subgraph: "nft", name: "blockNumber") @source(subgraph: "uniswap", name: "blockNumber")\n  timestamp @source(subgraph: "nft", name: "timestamp") @source(subgraph: "uniswap", name: "timestamp")\n  mints @source(subgraph: "uniswap", name: "mints")\n  burns @source(subgraph: "uniswap", name: "burns")\n  swaps @source(subgraph: "uniswap", name: "swaps")\n  events @source(subgraph: "nft", name: "events")\n}\n\ntype _Block_ @source(subgraph: "nft", name: "_Block_") @source(subgraph: "uniswap", name: "_Block_") {\n  """The hash of the block"""\n  hash: Bytes @source(subgraph: "nft", name: "hash", type: "Bytes") @source(subgraph: "uniswap", name: "hash", type: "Bytes")\n  """The block number"""\n  number: Int! @source(subgraph: "nft", name: "number", type: "Int!") @source(subgraph: "uniswap", name: "number", type: "Int!")\n  """Integer representation of the timestamp stored in blocks for the chain"""\n  timestamp: Int @source(subgraph: "nft", name: "timestamp", type: "Int") @source(subgraph: "uniswap", name: "timestamp", type: "Int")\n  """The hash of the parent block"""\n  parentHash: Bytes @source(subgraph: "nft", name: "parentHash", type: "Bytes") @source(subgraph: "uniswap", name: "parentHash", type: "Bytes")\n}\n\n"""The type for the top-level _meta field"""\ntype _Meta_ @source(subgraph: "nft", name: "_Meta_") @source(subgraph: "uniswap", name: "_Meta_") {\n  """\n  Information about a specific subgraph block. The hash of the block\n  will be null if the _meta field has a block constraint that asks for\n  a block number. It will be filled if the _meta field has no block constraint\n  and therefore asks for the latest  block\n  \n  """\n  block: _Block_! @source(subgraph: "nft", name: "block", type: "_Block_!") @source(subgraph: "uniswap", name: "block", type: "_Block_!")\n  """The deployment ID"""\n  deployment: String! @source(subgraph: "nft", name: "deployment", type: "String!") @source(subgraph: "uniswap", name: "deployment", type: "String!")\n  """If `true`, the subgraph encountered indexing errors at some past block"""\n  hasIndexingErrors: Boolean! @source(subgraph: "nft", name: "hasIndexingErrors", type: "Boolean!") @source(subgraph: "uniswap", name: "hasIndexingErrors", type: "Boolean!")\n}\n\nenum _SubgraphErrorPolicy_ @source(subgraph: "nft", name: "_SubgraphErrorPolicy_") @source(subgraph: "uniswap", name: "_SubgraphErrorPolicy_") {\n  """Data will be returned even if the subgraph has indexing errors"""\n  allow @source(subgraph: "nft", name: "allow") @source(subgraph: "uniswap", name: "allow")\n  """\n  If the subgraph has indexing errors, data will be omitted. The default.\n  """\n  deny @source(subgraph: "nft", name: "deny") @source(subgraph: "uniswap", name: "deny")\n}\n\ntype Bundle @source(subgraph: "uniswap", name: "Bundle") @resolver(subgraph: "uniswap", operation: "query BundleById($Bundle_id: ID!) { bundle(id: $Bundle_id) }", kind: "FETCH") @resolver(subgraph: "uniswap", operation: "query GetBundleById($Bundle_id: ID!) { bundles(where: { id: $Bundle_id) } }", kind: "FETCH") @resolver(subgraph: "uniswap", operation: "query GetBundlesByIds($Bundle_id: [ID!]!) { bundles(where: { id_in: $Bundle_id }) }", kind: "BATCH") @variable(subgraph: "uniswap", name: "Bundle_id", select: "id") {\n  id: ID! @source(subgraph: "uniswap", name: "id", type: "ID!")\n  ethPrice: BigDecimal! @source(subgraph: "uniswap", name: "ethPrice", type: "BigDecimal!")\n}\n\ninput Bundle_filter @source(subgraph: "uniswap", name: "Bundle_filter") {\n  id: ID @source(subgraph: "uniswap", name: "id", type: "ID")\n  id_not: ID @source(subgraph: "uniswap", name: "id_not", type: "ID")\n  id_gt: ID @source(subgraph: "uniswap", name: "id_gt", type: "ID")\n  id_lt: ID @source(subgraph: "uniswap", name: "id_lt", type: "ID")\n  id_gte: ID @source(subgraph: "uniswap", name: "id_gte", type: "ID")\n  id_lte: ID @source(subgraph: "uniswap", name: "id_lte", type: "ID")\n  id_in: [ID!] @source(subgraph: "uniswap", name: "id_in", type: "[ID!]")\n  id_not_in: [ID!] @source(subgraph: "uniswap", name: "id_not_in", type: "[ID!]")\n  ethPrice: BigDecimal @source(subgraph: "uniswap", name: "ethPrice", type: "BigDecimal")\n  ethPrice_not: BigDecimal @source(subgraph: "uniswap", name: "ethPrice_not", type: "BigDecimal")\n  ethPrice_gt: BigDecimal @source(subgraph: "uniswap", name: "ethPrice_gt", type: "BigDecimal")\n  ethPrice_lt: BigDecimal @source(subgraph: "uniswap", name: "ethPrice_lt", type: "BigDecimal")\n  ethPrice_gte: BigDecimal @source(subgraph: "uniswap", name: "ethPrice_gte", type: "BigDecimal")\n  ethPrice_lte: BigDecimal @source(subgraph: "uniswap", name: "ethPrice_lte", type: "BigDecimal")\n  ethPrice_in: [BigDecimal!] @source(subgraph: "uniswap", name: "ethPrice_in", type: "[BigDecimal!]")\n  ethPrice_not_in: [BigDecimal!] @source(subgraph: "uniswap", name: "ethPrice_not_in", type: "[BigDecimal!]")\n  """Filter for the block changed event."""\n  _change_block: BlockChangedFilter @source(subgraph: "uniswap", name: "_change_block", type: "BlockChangedFilter")\n  and: [Bundle_filter] @source(subgraph: "uniswap", name: "and", type: "[Bundle_filter]")\n  or: [Bundle_filter] @source(subgraph: "uniswap", name: "or", type: "[Bundle_filter]")\n}\n\nenum Bundle_orderBy @source(subgraph: "uniswap", name: "Bundle_orderBy") {\n  id @source(subgraph: "uniswap", name: "id")\n  ethPrice @source(subgraph: "uniswap", name: "ethPrice")\n}\n\ntype Burn @source(subgraph: "uniswap", name: "Burn") @resolver(subgraph: "uniswap", operation: "query BurnById($Burn_id: ID!) { burn(id: $Burn_id) }", kind: "FETCH") @resolver(subgraph: "uniswap", operation: "query GetBurnById($Burn_id: ID!) { burns(where: { id: $Burn_id) } }", kind: "FETCH") @resolver(subgraph: "uniswap", operation: "query GetBurnsByIds($Burn_id: [ID!]!) { burns(where: { id_in: $Burn_id }) }", kind: "BATCH") @variable(subgraph: "uniswap", name: "Burn_id", select: "id") {\n  id: ID! @source(subgraph: "uniswap", name: "id", type: "ID!")\n  transaction: Transaction! @source(subgraph: "uniswap", name: "transaction", type: "Transaction!")\n  timestamp: BigInt! @source(subgraph: "uniswap", name: "timestamp", type: "BigInt!")\n  pair: Pair! @source(subgraph: "uniswap", name: "pair", type: "Pair!")\n  liquidity: BigDecimal! @source(subgraph: "uniswap", name: "liquidity", type: "BigDecimal!")\n  sender: Bytes @source(subgraph: "uniswap", name: "sender", type: "Bytes")\n  amount0: BigDecimal @source(subgraph: "uniswap", name: "amount0", type: "BigDecimal")\n  amount1: BigDecimal @source(subgraph: "uniswap", name: "amount1", type: "BigDecimal")\n  to: Bytes @source(subgraph: "uniswap", name: "to", type: "Bytes")\n  logIndex: BigInt @source(subgraph: "uniswap", name: "logIndex", type: "BigInt")\n  amountUSD: BigDecimal @source(subgraph: "uniswap", name: "amountUSD", type: "BigDecimal")\n  needsComplete: Boolean! @source(subgraph: "uniswap", name: "needsComplete", type: "Boolean!")\n  feeTo: Bytes @source(subgraph: "uniswap", name: "feeTo", type: "Bytes")\n  feeLiquidity: BigDecimal @source(subgraph: "uniswap", name: "feeLiquidity", type: "BigDecimal")\n}\n\ninput Burn_filter @source(subgraph: "uniswap", name: "Burn_filter") {\n  id: ID @source(subgraph: "uniswap", name: "id", type: "ID")\n  id_not: ID @source(subgraph: "uniswap", name: "id_not", type: "ID")\n  id_gt: ID @source(subgraph: "uniswap", name: "id_gt", type: "ID")\n  id_lt: ID @source(subgraph: "uniswap", name: "id_lt", type: "ID")\n  id_gte: ID @source(subgraph: "uniswap", name: "id_gte", type: "ID")\n  id_lte: ID @source(subgraph: "uniswap", name: "id_lte", type: "ID")\n  id_in: [ID!] @source(subgraph: "uniswap", name: "id_in", type: "[ID!]")\n  id_not_in: [ID!] @source(subgraph: "uniswap", name: "id_not_in", type: "[ID!]")\n  transaction: String @source(subgraph: "uniswap", name: "transaction", type: "String")\n  transaction_not: String @source(subgraph: "uniswap", name: "transaction_not", type: "String")\n  transaction_gt: String @source(subgraph: "uniswap", name: "transaction_gt", type: "String")\n  transaction_lt: String @source(subgraph: "uniswap", name: "transaction_lt", type: "String")\n  transaction_gte: String @source(subgraph: "uniswap", name: "transaction_gte", type: "String")\n  transaction_lte: String @source(subgraph: "uniswap", name: "transaction_lte", type: "String")\n  transaction_in: [String!] @source(subgraph: "uniswap", name: "transaction_in", type: "[String!]")\n  transaction_not_in: [String!] @source(subgraph: "uniswap", name: "transaction_not_in", type: "[String!]")\n  transaction_contains: String @source(subgraph: "uniswap", name: "transaction_contains", type: "String")\n  transaction_contains_nocase: String @source(subgraph: "uniswap", name: "transaction_contains_nocase", type: "String")\n  transaction_not_contains: String @source(subgraph: "uniswap", name: "transaction_not_contains", type: "String")\n  transaction_not_contains_nocase: String @source(subgraph: "uniswap", name: "transaction_not_contains_nocase", type: "String")\n  transaction_starts_with: String @source(subgraph: "uniswap", name: "transaction_starts_with", type: "String")\n  transaction_starts_with_nocase: String @source(subgraph: "uniswap", name: "transaction_starts_with_nocase", type: "String")\n  transaction_not_starts_with: String @source(subgraph: "uniswap", name: "transaction_not_starts_with", type: "String")\n  transaction_not_starts_with_nocase: String @source(subgraph: "uniswap", name: "transaction_not_starts_with_nocase", type: "String")\n  transaction_ends_with: String @source(subgraph: "uniswap", name: "transaction_ends_with", type: "String")\n  transaction_ends_with_nocase: String @source(subgraph: "uniswap", name: "transaction_ends_with_nocase", type: "String")\n  transaction_not_ends_with: String @source(subgraph: "uniswap", name: "transaction_not_ends_with", type: "String")\n  transaction_not_ends_with_nocase: String @source(subgraph: "uniswap", name: "transaction_not_ends_with_nocase", type: "String")\n  transaction_: Transaction_filter @source(subgraph: "uniswap", name: "transaction_", type: "Transaction_filter")\n  timestamp: BigInt @source(subgraph: "uniswap", name: "timestamp", type: "BigInt")\n  timestamp_not: BigInt @source(subgraph: "uniswap", name: "timestamp_not", type: "BigInt")\n  timestamp_gt: BigInt @source(subgraph: "uniswap", name: "timestamp_gt", type: "BigInt")\n  timestamp_lt: BigInt @source(subgraph: "uniswap", name: "timestamp_lt", type: "BigInt")\n  timestamp_gte: BigInt @source(subgraph: "uniswap", name: "timestamp_gte", type: "BigInt")\n  timestamp_lte: BigInt @source(subgraph: "uniswap", name: "timestamp_lte", type: "BigInt")\n  timestamp_in: [BigInt!] @source(subgraph: "uniswap", name: "timestamp_in", type: "[BigInt!]")\n  timestamp_not_in: [BigInt!] @source(subgraph: "uniswap", name: "timestamp_not_in", type: "[BigInt!]")\n  pair: String @source(subgraph: "uniswap", name: "pair", type: "String")\n  pair_not: String @source(subgraph: "uniswap", name: "pair_not", type: "String")\n  pair_gt: String @source(subgraph: "uniswap", name: "pair_gt", type: "String")\n  pair_lt: String @source(subgraph: "uniswap", name: "pair_lt", type: "String")\n  pair_gte: String @source(subgraph: "uniswap", name: "pair_gte", type: "String")\n  pair_lte: String @source(subgraph: "uniswap", name: "pair_lte", type: "String")\n  pair_in: [String!] @source(subgraph: "uniswap", name: "pair_in", type: "[String!]")\n  pair_not_in: [String!] @source(subgraph: "uniswap", name: "pair_not_in", type: "[String!]")\n  pair_contains: String @source(subgraph: "uniswap", name: "pair_contains", type: "String")\n  pair_contains_nocase: String @source(subgraph: "uniswap", name: "pair_contains_nocase", type: "String")\n  pair_not_contains: String @source(subgraph: "uniswap", name: "pair_not_contains", type: "String")\n  pair_not_contains_nocase: String @source(subgraph: "uniswap", name: "pair_not_contains_nocase", type: "String")\n  pair_starts_with: String @source(subgraph: "uniswap", name: "pair_starts_with", type: "String")\n  pair_starts_with_nocase: String @source(subgraph: "uniswap", name: "pair_starts_with_nocase", type: "String")\n  pair_not_starts_with: String @source(subgraph: "uniswap", name: "pair_not_starts_with", type: "String")\n  pair_not_starts_with_nocase: String @source(subgraph: "uniswap", name: "pair_not_starts_with_nocase", type: "String")\n  pair_ends_with: String @source(subgraph: "uniswap", name: "pair_ends_with", type: "String")\n  pair_ends_with_nocase: String @source(subgraph: "uniswap", name: "pair_ends_with_nocase", type: "String")\n  pair_not_ends_with: String @source(subgraph: "uniswap", name: "pair_not_ends_with", type: "String")\n  pair_not_ends_with_nocase: String @source(subgraph: "uniswap", name: "pair_not_ends_with_nocase", type: "String")\n  pair_: Pair_filter @source(subgraph: "uniswap", name: "pair_", type: "Pair_filter")\n  liquidity: BigDecimal @source(subgraph: "uniswap", name: "liquidity", type: "BigDecimal")\n  liquidity_not: BigDecimal @source(subgraph: "uniswap", name: "liquidity_not", type: "BigDecimal")\n  liquidity_gt: BigDecimal @source(subgraph: "uniswap", name: "liquidity_gt", type: "BigDecimal")\n  liquidity_lt: BigDecimal @source(subgraph: "uniswap", name: "liquidity_lt", type: "BigDecimal")\n  liquidity_gte: BigDecimal @source(subgraph: "uniswap", name: "liquidity_gte", type: "BigDecimal")\n  liquidity_lte: BigDecimal @source(subgraph: "uniswap", name: "liquidity_lte", type: "BigDecimal")\n  liquidity_in: [BigDecimal!] @source(subgraph: "uniswap", name: "liquidity_in", type: "[BigDecimal!]")\n  liquidity_not_in: [BigDecimal!] @source(subgraph: "uniswap", name: "liquidity_not_in", type: "[BigDecimal!]")\n  sender: Bytes @source(subgraph: "uniswap", name: "sender", type: "Bytes")\n  sender_not: Bytes @source(subgraph: "uniswap", name: "sender_not", type: "Bytes")\n  sender_gt: Bytes @source(subgraph: "uniswap", name: "sender_gt", type: "Bytes")\n  sender_lt: Bytes @source(subgraph: "uniswap", name: "sender_lt", type: "Bytes")\n  sender_gte: Bytes @source(subgraph: "uniswap", name: "sender_gte", type: "Bytes")\n  sender_lte: Bytes @source(subgraph: "uniswap", name: "sender_lte", type: "Bytes")\n  sender_in: [Bytes!] @source(subgraph: "uniswap", name: "sender_in", type: "[Bytes!]")\n  sender_not_in: [Bytes!] @source(subgraph: "uniswap", name: "sender_not_in", type: "[Bytes!]")\n  sender_contains: Bytes @source(subgraph: "uniswap", name: "sender_contains", type: "Bytes")\n  sender_not_contains: Bytes @source(subgraph: "uniswap", name: "sender_not_contains", type: "Bytes")\n  amount0: BigDecimal @source(subgraph: "uniswap", name: "amount0", type: "BigDecimal")\n  amount0_not: BigDecimal @source(subgraph: "uniswap", name: "amount0_not", type: "BigDecimal")\n  amount0_gt: BigDecimal @source(subgraph: "uniswap", name: "amount0_gt", type: "BigDecimal")\n  amount0_lt: BigDecimal @source(subgraph: "uniswap", name: "amount0_lt", type: "BigDecimal")\n  amount0_gte: BigDecimal @source(subgraph: "uniswap", name: "amount0_gte", type: "BigDecimal")\n  amount0_lte: BigDecimal @source(subgraph: "uniswap", name: "amount0_lte", type: "BigDecimal")\n  amount0_in: [BigDecimal!] @source(subgraph: "uniswap", name: "amount0_in", type: "[BigDecimal!]")\n  amount0_not_in: [BigDecimal!] @source(subgraph: "uniswap", name: "amount0_not_in", type: "[BigDecimal!]")\n  amount1: BigDecimal @source(subgraph: "uniswap", name: "amount1", type: "BigDecimal")\n  amount1_not: BigDecimal @source(subgraph: "uniswap", name: "amount1_not", type: "BigDecimal")\n  amount1_gt: BigDecimal @source(subgraph: "uniswap", name: "amount1_gt", type: "BigDecimal")\n  amount1_lt: BigDecimal @source(subgraph: "uniswap", name: "amount1_lt", type: "BigDecimal")\n  amount1_gte: BigDecimal @source(subgraph: "uniswap", name: "amount1_gte", type: "BigDecimal")\n  amount1_lte: BigDecimal @source(subgraph: "uniswap", name: "amount1_lte", type: "BigDecimal")\n  amount1_in: [BigDecimal!] @source(subgraph: "uniswap", name: "amount1_in", type: "[BigDecimal!]")\n  amount1_not_in: [BigDecimal!] @source(subgraph: "uniswap", name: "amount1_not_in", type: "[BigDecimal!]")\n  to: Bytes @source(subgraph: "uniswap", name: "to", type: "Bytes")\n  to_not: Bytes @source(subgraph: "uniswap", name: "to_not", type: "Bytes")\n  to_gt: Bytes @source(subgraph: "uniswap", name: "to_gt", type: "Bytes")\n  to_lt: Bytes @source(subgraph: "uniswap", name: "to_lt", type: "Bytes")\n  to_gte: Bytes @source(subgraph: "uniswap", name: "to_gte", type: "Bytes")\n  to_lte: Bytes @source(subgraph: "uniswap", name: "to_lte", type: "Bytes")\n  to_in: [Bytes!] @source(subgraph: "uniswap", name: "to_in", type: "[Bytes!]")\n  to_not_in: [Bytes!] @source(subgraph: "uniswap", name: "to_not_in", type: "[Bytes!]")\n  to_contains: Bytes @source(subgraph: "uniswap", name: "to_contains", type: "Bytes")\n  to_not_contains: Bytes @source(subgraph: "uniswap", name: "to_not_contains", type: "Bytes")\n  logIndex: BigInt @source(subgraph: "uniswap", name: "logIndex", type: "BigInt")\n  logIndex_not: BigInt @source(subgraph: "uniswap", name: "logIndex_not", type: "BigInt")\n  logIndex_gt: BigInt @source(subgraph: "uniswap", name: "logIndex_gt", type: "BigInt")\n  logIndex_lt: BigInt @source(subgraph: "uniswap", name: "logIndex_lt", type: "BigInt")\n  logIndex_gte: BigInt @source(subgraph: "uniswap", name: "logIndex_gte", type: "BigInt")\n  logIndex_lte: BigInt @source(subgraph: "uniswap", name: "logIndex_lte", type: "BigInt")\n  logIndex_in: [BigInt!] @source(subgraph: "uniswap", name: "logIndex_in", type: "[BigInt!]")\n  logIndex_not_in: [BigInt!] @source(subgraph: "uniswap", name: "logIndex_not_in", type: "[BigInt!]")\n  amountUSD: BigDecimal @source(subgraph: "uniswap", name: "amountUSD", type: "BigDecimal")\n  amountUSD_not: BigDecimal @source(subgraph: "uniswap", name: "amountUSD_not", type: "BigDecimal")\n  amountUSD_gt: BigDecimal @source(subgraph: "uniswap", name: "amountUSD_gt", type: "BigDecimal")\n  amountUSD_lt: BigDecimal @source(subgraph: "uniswap", name: "amountUSD_lt", type: "BigDecimal")\n  amountUSD_gte: BigDecimal @source(subgraph: "uniswap", name: "amountUSD_gte", type: "BigDecimal")\n  amountUSD_lte: BigDecimal @source(subgraph: "uniswap", name: "amountUSD_lte", type: "BigDecimal")\n  amountUSD_in: [BigDecimal!] @source(subgraph: "uniswap", name: "amountUSD_in", type: "[BigDecimal!]")\n  amountUSD_not_in: [BigDecimal!] @source(subgraph: "uniswap", name: "amountUSD_not_in", type: "[BigDecimal!]")\n  needsComplete: Boolean @source(subgraph: "uniswap", name: "needsComplete", type: "Boolean")\n  needsComplete_not: Boolean @source(subgraph: "uniswap", name: "needsComplete_not", type: "Boolean")\n  needsComplete_in: [Boolean!] @source(subgraph: "uniswap", name: "needsComplete_in", type: "[Boolean!]")\n  needsComplete_not_in: [Boolean!] @source(subgraph: "uniswap", name: "needsComplete_not_in", type: "[Boolean!]")\n  feeTo: Bytes @source(subgraph: "uniswap", name: "feeTo", type: "Bytes")\n  feeTo_not: Bytes @source(subgraph: "uniswap", name: "feeTo_not", type: "Bytes")\n  feeTo_gt: Bytes @source(subgraph: "uniswap", name: "feeTo_gt", type: "Bytes")\n  feeTo_lt: Bytes @source(subgraph: "uniswap", name: "feeTo_lt", type: "Bytes")\n  feeTo_gte: Bytes @source(subgraph: "uniswap", name: "feeTo_gte", type: "Bytes")\n  feeTo_lte: Bytes @source(subgraph: "uniswap", name: "feeTo_lte", type: "Bytes")\n  feeTo_in: [Bytes!] @source(subgraph: "uniswap", name: "feeTo_in", type: "[Bytes!]")\n  feeTo_not_in: [Bytes!] @source(subgraph: "uniswap", name: "feeTo_not_in", type: "[Bytes!]")\n  feeTo_contains: Bytes @source(subgraph: "uniswap", name: "feeTo_contains", type: "Bytes")\n  feeTo_not_contains: Bytes @source(subgraph: "uniswap", name: "feeTo_not_contains", type: "Bytes")\n  feeLiquidity: BigDecimal @source(subgraph: "uniswap", name: "feeLiquidity", type: "BigDecimal")\n  feeLiquidity_not: BigDecimal @source(subgraph: "uniswap", name: "feeLiquidity_not", type: "BigDecimal")\n  feeLiquidity_gt: BigDecimal @source(subgraph: "uniswap", name: "feeLiquidity_gt", type: "BigDecimal")\n  feeLiquidity_lt: BigDecimal @source(subgraph: "uniswap", name: "feeLiquidity_lt", type: "BigDecimal")\n  feeLiquidity_gte: BigDecimal @source(subgraph: "uniswap", name: "feeLiquidity_gte", type: "BigDecimal")\n  feeLiquidity_lte: BigDecimal @source(subgraph: "uniswap", name: "feeLiquidity_lte", type: "BigDecimal")\n  feeLiquidity_in: [BigDecimal!] @source(subgraph: "uniswap", name: "feeLiquidity_in", type: "[BigDecimal!]")\n  feeLiquidity_not_in: [BigDecimal!] @source(subgraph: "uniswap", name: "feeLiquidity_not_in", type: "[BigDecimal!]")\n  """Filter for the block changed event."""\n  _change_block: BlockChangedFilter @source(subgraph: "uniswap", name: "_change_block", type: "BlockChangedFilter")\n  and: [Burn_filter] @source(subgraph: "uniswap", name: "and", type: "[Burn_filter]")\n  or: [Burn_filter] @source(subgraph: "uniswap", name: "or", type: "[Burn_filter]")\n}\n\nenum Burn_orderBy @source(subgraph: "uniswap", name: "Burn_orderBy") {\n  id @source(subgraph: "uniswap", name: "id")\n  transaction @source(subgraph: "uniswap", name: "transaction")\n  transaction__id @source(subgraph: "uniswap", name: "transaction__id")\n  transaction__blockNumber @source(subgraph: "uniswap", name: "transaction__blockNumber")\n  transaction__timestamp @source(subgraph: "uniswap", name: "transaction__timestamp")\n  timestamp @source(subgraph: "uniswap", name: "timestamp")\n  pair @source(subgraph: "uniswap", name: "pair")\n  pair__id @source(subgraph: "uniswap", name: "pair__id")\n  pair__reserve0 @source(subgraph: "uniswap", name: "pair__reserve0")\n  pair__reserve1 @source(subgraph: "uniswap", name: "pair__reserve1")\n  pair__totalSupply @source(subgraph: "uniswap", name: "pair__totalSupply")\n  pair__reserveETH @source(subgraph: "uniswap", name: "pair__reserveETH")\n  pair__reserveUSD @source(subgraph: "uniswap", name: "pair__reserveUSD")\n  pair__trackedReserveETH @source(subgraph: "uniswap", name: "pair__trackedReserveETH")\n  pair__token0Price @source(subgraph: "uniswap", name: "pair__token0Price")\n  pair__token1Price @source(subgraph: "uniswap", name: "pair__token1Price")\n  pair__volumeToken0 @source(subgraph: "uniswap", name: "pair__volumeToken0")\n  pair__volumeToken1 @source(subgraph: "uniswap", name: "pair__volumeToken1")\n  pair__volumeUSD @source(subgraph: "uniswap", name: "pair__volumeUSD")\n  pair__untrackedVolumeUSD @source(subgraph: "uniswap", name: "pair__untrackedVolumeUSD")\n  pair__txCount @source(subgraph: "uniswap", name: "pair__txCount")\n  pair__createdAtTimestamp @source(subgraph: "uniswap", name: "pair__createdAtTimestamp")\n  pair__createdAtBlockNumber @source(subgraph: "uniswap", name: "pair__createdAtBlockNumber")\n  pair__liquidityProviderCount @source(subgraph: "uniswap", name: "pair__liquidityProviderCount")\n  liquidity @source(subgraph: "uniswap", name: "liquidity")\n  sender @source(subgraph: "uniswap", name: "sender")\n  amount0 @source(subgraph: "uniswap", name: "amount0")\n  amount1 @source(subgraph: "uniswap", name: "amount1")\n  to @source(subgraph: "uniswap", name: "to")\n  logIndex @source(subgraph: "uniswap", name: "logIndex")\n  amountUSD @source(subgraph: "uniswap", name: "amountUSD")\n  needsComplete @source(subgraph: "uniswap", name: "needsComplete")\n  feeTo @source(subgraph: "uniswap", name: "feeTo")\n  feeLiquidity @source(subgraph: "uniswap", name: "feeLiquidity")\n}\n\ntype LiquidityPosition @source(subgraph: "uniswap", name: "LiquidityPosition") @resolver(subgraph: "uniswap", operation: "query LiquidityPositionById($LiquidityPosition_id: ID!) { liquidityPosition(id: $LiquidityPosition_id) }", kind: "FETCH") @resolver(subgraph: "uniswap", operation: "query GetLiquidityPositionById($LiquidityPosition_id: ID!) { liquidityPositions(where: { id: $LiquidityPosition_id) } }", kind: "FETCH") @resolver(subgraph: "uniswap", operation: "query GetLiquidityPositionsByIds($LiquidityPosition_id: [ID!]!) { liquidityPositions(where: { id_in: $LiquidityPosition_id }) }", kind: "BATCH") @variable(subgraph: "uniswap", name: "LiquidityPosition_id", select: "id") {\n  id: ID! @source(subgraph: "uniswap", name: "id", type: "ID!")\n  user: User! @source(subgraph: "uniswap", name: "user", type: "User!")\n  pair: Pair! @source(subgraph: "uniswap", name: "pair", type: "Pair!")\n  liquidityTokenBalance: BigDecimal! @source(subgraph: "uniswap", name: "liquidityTokenBalance", type: "BigDecimal!")\n}\n\ntype LiquidityPositionSnapshot @source(subgraph: "uniswap", name: "LiquidityPositionSnapshot") @resolver(subgraph: "uniswap", operation: "query LiquidityPositionSnapshotById($LiquidityPositionSnapshot_id: ID!) { liquidityPositionSnapshot(id: $LiquidityPositionSnapshot_id) }", kind: "FETCH") @resolver(subgraph: "uniswap", operation: "query GetLiquidityPositionSnapshotById($LiquidityPositionSnapshot_id: ID!) { liquidityPositionSnapshots(where: { id: $LiquidityPositionSnapshot_id) } }", kind: "FETCH") @resolver(subgraph: "uniswap", operation: "query GetLiquidityPositionSnapshotsByIds($LiquidityPositionSnapshot_id: [ID!]!) { liquidityPositionSnapshots(where: { id_in: $LiquidityPositionSnapshot_id }) }", kind: "BATCH") @resolver(subgraph: "uniswap", operation: "query LiquidityPositionSnapshotsByTimestamps($LiquidityPositionSnapshot_timestamp: Int) { liquidityPositionSnapshots(skip: $LiquidityPositionSnapshot_timestamp) }", kind: "BATCH") @resolver(subgraph: "uniswap", operation: "query LiquidityPositionSnapshotsByBlocks($LiquidityPositionSnapshot_block: Int) { liquidityPositionSnapshots(skip: $LiquidityPositionSnapshot_block) }", kind: "BATCH") @variable(subgraph: "uniswap", name: "LiquidityPositionSnapshot_id", select: "id") @variable(subgraph: "uniswap", name: "LiquidityPositionSnapshot_timestamp", select: "timestamp") @variable(subgraph: "uniswap", name: "LiquidityPositionSnapshot_block", select: "block") {\n  id: ID! @source(subgraph: "uniswap", name: "id", type: "ID!")\n  liquidityPosition: LiquidityPosition! @source(subgraph: "uniswap", name: "liquidityPosition", type: "LiquidityPosition!")\n  timestamp: Int! @source(subgraph: "uniswap", name: "timestamp", type: "Int!")\n  block: Int! @source(subgraph: "uniswap", name: "block", type: "Int!")\n  user: User! @source(subgraph: "uniswap", name: "user", type: "User!")\n  pair: Pair! @source(subgraph: "uniswap", name: "pair", type: "Pair!")\n  token0PriceUSD: BigDecimal! @source(subgraph: "uniswap", name: "token0PriceUSD", type: "BigDecimal!")\n  token1PriceUSD: BigDecimal! @source(subgraph: "uniswap", name: "token1PriceUSD", type: "BigDecimal!")\n  reserve0: BigDecimal! @source(subgraph: "uniswap", name: "reserve0", type: "BigDecimal!")\n  reserve1: BigDecimal! @source(subgraph: "uniswap", name: "reserve1", type: "BigDecimal!")\n  reserveUSD: BigDecimal! @source(subgraph: "uniswap", name: "reserveUSD", type: "BigDecimal!")\n  liquidityTokenTotalSupply: BigDecimal! @source(subgraph: "uniswap", name: "liquidityTokenTotalSupply", type: "BigDecimal!")\n  liquidityTokenBalance: BigDecimal! @source(subgraph: "uniswap", name: "liquidityTokenBalance", type: "BigDecimal!")\n}\n\ninput LiquidityPositionSnapshot_filter @source(subgraph: "uniswap", name: "LiquidityPositionSnapshot_filter") {\n  id: ID @source(subgraph: "uniswap", name: "id", type: "ID")\n  id_not: ID @source(subgraph: "uniswap", name: "id_not", type: "ID")\n  id_gt: ID @source(subgraph: "uniswap", name: "id_gt", type: "ID")\n  id_lt: ID @source(subgraph: "uniswap", name: "id_lt", type: "ID")\n  id_gte: ID @source(subgraph: "uniswap", name: "id_gte", type: "ID")\n  id_lte: ID @source(subgraph: "uniswap", name: "id_lte", type: "ID")\n  id_in: [ID!] @source(subgraph: "uniswap", name: "id_in", type: "[ID!]")\n  id_not_in: [ID!] @source(subgraph: "uniswap", name: "id_not_in", type: "[ID!]")\n  liquidityPosition: String @source(subgraph: "uniswap", name: "liquidityPosition", type: "String")\n  liquidityPosition_not: String @source(subgraph: "uniswap", name: "liquidityPosition_not", type: "String")\n  liquidityPosition_gt: String @source(subgraph: "uniswap", name: "liquidityPosition_gt", type: "String")\n  liquidityPosition_lt: String @source(subgraph: "uniswap", name: "liquidityPosition_lt", type: "String")\n  liquidityPosition_gte: String @source(subgraph: "uniswap", name: "liquidityPosition_gte", type: "String")\n  liquidityPosition_lte: String @source(subgraph: "uniswap", name: "liquidityPosition_lte", type: "String")\n  liquidityPosition_in: [String!] @source(subgraph: "uniswap", name: "liquidityPosition_in", type: "[String!]")\n  liquidityPosition_not_in: [String!] @source(subgraph: "uniswap", name: "liquidityPosition_not_in", type: "[String!]")\n  liquidityPosition_contains: String @source(subgraph: "uniswap", name: "liquidityPosition_contains", type: "String")\n  liquidityPosition_contains_nocase: String @source(subgraph: "uniswap", name: "liquidityPosition_contains_nocase", type: "String")\n  liquidityPosition_not_contains: String @source(subgraph: "uniswap", name: "liquidityPosition_not_contains", type: "String")\n  liquidityPosition_not_contains_nocase: String @source(subgraph: "uniswap", name: "liquidityPosition_not_contains_nocase", type: "String")\n  liquidityPosition_starts_with: String @source(subgraph: "uniswap", name: "liquidityPosition_starts_with", type: "String")\n  liquidityPosition_starts_with_nocase: String @source(subgraph: "uniswap", name: "liquidityPosition_starts_with_nocase", type: "String")\n  liquidityPosition_not_starts_with: String @source(subgraph: "uniswap", name: "liquidityPosition_not_starts_with", type: "String")\n  liquidityPosition_not_starts_with_nocase: String @source(subgraph: "uniswap", name: "liquidityPosition_not_starts_with_nocase", type: "String")\n  liquidityPosition_ends_with: String @source(subgraph: "uniswap", name: "liquidityPosition_ends_with", type: "String")\n  liquidityPosition_ends_with_nocase: String @source(subgraph: "uniswap", name: "liquidityPosition_ends_with_nocase", type: "String")\n  liquidityPosition_not_ends_with: String @source(subgraph: "uniswap", name: "liquidityPosition_not_ends_with", type: "String")\n  liquidityPosition_not_ends_with_nocase: String @source(subgraph: "uniswap", name: "liquidityPosition_not_ends_with_nocase", type: "String")\n  liquidityPosition_: LiquidityPosition_filter @source(subgraph: "uniswap", name: "liquidityPosition_", type: "LiquidityPosition_filter")\n  timestamp: Int @source(subgraph: "uniswap", name: "timestamp", type: "Int")\n  timestamp_not: Int @source(subgraph: "uniswap", name: "timestamp_not", type: "Int")\n  timestamp_gt: Int @source(subgraph: "uniswap", name: "timestamp_gt", type: "Int")\n  timestamp_lt: Int @source(subgraph: "uniswap", name: "timestamp_lt", type: "Int")\n  timestamp_gte: Int @source(subgraph: "uniswap", name: "timestamp_gte", type: "Int")\n  timestamp_lte: Int @source(subgraph: "uniswap", name: "timestamp_lte", type: "Int")\n  timestamp_in: [Int!] @source(subgraph: "uniswap", name: "timestamp_in", type: "[Int!]")\n  timestamp_not_in: [Int!] @source(subgraph: "uniswap", name: "timestamp_not_in", type: "[Int!]")\n  block: Int @source(subgraph: "uniswap", name: "block", type: "Int")\n  block_not: Int @source(subgraph: "uniswap", name: "block_not", type: "Int")\n  block_gt: Int @source(subgraph: "uniswap", name: "block_gt", type: "Int")\n  block_lt: Int @source(subgraph: "uniswap", name: "block_lt", type: "Int")\n  block_gte: Int @source(subgraph: "uniswap", name: "block_gte", type: "Int")\n  block_lte: Int @source(subgraph: "uniswap", name: "block_lte", type: "Int")\n  block_in: [Int!] @source(subgraph: "uniswap", name: "block_in", type: "[Int!]")\n  block_not_in: [Int!] @source(subgraph: "uniswap", name: "block_not_in", type: "[Int!]")\n  user: String @source(subgraph: "uniswap", name: "user", type: "String")\n  user_not: String @source(subgraph: "uniswap", name: "user_not", type: "String")\n  user_gt: String @source(subgraph: "uniswap", name: "user_gt", type: "String")\n  user_lt: String @source(subgraph: "uniswap", name: "user_lt", type: "String")\n  user_gte: String @source(subgraph: "uniswap", name: "user_gte", type: "String")\n  user_lte: String @source(subgraph: "uniswap", name: "user_lte", type: "String")\n  user_in: [String!] @source(subgraph: "uniswap", name: "user_in", type: "[String!]")\n  user_not_in: [String!] @source(subgraph: "uniswap", name: "user_not_in", type: "[String!]")\n  user_contains: String @source(subgraph: "uniswap", name: "user_contains", type: "String")\n  user_contains_nocase: String @source(subgraph: "uniswap", name: "user_contains_nocase", type: "String")\n  user_not_contains: String @source(subgraph: "uniswap", name: "user_not_contains", type: "String")\n  user_not_contains_nocase: String @source(subgraph: "uniswap", name: "user_not_contains_nocase", type: "String")\n  user_starts_with: String @source(subgraph: "uniswap", name: "user_starts_with", type: "String")\n  user_starts_with_nocase: String @source(subgraph: "uniswap", name: "user_starts_with_nocase", type: "String")\n  user_not_starts_with: String @source(subgraph: "uniswap", name: "user_not_starts_with", type: "String")\n  user_not_starts_with_nocase: String @source(subgraph: "uniswap", name: "user_not_starts_with_nocase", type: "String")\n  user_ends_with: String @source(subgraph: "uniswap", name: "user_ends_with", type: "String")\n  user_ends_with_nocase: String @source(subgraph: "uniswap", name: "user_ends_with_nocase", type: "String")\n  user_not_ends_with: String @source(subgraph: "uniswap", name: "user_not_ends_with", type: "String")\n  user_not_ends_with_nocase: String @source(subgraph: "uniswap", name: "user_not_ends_with_nocase", type: "String")\n  user_: User_filter @source(subgraph: "uniswap", name: "user_", type: "User_filter")\n  pair: String @source(subgraph: "uniswap", name: "pair", type: "String")\n  pair_not: String @source(subgraph: "uniswap", name: "pair_not", type: "String")\n  pair_gt: String @source(subgraph: "uniswap", name: "pair_gt", type: "String")\n  pair_lt: String @source(subgraph: "uniswap", name: "pair_lt", type: "String")\n  pair_gte: String @source(subgraph: "uniswap", name: "pair_gte", type: "String")\n  pair_lte: String @source(subgraph: "uniswap", name: "pair_lte", type: "String")\n  pair_in: [String!] @source(subgraph: "uniswap", name: "pair_in", type: "[String!]")\n  pair_not_in: [String!] @source(subgraph: "uniswap", name: "pair_not_in", type: "[String!]")\n  pair_contains: String @source(subgraph: "uniswap", name: "pair_contains", type: "String")\n  pair_contains_nocase: String @source(subgraph: "uniswap", name: "pair_contains_nocase", type: "String")\n  pair_not_contains: String @source(subgraph: "uniswap", name: "pair_not_contains", type: "String")\n  pair_not_contains_nocase: String @source(subgraph: "uniswap", name: "pair_not_contains_nocase", type: "String")\n  pair_starts_with: String @source(subgraph: "uniswap", name: "pair_starts_with", type: "String")\n  pair_starts_with_nocase: String @source(subgraph: "uniswap", name: "pair_starts_with_nocase", type: "String")\n  pair_not_starts_with: String @source(subgraph: "uniswap", name: "pair_not_starts_with", type: "String")\n  pair_not_starts_with_nocase: String @source(subgraph: "uniswap", name: "pair_not_starts_with_nocase", type: "String")\n  pair_ends_with: String @source(subgraph: "uniswap", name: "pair_ends_with", type: "String")\n  pair_ends_with_nocase: String @source(subgraph: "uniswap", name: "pair_ends_with_nocase", type: "String")\n  pair_not_ends_with: String @source(subgraph: "uniswap", name: "pair_not_ends_with", type: "String")\n  pair_not_ends_with_nocase: String @source(subgraph: "uniswap", name: "pair_not_ends_with_nocase", type: "String")\n  pair_: Pair_filter @source(subgraph: "uniswap", name: "pair_", type: "Pair_filter")\n  token0PriceUSD: BigDecimal @source(subgraph: "uniswap", name: "token0PriceUSD", type: "BigDecimal")\n  token0PriceUSD_not: BigDecimal @source(subgraph: "uniswap", name: "token0PriceUSD_not", type: "BigDecimal")\n  token0PriceUSD_gt: BigDecimal @source(subgraph: "uniswap", name: "token0PriceUSD_gt", type: "BigDecimal")\n  token0PriceUSD_lt: BigDecimal @source(subgraph: "uniswap", name: "token0PriceUSD_lt", type: "BigDecimal")\n  token0PriceUSD_gte: BigDecimal @source(subgraph: "uniswap", name: "token0PriceUSD_gte", type: "BigDecimal")\n  token0PriceUSD_lte: BigDecimal @source(subgraph: "uniswap", name: "token0PriceUSD_lte", type: "BigDecimal")\n  token0PriceUSD_in: [BigDecimal!] @source(subgraph: "uniswap", name: "token0PriceUSD_in", type: "[BigDecimal!]")\n  token0PriceUSD_not_in: [BigDecimal!] @source(subgraph: "uniswap", name: "token0PriceUSD_not_in", type: "[BigDecimal!]")\n  token1PriceUSD: BigDecimal @source(subgraph: "uniswap", name: "token1PriceUSD", type: "BigDecimal")\n  token1PriceUSD_not: BigDecimal @source(subgraph: "uniswap", name: "token1PriceUSD_not", type: "BigDecimal")\n  token1PriceUSD_gt: BigDecimal @source(subgraph: "uniswap", name: "token1PriceUSD_gt", type: "BigDecimal")\n  token1PriceUSD_lt: BigDecimal @source(subgraph: "uniswap", name: "token1PriceUSD_lt", type: "BigDecimal")\n  token1PriceUSD_gte: BigDecimal @source(subgraph: "uniswap", name: "token1PriceUSD_gte", type: "BigDecimal")\n  token1PriceUSD_lte: BigDecimal @source(subgraph: "uniswap", name: "token1PriceUSD_lte", type: "BigDecimal")\n  token1PriceUSD_in: [BigDecimal!] @source(subgraph: "uniswap", name: "token1PriceUSD_in", type: "[BigDecimal!]")\n  token1PriceUSD_not_in: [BigDecimal!] @source(subgraph: "uniswap", name: "token1PriceUSD_not_in", type: "[BigDecimal!]")\n  reserve0: BigDecimal @source(subgraph: "uniswap", name: "reserve0", type: "BigDecimal")\n  reserve0_not: BigDecimal @source(subgraph: "uniswap", name: "reserve0_not", type: "BigDecimal")\n  reserve0_gt: BigDecimal @source(subgraph: "uniswap", name: "reserve0_gt", type: "BigDecimal")\n  reserve0_lt: BigDecimal @source(subgraph: "uniswap", name: "reserve0_lt", type: "BigDecimal")\n  reserve0_gte: BigDecimal @source(subgraph: "uniswap", name: "reserve0_gte", type: "BigDecimal")\n  reserve0_lte: BigDecimal @source(subgraph: "uniswap", name: "reserve0_lte", type: "BigDecimal")\n  reserve0_in: [BigDecimal!] @source(subgraph: "uniswap", name: "reserve0_in", type: "[BigDecimal!]")\n  reserve0_not_in: [BigDecimal!] @source(subgraph: "uniswap", name: "reserve0_not_in", type: "[BigDecimal!]")\n  reserve1: BigDecimal @source(subgraph: "uniswap", name: "reserve1", type: "BigDecimal")\n  reserve1_not: BigDecimal @source(subgraph: "uniswap", name: "reserve1_not", type: "BigDecimal")\n  reserve1_gt: BigDecimal @source(subgraph: "uniswap", name: "reserve1_gt", type: "BigDecimal")\n  reserve1_lt: BigDecimal @source(subgraph: "uniswap", name: "reserve1_lt", type: "BigDecimal")\n  reserve1_gte: BigDecimal @source(subgraph: "uniswap", name: "reserve1_gte", type: "BigDecimal")\n  reserve1_lte: BigDecimal @source(subgraph: "uniswap", name: "reserve1_lte", type: "BigDecimal")\n  reserve1_in: [BigDecimal!] @source(subgraph: "uniswap", name: "reserve1_in", type: "[BigDecimal!]")\n  reserve1_not_in: [BigDecimal!] @source(subgraph: "uniswap", name: "reserve1_not_in", type: "[BigDecimal!]")\n  reserveUSD: BigDecimal @source(subgraph: "uniswap", name: "reserveUSD", type: "BigDecimal")\n  reserveUSD_not: BigDecimal @source(subgraph: "uniswap", name: "reserveUSD_not", type: "BigDecimal")\n  reserveUSD_gt: BigDecimal @source(subgraph: "uniswap", name: "reserveUSD_gt", type: "BigDecimal")\n  reserveUSD_lt: BigDecimal @source(subgraph: "uniswap", name: "reserveUSD_lt", type: "BigDecimal")\n  reserveUSD_gte: BigDecimal @source(subgraph: "uniswap", name: "reserveUSD_gte", type: "BigDecimal")\n  reserveUSD_lte: BigDecimal @source(subgraph: "uniswap", name: "reserveUSD_lte", type: "BigDecimal")\n  reserveUSD_in: [BigDecimal!] @source(subgraph: "uniswap", name: "reserveUSD_in", type: "[BigDecimal!]")\n  reserveUSD_not_in: [BigDecimal!] @source(subgraph: "uniswap", name: "reserveUSD_not_in", type: "[BigDecimal!]")\n  liquidityTokenTotalSupply: BigDecimal @source(subgraph: "uniswap", name: "liquidityTokenTotalSupply", type: "BigDecimal")\n  liquidityTokenTotalSupply_not: BigDecimal @source(subgraph: "uniswap", name: "liquidityTokenTotalSupply_not", type: "BigDecimal")\n  liquidityTokenTotalSupply_gt: BigDecimal @source(subgraph: "uniswap", name: "liquidityTokenTotalSupply_gt", type: "BigDecimal")\n  liquidityTokenTotalSupply_lt: BigDecimal @source(subgraph: "uniswap", name: "liquidityTokenTotalSupply_lt", type: "BigDecimal")\n  liquidityTokenTotalSupply_gte: BigDecimal @source(subgraph: "uniswap", name: "liquidityTokenTotalSupply_gte", type: "BigDecimal")\n  liquidityTokenTotalSupply_lte: BigDecimal @source(subgraph: "uniswap", name: "liquidityTokenTotalSupply_lte", type: "BigDecimal")\n  liquidityTokenTotalSupply_in: [BigDecimal!] @source(subgraph: "uniswap", name: "liquidityTokenTotalSupply_in", type: "[BigDecimal!]")\n  liquidityTokenTotalSupply_not_in: [BigDecimal!] @source(subgraph: "uniswap", name: "liquidityTokenTotalSupply_not_in", type: "[BigDecimal!]")\n  liquidityTokenBalance: BigDecimal @source(subgraph: "uniswap", name: "liquidityTokenBalance", type: "BigDecimal")\n  liquidityTokenBalance_not: BigDecimal @source(subgraph: "uniswap", name: "liquidityTokenBalance_not", type: "BigDecimal")\n  liquidityTokenBalance_gt: BigDecimal @source(subgraph: "uniswap", name: "liquidityTokenBalance_gt", type: "BigDecimal")\n  liquidityTokenBalance_lt: BigDecimal @source(subgraph: "uniswap", name: "liquidityTokenBalance_lt", type: "BigDecimal")\n  liquidityTokenBalance_gte: BigDecimal @source(subgraph: "uniswap", name: "liquidityTokenBalance_gte", type: "BigDecimal")\n  liquidityTokenBalance_lte: BigDecimal @source(subgraph: "uniswap", name: "liquidityTokenBalance_lte", type: "BigDecimal")\n  liquidityTokenBalance_in: [BigDecimal!] @source(subgraph: "uniswap", name: "liquidityTokenBalance_in", type: "[BigDecimal!]")\n  liquidityTokenBalance_not_in: [BigDecimal!] @source(subgraph: "uniswap", name: "liquidityTokenBalance_not_in", type: "[BigDecimal!]")\n  """Filter for the block changed event."""\n  _change_block: BlockChangedFilter @source(subgraph: "uniswap", name: "_change_block", type: "BlockChangedFilter")\n  and: [LiquidityPositionSnapshot_filter] @source(subgraph: "uniswap", name: "and", type: "[LiquidityPositionSnapshot_filter]")\n  or: [LiquidityPositionSnapshot_filter] @source(subgraph: "uniswap", name: "or", type: "[LiquidityPositionSnapshot_filter]")\n}\n\nenum LiquidityPositionSnapshot_orderBy @source(subgraph: "uniswap", name: "LiquidityPositionSnapshot_orderBy") {\n  id @source(subgraph: "uniswap", name: "id")\n  liquidityPosition @source(subgraph: "uniswap", name: "liquidityPosition")\n  liquidityPosition__id @source(subgraph: "uniswap", name: "liquidityPosition__id")\n  liquidityPosition__liquidityTokenBalance @source(subgraph: "uniswap", name: "liquidityPosition__liquidityTokenBalance")\n  timestamp @source(subgraph: "uniswap", name: "timestamp")\n  block @source(subgraph: "uniswap", name: "block")\n  user @source(subgraph: "uniswap", name: "user")\n  user__id @source(subgraph: "uniswap", name: "user__id")\n  user__usdSwapped @source(subgraph: "uniswap", name: "user__usdSwapped")\n  pair @source(subgraph: "uniswap", name: "pair")\n  pair__id @source(subgraph: "uniswap", name: "pair__id")\n  pair__reserve0 @source(subgraph: "uniswap", name: "pair__reserve0")\n  pair__reserve1 @source(subgraph: "uniswap", name: "pair__reserve1")\n  pair__totalSupply @source(subgraph: "uniswap", name: "pair__totalSupply")\n  pair__reserveETH @source(subgraph: "uniswap", name: "pair__reserveETH")\n  pair__reserveUSD @source(subgraph: "uniswap", name: "pair__reserveUSD")\n  pair__trackedReserveETH @source(subgraph: "uniswap", name: "pair__trackedReserveETH")\n  pair__token0Price @source(subgraph: "uniswap", name: "pair__token0Price")\n  pair__token1Price @source(subgraph: "uniswap", name: "pair__token1Price")\n  pair__volumeToken0 @source(subgraph: "uniswap", name: "pair__volumeToken0")\n  pair__volumeToken1 @source(subgraph: "uniswap", name: "pair__volumeToken1")\n  pair__volumeUSD @source(subgraph: "uniswap", name: "pair__volumeUSD")\n  pair__untrackedVolumeUSD @source(subgraph: "uniswap", name: "pair__untrackedVolumeUSD")\n  pair__txCount @source(subgraph: "uniswap", name: "pair__txCount")\n  pair__createdAtTimestamp @source(subgraph: "uniswap", name: "pair__createdAtTimestamp")\n  pair__createdAtBlockNumber @source(subgraph: "uniswap", name: "pair__createdAtBlockNumber")\n  pair__liquidityProviderCount @source(subgraph: "uniswap", name: "pair__liquidityProviderCount")\n  token0PriceUSD @source(subgraph: "uniswap", name: "token0PriceUSD")\n  token1PriceUSD @source(subgraph: "uniswap", name: "token1PriceUSD")\n  reserve0 @source(subgraph: "uniswap", name: "reserve0")\n  reserve1 @source(subgraph: "uniswap", name: "reserve1")\n  reserveUSD @source(subgraph: "uniswap", name: "reserveUSD")\n  liquidityTokenTotalSupply @source(subgraph: "uniswap", name: "liquidityTokenTotalSupply")\n  liquidityTokenBalance @source(subgraph: "uniswap", name: "liquidityTokenBalance")\n}\n\ninput LiquidityPosition_filter @source(subgraph: "uniswap", name: "LiquidityPosition_filter") {\n  id: ID @source(subgraph: "uniswap", name: "id", type: "ID")\n  id_not: ID @source(subgraph: "uniswap", name: "id_not", type: "ID")\n  id_gt: ID @source(subgraph: "uniswap", name: "id_gt", type: "ID")\n  id_lt: ID @source(subgraph: "uniswap", name: "id_lt", type: "ID")\n  id_gte: ID @source(subgraph: "uniswap", name: "id_gte", type: "ID")\n  id_lte: ID @source(subgraph: "uniswap", name: "id_lte", type: "ID")\n  id_in: [ID!] @source(subgraph: "uniswap", name: "id_in", type: "[ID!]")\n  id_not_in: [ID!] @source(subgraph: "uniswap", name: "id_not_in", type: "[ID!]")\n  user: String @source(subgraph: "uniswap", name: "user", type: "String")\n  user_not: String @source(subgraph: "uniswap", name: "user_not", type: "String")\n  user_gt: String @source(subgraph: "uniswap", name: "user_gt", type: "String")\n  user_lt: String @source(subgraph: "uniswap", name: "user_lt", type: "String")\n  user_gte: String @source(subgraph: "uniswap", name: "user_gte", type: "String")\n  user_lte: String @source(subgraph: "uniswap", name: "user_lte", type: "String")\n  user_in: [String!] @source(subgraph: "uniswap", name: "user_in", type: "[String!]")\n  user_not_in: [String!] @source(subgraph: "uniswap", name: "user_not_in", type: "[String!]")\n  user_contains: String @source(subgraph: "uniswap", name: "user_contains", type: "String")\n  user_contains_nocase: String @source(subgraph: "uniswap", name: "user_contains_nocase", type: "String")\n  user_not_contains: String @source(subgraph: "uniswap", name: "user_not_contains", type: "String")\n  user_not_contains_nocase: String @source(subgraph: "uniswap", name: "user_not_contains_nocase", type: "String")\n  user_starts_with: String @source(subgraph: "uniswap", name: "user_starts_with", type: "String")\n  user_starts_with_nocase: String @source(subgraph: "uniswap", name: "user_starts_with_nocase", type: "String")\n  user_not_starts_with: String @source(subgraph: "uniswap", name: "user_not_starts_with", type: "String")\n  user_not_starts_with_nocase: String @source(subgraph: "uniswap", name: "user_not_starts_with_nocase", type: "String")\n  user_ends_with: String @source(subgraph: "uniswap", name: "user_ends_with", type: "String")\n  user_ends_with_nocase: String @source(subgraph: "uniswap", name: "user_ends_with_nocase", type: "String")\n  user_not_ends_with: String @source(subgraph: "uniswap", name: "user_not_ends_with", type: "String")\n  user_not_ends_with_nocase: String @source(subgraph: "uniswap", name: "user_not_ends_with_nocase", type: "String")\n  user_: User_filter @source(subgraph: "uniswap", name: "user_", type: "User_filter")\n  pair: String @source(subgraph: "uniswap", name: "pair", type: "String")\n  pair_not: String @source(subgraph: "uniswap", name: "pair_not", type: "String")\n  pair_gt: String @source(subgraph: "uniswap", name: "pair_gt", type: "String")\n  pair_lt: String @source(subgraph: "uniswap", name: "pair_lt", type: "String")\n  pair_gte: String @source(subgraph: "uniswap", name: "pair_gte", type: "String")\n  pair_lte: String @source(subgraph: "uniswap", name: "pair_lte", type: "String")\n  pair_in: [String!] @source(subgraph: "uniswap", name: "pair_in", type: "[String!]")\n  pair_not_in: [String!] @source(subgraph: "uniswap", name: "pair_not_in", type: "[String!]")\n  pair_contains: String @source(subgraph: "uniswap", name: "pair_contains", type: "String")\n  pair_contains_nocase: String @source(subgraph: "uniswap", name: "pair_contains_nocase", type: "String")\n  pair_not_contains: String @source(subgraph: "uniswap", name: "pair_not_contains", type: "String")\n  pair_not_contains_nocase: String @source(subgraph: "uniswap", name: "pair_not_contains_nocase", type: "String")\n  pair_starts_with: String @source(subgraph: "uniswap", name: "pair_starts_with", type: "String")\n  pair_starts_with_nocase: String @source(subgraph: "uniswap", name: "pair_starts_with_nocase", type: "String")\n  pair_not_starts_with: String @source(subgraph: "uniswap", name: "pair_not_starts_with", type: "String")\n  pair_not_starts_with_nocase: String @source(subgraph: "uniswap", name: "pair_not_starts_with_nocase", type: "String")\n  pair_ends_with: String @source(subgraph: "uniswap", name: "pair_ends_with", type: "String")\n  pair_ends_with_nocase: String @source(subgraph: "uniswap", name: "pair_ends_with_nocase", type: "String")\n  pair_not_ends_with: String @source(subgraph: "uniswap", name: "pair_not_ends_with", type: "String")\n  pair_not_ends_with_nocase: String @source(subgraph: "uniswap", name: "pair_not_ends_with_nocase", type: "String")\n  pair_: Pair_filter @source(subgraph: "uniswap", name: "pair_", type: "Pair_filter")\n  liquidityTokenBalance: BigDecimal @source(subgraph: "uniswap", name: "liquidityTokenBalance", type: "BigDecimal")\n  liquidityTokenBalance_not: BigDecimal @source(subgraph: "uniswap", name: "liquidityTokenBalance_not", type: "BigDecimal")\n  liquidityTokenBalance_gt: BigDecimal @source(subgraph: "uniswap", name: "liquidityTokenBalance_gt", type: "BigDecimal")\n  liquidityTokenBalance_lt: BigDecimal @source(subgraph: "uniswap", name: "liquidityTokenBalance_lt", type: "BigDecimal")\n  liquidityTokenBalance_gte: BigDecimal @source(subgraph: "uniswap", name: "liquidityTokenBalance_gte", type: "BigDecimal")\n  liquidityTokenBalance_lte: BigDecimal @source(subgraph: "uniswap", name: "liquidityTokenBalance_lte", type: "BigDecimal")\n  liquidityTokenBalance_in: [BigDecimal!] @source(subgraph: "uniswap", name: "liquidityTokenBalance_in", type: "[BigDecimal!]")\n  liquidityTokenBalance_not_in: [BigDecimal!] @source(subgraph: "uniswap", name: "liquidityTokenBalance_not_in", type: "[BigDecimal!]")\n  """Filter for the block changed event."""\n  _change_block: BlockChangedFilter @source(subgraph: "uniswap", name: "_change_block", type: "BlockChangedFilter")\n  and: [LiquidityPosition_filter] @source(subgraph: "uniswap", name: "and", type: "[LiquidityPosition_filter]")\n  or: [LiquidityPosition_filter] @source(subgraph: "uniswap", name: "or", type: "[LiquidityPosition_filter]")\n}\n\nenum LiquidityPosition_orderBy @source(subgraph: "uniswap", name: "LiquidityPosition_orderBy") {\n  id @source(subgraph: "uniswap", name: "id")\n  user @source(subgraph: "uniswap", name: "user")\n  user__id @source(subgraph: "uniswap", name: "user__id")\n  user__usdSwapped @source(subgraph: "uniswap", name: "user__usdSwapped")\n  pair @source(subgraph: "uniswap", name: "pair")\n  pair__id @source(subgraph: "uniswap", name: "pair__id")\n  pair__reserve0 @source(subgraph: "uniswap", name: "pair__reserve0")\n  pair__reserve1 @source(subgraph: "uniswap", name: "pair__reserve1")\n  pair__totalSupply @source(subgraph: "uniswap", name: "pair__totalSupply")\n  pair__reserveETH @source(subgraph: "uniswap", name: "pair__reserveETH")\n  pair__reserveUSD @source(subgraph: "uniswap", name: "pair__reserveUSD")\n  pair__trackedReserveETH @source(subgraph: "uniswap", name: "pair__trackedReserveETH")\n  pair__token0Price @source(subgraph: "uniswap", name: "pair__token0Price")\n  pair__token1Price @source(subgraph: "uniswap", name: "pair__token1Price")\n  pair__volumeToken0 @source(subgraph: "uniswap", name: "pair__volumeToken0")\n  pair__volumeToken1 @source(subgraph: "uniswap", name: "pair__volumeToken1")\n  pair__volumeUSD @source(subgraph: "uniswap", name: "pair__volumeUSD")\n  pair__untrackedVolumeUSD @source(subgraph: "uniswap", name: "pair__untrackedVolumeUSD")\n  pair__txCount @source(subgraph: "uniswap", name: "pair__txCount")\n  pair__createdAtTimestamp @source(subgraph: "uniswap", name: "pair__createdAtTimestamp")\n  pair__createdAtBlockNumber @source(subgraph: "uniswap", name: "pair__createdAtBlockNumber")\n  pair__liquidityProviderCount @source(subgraph: "uniswap", name: "pair__liquidityProviderCount")\n  liquidityTokenBalance @source(subgraph: "uniswap", name: "liquidityTokenBalance")\n}\n\ntype Mint @source(subgraph: "uniswap", name: "Mint") @resolver(subgraph: "uniswap", operation: "query MintById($Mint_id: ID!) { mint(id: $Mint_id) }", kind: "FETCH") @resolver(subgraph: "uniswap", operation: "query GetMintById($Mint_id: ID!) { mints(where: { id: $Mint_id) } }", kind: "FETCH") @resolver(subgraph: "uniswap", operation: "query GetMintsByIds($Mint_id: [ID!]!) { mints(where: { id_in: $Mint_id }) }", kind: "BATCH") @variable(subgraph: "uniswap", name: "Mint_id", select: "id") {\n  id: ID! @source(subgraph: "uniswap", name: "id", type: "ID!")\n  transaction: Transaction! @source(subgraph: "uniswap", name: "transaction", type: "Transaction!")\n  timestamp: BigInt! @source(subgraph: "uniswap", name: "timestamp", type: "BigInt!")\n  pair: Pair! @source(subgraph: "uniswap", name: "pair", type: "Pair!")\n  to: Bytes! @source(subgraph: "uniswap", name: "to", type: "Bytes!")\n  liquidity: BigDecimal! @source(subgraph: "uniswap", name: "liquidity", type: "BigDecimal!")\n  sender: Bytes @source(subgraph: "uniswap", name: "sender", type: "Bytes")\n  amount0: BigDecimal @source(subgraph: "uniswap", name: "amount0", type: "BigDecimal")\n  amount1: BigDecimal @source(subgraph: "uniswap", name: "amount1", type: "BigDecimal")\n  logIndex: BigInt @source(subgraph: "uniswap", name: "logIndex", type: "BigInt")\n  amountUSD: BigDecimal @source(subgraph: "uniswap", name: "amountUSD", type: "BigDecimal")\n  feeTo: Bytes @source(subgraph: "uniswap", name: "feeTo", type: "Bytes")\n  feeLiquidity: BigDecimal @source(subgraph: "uniswap", name: "feeLiquidity", type: "BigDecimal")\n}\n\ninput Mint_filter @source(subgraph: "uniswap", name: "Mint_filter") {\n  id: ID @source(subgraph: "uniswap", name: "id", type: "ID")\n  id_not: ID @source(subgraph: "uniswap", name: "id_not", type: "ID")\n  id_gt: ID @source(subgraph: "uniswap", name: "id_gt", type: "ID")\n  id_lt: ID @source(subgraph: "uniswap", name: "id_lt", type: "ID")\n  id_gte: ID @source(subgraph: "uniswap", name: "id_gte", type: "ID")\n  id_lte: ID @source(subgraph: "uniswap", name: "id_lte", type: "ID")\n  id_in: [ID!] @source(subgraph: "uniswap", name: "id_in", type: "[ID!]")\n  id_not_in: [ID!] @source(subgraph: "uniswap", name: "id_not_in", type: "[ID!]")\n  transaction: String @source(subgraph: "uniswap", name: "transaction", type: "String")\n  transaction_not: String @source(subgraph: "uniswap", name: "transaction_not", type: "String")\n  transaction_gt: String @source(subgraph: "uniswap", name: "transaction_gt", type: "String")\n  transaction_lt: String @source(subgraph: "uniswap", name: "transaction_lt", type: "String")\n  transaction_gte: String @source(subgraph: "uniswap", name: "transaction_gte", type: "String")\n  transaction_lte: String @source(subgraph: "uniswap", name: "transaction_lte", type: "String")\n  transaction_in: [String!] @source(subgraph: "uniswap", name: "transaction_in", type: "[String!]")\n  transaction_not_in: [String!] @source(subgraph: "uniswap", name: "transaction_not_in", type: "[String!]")\n  transaction_contains: String @source(subgraph: "uniswap", name: "transaction_contains", type: "String")\n  transaction_contains_nocase: String @source(subgraph: "uniswap", name: "transaction_contains_nocase", type: "String")\n  transaction_not_contains: String @source(subgraph: "uniswap", name: "transaction_not_contains", type: "String")\n  transaction_not_contains_nocase: String @source(subgraph: "uniswap", name: "transaction_not_contains_nocase", type: "String")\n  transaction_starts_with: String @source(subgraph: "uniswap", name: "transaction_starts_with", type: "String")\n  transaction_starts_with_nocase: String @source(subgraph: "uniswap", name: "transaction_starts_with_nocase", type: "String")\n  transaction_not_starts_with: String @source(subgraph: "uniswap", name: "transaction_not_starts_with", type: "String")\n  transaction_not_starts_with_nocase: String @source(subgraph: "uniswap", name: "transaction_not_starts_with_nocase", type: "String")\n  transaction_ends_with: String @source(subgraph: "uniswap", name: "transaction_ends_with", type: "String")\n  transaction_ends_with_nocase: String @source(subgraph: "uniswap", name: "transaction_ends_with_nocase", type: "String")\n  transaction_not_ends_with: String @source(subgraph: "uniswap", name: "transaction_not_ends_with", type: "String")\n  transaction_not_ends_with_nocase: String @source(subgraph: "uniswap", name: "transaction_not_ends_with_nocase", type: "String")\n  transaction_: Transaction_filter @source(subgraph: "uniswap", name: "transaction_", type: "Transaction_filter")\n  timestamp: BigInt @source(subgraph: "uniswap", name: "timestamp", type: "BigInt")\n  timestamp_not: BigInt @source(subgraph: "uniswap", name: "timestamp_not", type: "BigInt")\n  timestamp_gt: BigInt @source(subgraph: "uniswap", name: "timestamp_gt", type: "BigInt")\n  timestamp_lt: BigInt @source(subgraph: "uniswap", name: "timestamp_lt", type: "BigInt")\n  timestamp_gte: BigInt @source(subgraph: "uniswap", name: "timestamp_gte", type: "BigInt")\n  timestamp_lte: BigInt @source(subgraph: "uniswap", name: "timestamp_lte", type: "BigInt")\n  timestamp_in: [BigInt!] @source(subgraph: "uniswap", name: "timestamp_in", type: "[BigInt!]")\n  timestamp_not_in: [BigInt!] @source(subgraph: "uniswap", name: "timestamp_not_in", type: "[BigInt!]")\n  pair: String @source(subgraph: "uniswap", name: "pair", type: "String")\n  pair_not: String @source(subgraph: "uniswap", name: "pair_not", type: "String")\n  pair_gt: String @source(subgraph: "uniswap", name: "pair_gt", type: "String")\n  pair_lt: String @source(subgraph: "uniswap", name: "pair_lt", type: "String")\n  pair_gte: String @source(subgraph: "uniswap", name: "pair_gte", type: "String")\n  pair_lte: String @source(subgraph: "uniswap", name: "pair_lte", type: "String")\n  pair_in: [String!] @source(subgraph: "uniswap", name: "pair_in", type: "[String!]")\n  pair_not_in: [String!] @source(subgraph: "uniswap", name: "pair_not_in", type: "[String!]")\n  pair_contains: String @source(subgraph: "uniswap", name: "pair_contains", type: "String")\n  pair_contains_nocase: String @source(subgraph: "uniswap", name: "pair_contains_nocase", type: "String")\n  pair_not_contains: String @source(subgraph: "uniswap", name: "pair_not_contains", type: "String")\n  pair_not_contains_nocase: String @source(subgraph: "uniswap", name: "pair_not_contains_nocase", type: "String")\n  pair_starts_with: String @source(subgraph: "uniswap", name: "pair_starts_with", type: "String")\n  pair_starts_with_nocase: String @source(subgraph: "uniswap", name: "pair_starts_with_nocase", type: "String")\n  pair_not_starts_with: String @source(subgraph: "uniswap", name: "pair_not_starts_with", type: "String")\n  pair_not_starts_with_nocase: String @source(subgraph: "uniswap", name: "pair_not_starts_with_nocase", type: "String")\n  pair_ends_with: String @source(subgraph: "uniswap", name: "pair_ends_with", type: "String")\n  pair_ends_with_nocase: String @source(subgraph: "uniswap", name: "pair_ends_with_nocase", type: "String")\n  pair_not_ends_with: String @source(subgraph: "uniswap", name: "pair_not_ends_with", type: "String")\n  pair_not_ends_with_nocase: String @source(subgraph: "uniswap", name: "pair_not_ends_with_nocase", type: "String")\n  pair_: Pair_filter @source(subgraph: "uniswap", name: "pair_", type: "Pair_filter")\n  to: Bytes @source(subgraph: "uniswap", name: "to", type: "Bytes")\n  to_not: Bytes @source(subgraph: "uniswap", name: "to_not", type: "Bytes")\n  to_gt: Bytes @source(subgraph: "uniswap", name: "to_gt", type: "Bytes")\n  to_lt: Bytes @source(subgraph: "uniswap", name: "to_lt", type: "Bytes")\n  to_gte: Bytes @source(subgraph: "uniswap", name: "to_gte", type: "Bytes")\n  to_lte: Bytes @source(subgraph: "uniswap", name: "to_lte", type: "Bytes")\n  to_in: [Bytes!] @source(subgraph: "uniswap", name: "to_in", type: "[Bytes!]")\n  to_not_in: [Bytes!] @source(subgraph: "uniswap", name: "to_not_in", type: "[Bytes!]")\n  to_contains: Bytes @source(subgraph: "uniswap", name: "to_contains", type: "Bytes")\n  to_not_contains: Bytes @source(subgraph: "uniswap", name: "to_not_contains", type: "Bytes")\n  liquidity: BigDecimal @source(subgraph: "uniswap", name: "liquidity", type: "BigDecimal")\n  liquidity_not: BigDecimal @source(subgraph: "uniswap", name: "liquidity_not", type: "BigDecimal")\n  liquidity_gt: BigDecimal @source(subgraph: "uniswap", name: "liquidity_gt", type: "BigDecimal")\n  liquidity_lt: BigDecimal @source(subgraph: "uniswap", name: "liquidity_lt", type: "BigDecimal")\n  liquidity_gte: BigDecimal @source(subgraph: "uniswap", name: "liquidity_gte", type: "BigDecimal")\n  liquidity_lte: BigDecimal @source(subgraph: "uniswap", name: "liquidity_lte", type: "BigDecimal")\n  liquidity_in: [BigDecimal!] @source(subgraph: "uniswap", name: "liquidity_in", type: "[BigDecimal!]")\n  liquidity_not_in: [BigDecimal!] @source(subgraph: "uniswap", name: "liquidity_not_in", type: "[BigDecimal!]")\n  sender: Bytes @source(subgraph: "uniswap", name: "sender", type: "Bytes")\n  sender_not: Bytes @source(subgraph: "uniswap", name: "sender_not", type: "Bytes")\n  sender_gt: Bytes @source(subgraph: "uniswap", name: "sender_gt", type: "Bytes")\n  sender_lt: Bytes @source(subgraph: "uniswap", name: "sender_lt", type: "Bytes")\n  sender_gte: Bytes @source(subgraph: "uniswap", name: "sender_gte", type: "Bytes")\n  sender_lte: Bytes @source(subgraph: "uniswap", name: "sender_lte", type: "Bytes")\n  sender_in: [Bytes!] @source(subgraph: "uniswap", name: "sender_in", type: "[Bytes!]")\n  sender_not_in: [Bytes!] @source(subgraph: "uniswap", name: "sender_not_in", type: "[Bytes!]")\n  sender_contains: Bytes @source(subgraph: "uniswap", name: "sender_contains", type: "Bytes")\n  sender_not_contains: Bytes @source(subgraph: "uniswap", name: "sender_not_contains", type: "Bytes")\n  amount0: BigDecimal @source(subgraph: "uniswap", name: "amount0", type: "BigDecimal")\n  amount0_not: BigDecimal @source(subgraph: "uniswap", name: "amount0_not", type: "BigDecimal")\n  amount0_gt: BigDecimal @source(subgraph: "uniswap", name: "amount0_gt", type: "BigDecimal")\n  amount0_lt: BigDecimal @source(subgraph: "uniswap", name: "amount0_lt", type: "BigDecimal")\n  amount0_gte: BigDecimal @source(subgraph: "uniswap", name: "amount0_gte", type: "BigDecimal")\n  amount0_lte: BigDecimal @source(subgraph: "uniswap", name: "amount0_lte", type: "BigDecimal")\n  amount0_in: [BigDecimal!] @source(subgraph: "uniswap", name: "amount0_in", type: "[BigDecimal!]")\n  amount0_not_in: [BigDecimal!] @source(subgraph: "uniswap", name: "amount0_not_in", type: "[BigDecimal!]")\n  amount1: BigDecimal @source(subgraph: "uniswap", name: "amount1", type: "BigDecimal")\n  amount1_not: BigDecimal @source(subgraph: "uniswap", name: "amount1_not", type: "BigDecimal")\n  amount1_gt: BigDecimal @source(subgraph: "uniswap", name: "amount1_gt", type: "BigDecimal")\n  amount1_lt: BigDecimal @source(subgraph: "uniswap", name: "amount1_lt", type: "BigDecimal")\n  amount1_gte: BigDecimal @source(subgraph: "uniswap", name: "amount1_gte", type: "BigDecimal")\n  amount1_lte: BigDecimal @source(subgraph: "uniswap", name: "amount1_lte", type: "BigDecimal")\n  amount1_in: [BigDecimal!] @source(subgraph: "uniswap", name: "amount1_in", type: "[BigDecimal!]")\n  amount1_not_in: [BigDecimal!] @source(subgraph: "uniswap", name: "amount1_not_in", type: "[BigDecimal!]")\n  logIndex: BigInt @source(subgraph: "uniswap", name: "logIndex", type: "BigInt")\n  logIndex_not: BigInt @source(subgraph: "uniswap", name: "logIndex_not", type: "BigInt")\n  logIndex_gt: BigInt @source(subgraph: "uniswap", name: "logIndex_gt", type: "BigInt")\n  logIndex_lt: BigInt @source(subgraph: "uniswap", name: "logIndex_lt", type: "BigInt")\n  logIndex_gte: BigInt @source(subgraph: "uniswap", name: "logIndex_gte", type: "BigInt")\n  logIndex_lte: BigInt @source(subgraph: "uniswap", name: "logIndex_lte", type: "BigInt")\n  logIndex_in: [BigInt!] @source(subgraph: "uniswap", name: "logIndex_in", type: "[BigInt!]")\n  logIndex_not_in: [BigInt!] @source(subgraph: "uniswap", name: "logIndex_not_in", type: "[BigInt!]")\n  amountUSD: BigDecimal @source(subgraph: "uniswap", name: "amountUSD", type: "BigDecimal")\n  amountUSD_not: BigDecimal @source(subgraph: "uniswap", name: "amountUSD_not", type: "BigDecimal")\n  amountUSD_gt: BigDecimal @source(subgraph: "uniswap", name: "amountUSD_gt", type: "BigDecimal")\n  amountUSD_lt: BigDecimal @source(subgraph: "uniswap", name: "amountUSD_lt", type: "BigDecimal")\n  amountUSD_gte: BigDecimal @source(subgraph: "uniswap", name: "amountUSD_gte", type: "BigDecimal")\n  amountUSD_lte: BigDecimal @source(subgraph: "uniswap", name: "amountUSD_lte", type: "BigDecimal")\n  amountUSD_in: [BigDecimal!] @source(subgraph: "uniswap", name: "amountUSD_in", type: "[BigDecimal!]")\n  amountUSD_not_in: [BigDecimal!] @source(subgraph: "uniswap", name: "amountUSD_not_in", type: "[BigDecimal!]")\n  feeTo: Bytes @source(subgraph: "uniswap", name: "feeTo", type: "Bytes")\n  feeTo_not: Bytes @source(subgraph: "uniswap", name: "feeTo_not", type: "Bytes")\n  feeTo_gt: Bytes @source(subgraph: "uniswap", name: "feeTo_gt", type: "Bytes")\n  feeTo_lt: Bytes @source(subgraph: "uniswap", name: "feeTo_lt", type: "Bytes")\n  feeTo_gte: Bytes @source(subgraph: "uniswap", name: "feeTo_gte", type: "Bytes")\n  feeTo_lte: Bytes @source(subgraph: "uniswap", name: "feeTo_lte", type: "Bytes")\n  feeTo_in: [Bytes!] @source(subgraph: "uniswap", name: "feeTo_in", type: "[Bytes!]")\n  feeTo_not_in: [Bytes!] @source(subgraph: "uniswap", name: "feeTo_not_in", type: "[Bytes!]")\n  feeTo_contains: Bytes @source(subgraph: "uniswap", name: "feeTo_contains", type: "Bytes")\n  feeTo_not_contains: Bytes @source(subgraph: "uniswap", name: "feeTo_not_contains", type: "Bytes")\n  feeLiquidity: BigDecimal @source(subgraph: "uniswap", name: "feeLiquidity", type: "BigDecimal")\n  feeLiquidity_not: BigDecimal @source(subgraph: "uniswap", name: "feeLiquidity_not", type: "BigDecimal")\n  feeLiquidity_gt: BigDecimal @source(subgraph: "uniswap", name: "feeLiquidity_gt", type: "BigDecimal")\n  feeLiquidity_lt: BigDecimal @source(subgraph: "uniswap", name: "feeLiquidity_lt", type: "BigDecimal")\n  feeLiquidity_gte: BigDecimal @source(subgraph: "uniswap", name: "feeLiquidity_gte", type: "BigDecimal")\n  feeLiquidity_lte: BigDecimal @source(subgraph: "uniswap", name: "feeLiquidity_lte", type: "BigDecimal")\n  feeLiquidity_in: [BigDecimal!] @source(subgraph: "uniswap", name: "feeLiquidity_in", type: "[BigDecimal!]")\n  feeLiquidity_not_in: [BigDecimal!] @source(subgraph: "uniswap", name: "feeLiquidity_not_in", type: "[BigDecimal!]")\n  """Filter for the block changed event."""\n  _change_block: BlockChangedFilter @source(subgraph: "uniswap", name: "_change_block", type: "BlockChangedFilter")\n  and: [Mint_filter] @source(subgraph: "uniswap", name: "and", type: "[Mint_filter]")\n  or: [Mint_filter] @source(subgraph: "uniswap", name: "or", type: "[Mint_filter]")\n}\n\nenum Mint_orderBy @source(subgraph: "uniswap", name: "Mint_orderBy") {\n  id @source(subgraph: "uniswap", name: "id")\n  transaction @source(subgraph: "uniswap", name: "transaction")\n  transaction__id @source(subgraph: "uniswap", name: "transaction__id")\n  transaction__blockNumber @source(subgraph: "uniswap", name: "transaction__blockNumber")\n  transaction__timestamp @source(subgraph: "uniswap", name: "transaction__timestamp")\n  timestamp @source(subgraph: "uniswap", name: "timestamp")\n  pair @source(subgraph: "uniswap", name: "pair")\n  pair__id @source(subgraph: "uniswap", name: "pair__id")\n  pair__reserve0 @source(subgraph: "uniswap", name: "pair__reserve0")\n  pair__reserve1 @source(subgraph: "uniswap", name: "pair__reserve1")\n  pair__totalSupply @source(subgraph: "uniswap", name: "pair__totalSupply")\n  pair__reserveETH @source(subgraph: "uniswap", name: "pair__reserveETH")\n  pair__reserveUSD @source(subgraph: "uniswap", name: "pair__reserveUSD")\n  pair__trackedReserveETH @source(subgraph: "uniswap", name: "pair__trackedReserveETH")\n  pair__token0Price @source(subgraph: "uniswap", name: "pair__token0Price")\n  pair__token1Price @source(subgraph: "uniswap", name: "pair__token1Price")\n  pair__volumeToken0 @source(subgraph: "uniswap", name: "pair__volumeToken0")\n  pair__volumeToken1 @source(subgraph: "uniswap", name: "pair__volumeToken1")\n  pair__volumeUSD @source(subgraph: "uniswap", name: "pair__volumeUSD")\n  pair__untrackedVolumeUSD @source(subgraph: "uniswap", name: "pair__untrackedVolumeUSD")\n  pair__txCount @source(subgraph: "uniswap", name: "pair__txCount")\n  pair__createdAtTimestamp @source(subgraph: "uniswap", name: "pair__createdAtTimestamp")\n  pair__createdAtBlockNumber @source(subgraph: "uniswap", name: "pair__createdAtBlockNumber")\n  pair__liquidityProviderCount @source(subgraph: "uniswap", name: "pair__liquidityProviderCount")\n  to @source(subgraph: "uniswap", name: "to")\n  liquidity @source(subgraph: "uniswap", name: "liquidity")\n  sender @source(subgraph: "uniswap", name: "sender")\n  amount0 @source(subgraph: "uniswap", name: "amount0")\n  amount1 @source(subgraph: "uniswap", name: "amount1")\n  logIndex @source(subgraph: "uniswap", name: "logIndex")\n  amountUSD @source(subgraph: "uniswap", name: "amountUSD")\n  feeTo @source(subgraph: "uniswap", name: "feeTo")\n  feeLiquidity @source(subgraph: "uniswap", name: "feeLiquidity")\n}\n\ntype Pair @source(subgraph: "uniswap", name: "Pair") @resolver(subgraph: "uniswap", operation: "query PairById($Pair_id: ID!) { pair(id: $Pair_id) }", kind: "FETCH") @resolver(subgraph: "uniswap", operation: "query GetPairById($Pair_id: ID!) { pairs(where: { id: $Pair_id) } }", kind: "FETCH") @resolver(subgraph: "uniswap", operation: "query GetPairsByIds($Pair_id: [ID!]!) { pairs(where: { id_in: $Pair_id }) }", kind: "BATCH") @variable(subgraph: "uniswap", name: "Pair_id", select: "id") {\n  id: ID! @source(subgraph: "uniswap", name: "id", type: "ID!")\n  token0: Token! @source(subgraph: "uniswap", name: "token0", type: "Token!")\n  token1: Token! @source(subgraph: "uniswap", name: "token1", type: "Token!")\n  reserve0: BigDecimal! @source(subgraph: "uniswap", name: "reserve0", type: "BigDecimal!")\n  reserve1: BigDecimal! @source(subgraph: "uniswap", name: "reserve1", type: "BigDecimal!")\n  totalSupply: BigDecimal! @source(subgraph: "uniswap", name: "totalSupply", type: "BigDecimal!")\n  reserveETH: BigDecimal! @source(subgraph: "uniswap", name: "reserveETH", type: "BigDecimal!")\n  reserveUSD: BigDecimal! @source(subgraph: "uniswap", name: "reserveUSD", type: "BigDecimal!")\n  trackedReserveETH: BigDecimal! @source(subgraph: "uniswap", name: "trackedReserveETH", type: "BigDecimal!")\n  token0Price: BigDecimal! @source(subgraph: "uniswap", name: "token0Price", type: "BigDecimal!")\n  token1Price: BigDecimal! @source(subgraph: "uniswap", name: "token1Price", type: "BigDecimal!")\n  volumeToken0: BigDecimal! @source(subgraph: "uniswap", name: "volumeToken0", type: "BigDecimal!")\n  volumeToken1: BigDecimal! @source(subgraph: "uniswap", name: "volumeToken1", type: "BigDecimal!")\n  volumeUSD: BigDecimal! @source(subgraph: "uniswap", name: "volumeUSD", type: "BigDecimal!")\n  untrackedVolumeUSD: BigDecimal! @source(subgraph: "uniswap", name: "untrackedVolumeUSD", type: "BigDecimal!")\n  txCount: BigInt! @source(subgraph: "uniswap", name: "txCount", type: "BigInt!")\n  createdAtTimestamp: BigInt! @source(subgraph: "uniswap", name: "createdAtTimestamp", type: "BigInt!")\n  createdAtBlockNumber: BigInt! @source(subgraph: "uniswap", name: "createdAtBlockNumber", type: "BigInt!")\n  liquidityProviderCount: BigInt! @source(subgraph: "uniswap", name: "liquidityProviderCount", type: "BigInt!")\n  pairHourData(skip: Int = 0, first: Int = 100, orderBy: PairHourData_orderBy, orderDirection: OrderDirection, where: PairHourData_filter): [PairHourData!]! @source(subgraph: "uniswap", name: "pairHourData", type: "[PairHourData!]!")\n  liquidityPositions(skip: Int = 0, first: Int = 100, orderBy: LiquidityPosition_orderBy, orderDirection: OrderDirection, where: LiquidityPosition_filter): [LiquidityPosition!]! @source(subgraph: "uniswap", name: "liquidityPositions", type: "[LiquidityPosition!]!")\n  liquidityPositionSnapshots(skip: Int = 0, first: Int = 100, orderBy: LiquidityPositionSnapshot_orderBy, orderDirection: OrderDirection, where: LiquidityPositionSnapshot_filter): [LiquidityPositionSnapshot!]! @source(subgraph: "uniswap", name: "liquidityPositionSnapshots", type: "[LiquidityPositionSnapshot!]!")\n  mints(skip: Int = 0, first: Int = 100, orderBy: Mint_orderBy, orderDirection: OrderDirection, where: Mint_filter): [Mint!]! @source(subgraph: "uniswap", name: "mints", type: "[Mint!]!")\n  burns(skip: Int = 0, first: Int = 100, orderBy: Burn_orderBy, orderDirection: OrderDirection, where: Burn_filter): [Burn!]! @source(subgraph: "uniswap", name: "burns", type: "[Burn!]!")\n  swaps(skip: Int = 0, first: Int = 100, orderBy: Swap_orderBy, orderDirection: OrderDirection, where: Swap_filter): [Swap!]! @source(subgraph: "uniswap", name: "swaps", type: "[Swap!]!")\n}\n\ntype PairDayData @source(subgraph: "uniswap", name: "PairDayData") @resolver(subgraph: "uniswap", operation: "query PairDayDataById($PairDayData_id: ID!) { pairDayData(id: $PairDayData_id) }", kind: "FETCH") @resolver(subgraph: "uniswap", operation: "query GetPairDayDataById($PairDayData_id: ID!) { pairDayDatas(where: { id: $PairDayData_id) } }", kind: "FETCH") @resolver(subgraph: "uniswap", operation: "query GetPairDayDataByIds($PairDayData_id: [ID!]!) { pairDayDatas(where: { id_in: $PairDayData_id }) }", kind: "BATCH") @variable(subgraph: "uniswap", name: "PairDayData_id", select: "id") {\n  id: ID! @source(subgraph: "uniswap", name: "id", type: "ID!")\n  date: Int! @source(subgraph: "uniswap", name: "date", type: "Int!")\n  pairAddress: Bytes! @source(subgraph: "uniswap", name: "pairAddress", type: "Bytes!")\n  token0: Token! @source(subgraph: "uniswap", name: "token0", type: "Token!")\n  token1: Token! @source(subgraph: "uniswap", name: "token1", type: "Token!")\n  reserve0: BigDecimal! @source(subgraph: "uniswap", name: "reserve0", type: "BigDecimal!")\n  reserve1: BigDecimal! @source(subgraph: "uniswap", name: "reserve1", type: "BigDecimal!")\n  totalSupply: BigDecimal @source(subgraph: "uniswap", name: "totalSupply", type: "BigDecimal")\n  reserveUSD: BigDecimal! @source(subgraph: "uniswap", name: "reserveUSD", type: "BigDecimal!")\n  dailyVolumeToken0: BigDecimal! @source(subgraph: "uniswap", name: "dailyVolumeToken0", type: "BigDecimal!")\n  dailyVolumeToken1: BigDecimal! @source(subgraph: "uniswap", name: "dailyVolumeToken1", type: "BigDecimal!")\n  dailyVolumeUSD: BigDecimal! @source(subgraph: "uniswap", name: "dailyVolumeUSD", type: "BigDecimal!")\n  dailyTxns: BigInt! @source(subgraph: "uniswap", name: "dailyTxns", type: "BigInt!")\n}\n\ninput PairDayData_filter @source(subgraph: "uniswap", name: "PairDayData_filter") {\n  id: ID @source(subgraph: "uniswap", name: "id", type: "ID")\n  id_not: ID @source(subgraph: "uniswap", name: "id_not", type: "ID")\n  id_gt: ID @source(subgraph: "uniswap", name: "id_gt", type: "ID")\n  id_lt: ID @source(subgraph: "uniswap", name: "id_lt", type: "ID")\n  id_gte: ID @source(subgraph: "uniswap", name: "id_gte", type: "ID")\n  id_lte: ID @source(subgraph: "uniswap", name: "id_lte", type: "ID")\n  id_in: [ID!] @source(subgraph: "uniswap", name: "id_in", type: "[ID!]")\n  id_not_in: [ID!] @source(subgraph: "uniswap", name: "id_not_in", type: "[ID!]")\n  date: Int @source(subgraph: "uniswap", name: "date", type: "Int")\n  date_not: Int @source(subgraph: "uniswap", name: "date_not", type: "Int")\n  date_gt: Int @source(subgraph: "uniswap", name: "date_gt", type: "Int")\n  date_lt: Int @source(subgraph: "uniswap", name: "date_lt", type: "Int")\n  date_gte: Int @source(subgraph: "uniswap", name: "date_gte", type: "Int")\n  date_lte: Int @source(subgraph: "uniswap", name: "date_lte", type: "Int")\n  date_in: [Int!] @source(subgraph: "uniswap", name: "date_in", type: "[Int!]")\n  date_not_in: [Int!] @source(subgraph: "uniswap", name: "date_not_in", type: "[Int!]")\n  pairAddress: Bytes @source(subgraph: "uniswap", name: "pairAddress", type: "Bytes")\n  pairAddress_not: Bytes @source(subgraph: "uniswap", name: "pairAddress_not", type: "Bytes")\n  pairAddress_gt: Bytes @source(subgraph: "uniswap", name: "pairAddress_gt", type: "Bytes")\n  pairAddress_lt: Bytes @source(subgraph: "uniswap", name: "pairAddress_lt", type: "Bytes")\n  pairAddress_gte: Bytes @source(subgraph: "uniswap", name: "pairAddress_gte", type: "Bytes")\n  pairAddress_lte: Bytes @source(subgraph: "uniswap", name: "pairAddress_lte", type: "Bytes")\n  pairAddress_in: [Bytes!] @source(subgraph: "uniswap", name: "pairAddress_in", type: "[Bytes!]")\n  pairAddress_not_in: [Bytes!] @source(subgraph: "uniswap", name: "pairAddress_not_in", type: "[Bytes!]")\n  pairAddress_contains: Bytes @source(subgraph: "uniswap", name: "pairAddress_contains", type: "Bytes")\n  pairAddress_not_contains: Bytes @source(subgraph: "uniswap", name: "pairAddress_not_contains", type: "Bytes")\n  token0: String @source(subgraph: "uniswap", name: "token0", type: "String")\n  token0_not: String @source(subgraph: "uniswap", name: "token0_not", type: "String")\n  token0_gt: String @source(subgraph: "uniswap", name: "token0_gt", type: "String")\n  token0_lt: String @source(subgraph: "uniswap", name: "token0_lt", type: "String")\n  token0_gte: String @source(subgraph: "uniswap", name: "token0_gte", type: "String")\n  token0_lte: String @source(subgraph: "uniswap", name: "token0_lte", type: "String")\n  token0_in: [String!] @source(subgraph: "uniswap", name: "token0_in", type: "[String!]")\n  token0_not_in: [String!] @source(subgraph: "uniswap", name: "token0_not_in", type: "[String!]")\n  token0_contains: String @source(subgraph: "uniswap", name: "token0_contains", type: "String")\n  token0_contains_nocase: String @source(subgraph: "uniswap", name: "token0_contains_nocase", type: "String")\n  token0_not_contains: String @source(subgraph: "uniswap", name: "token0_not_contains", type: "String")\n  token0_not_contains_nocase: String @source(subgraph: "uniswap", name: "token0_not_contains_nocase", type: "String")\n  token0_starts_with: String @source(subgraph: "uniswap", name: "token0_starts_with", type: "String")\n  token0_starts_with_nocase: String @source(subgraph: "uniswap", name: "token0_starts_with_nocase", type: "String")\n  token0_not_starts_with: String @source(subgraph: "uniswap", name: "token0_not_starts_with", type: "String")\n  token0_not_starts_with_nocase: String @source(subgraph: "uniswap", name: "token0_not_starts_with_nocase", type: "String")\n  token0_ends_with: String @source(subgraph: "uniswap", name: "token0_ends_with", type: "String")\n  token0_ends_with_nocase: String @source(subgraph: "uniswap", name: "token0_ends_with_nocase", type: "String")\n  token0_not_ends_with: String @source(subgraph: "uniswap", name: "token0_not_ends_with", type: "String")\n  token0_not_ends_with_nocase: String @source(subgraph: "uniswap", name: "token0_not_ends_with_nocase", type: "String")\n  token0_: Token_filter @source(subgraph: "uniswap", name: "token0_", type: "Token_filter")\n  token1: String @source(subgraph: "uniswap", name: "token1", type: "String")\n  token1_not: String @source(subgraph: "uniswap", name: "token1_not", type: "String")\n  token1_gt: String @source(subgraph: "uniswap", name: "token1_gt", type: "String")\n  token1_lt: String @source(subgraph: "uniswap", name: "token1_lt", type: "String")\n  token1_gte: String @source(subgraph: "uniswap", name: "token1_gte", type: "String")\n  token1_lte: String @source(subgraph: "uniswap", name: "token1_lte", type: "String")\n  token1_in: [String!] @source(subgraph: "uniswap", name: "token1_in", type: "[String!]")\n  token1_not_in: [String!] @source(subgraph: "uniswap", name: "token1_not_in", type: "[String!]")\n  token1_contains: String @source(subgraph: "uniswap", name: "token1_contains", type: "String")\n  token1_contains_nocase: String @source(subgraph: "uniswap", name: "token1_contains_nocase", type: "String")\n  token1_not_contains: String @source(subgraph: "uniswap", name: "token1_not_contains", type: "String")\n  token1_not_contains_nocase: String @source(subgraph: "uniswap", name: "token1_not_contains_nocase", type: "String")\n  token1_starts_with: String @source(subgraph: "uniswap", name: "token1_starts_with", type: "String")\n  token1_starts_with_nocase: String @source(subgraph: "uniswap", name: "token1_starts_with_nocase", type: "String")\n  token1_not_starts_with: String @source(subgraph: "uniswap", name: "token1_not_starts_with", type: "String")\n  token1_not_starts_with_nocase: String @source(subgraph: "uniswap", name: "token1_not_starts_with_nocase", type: "String")\n  token1_ends_with: String @source(subgraph: "uniswap", name: "token1_ends_with", type: "String")\n  token1_ends_with_nocase: String @source(subgraph: "uniswap", name: "token1_ends_with_nocase", type: "String")\n  token1_not_ends_with: String @source(subgraph: "uniswap", name: "token1_not_ends_with", type: "String")\n  token1_not_ends_with_nocase: String @source(subgraph: "uniswap", name: "token1_not_ends_with_nocase", type: "String")\n  token1_: Token_filter @source(subgraph: "uniswap", name: "token1_", type: "Token_filter")\n  reserve0: BigDecimal @source(subgraph: "uniswap", name: "reserve0", type: "BigDecimal")\n  reserve0_not: BigDecimal @source(subgraph: "uniswap", name: "reserve0_not", type: "BigDecimal")\n  reserve0_gt: BigDecimal @source(subgraph: "uniswap", name: "reserve0_gt", type: "BigDecimal")\n  reserve0_lt: BigDecimal @source(subgraph: "uniswap", name: "reserve0_lt", type: "BigDecimal")\n  reserve0_gte: BigDecimal @source(subgraph: "uniswap", name: "reserve0_gte", type: "BigDecimal")\n  reserve0_lte: BigDecimal @source(subgraph: "uniswap", name: "reserve0_lte", type: "BigDecimal")\n  reserve0_in: [BigDecimal!] @source(subgraph: "uniswap", name: "reserve0_in", type: "[BigDecimal!]")\n  reserve0_not_in: [BigDecimal!] @source(subgraph: "uniswap", name: "reserve0_not_in", type: "[BigDecimal!]")\n  reserve1: BigDecimal @source(subgraph: "uniswap", name: "reserve1", type: "BigDecimal")\n  reserve1_not: BigDecimal @source(subgraph: "uniswap", name: "reserve1_not", type: "BigDecimal")\n  reserve1_gt: BigDecimal @source(subgraph: "uniswap", name: "reserve1_gt", type: "BigDecimal")\n  reserve1_lt: BigDecimal @source(subgraph: "uniswap", name: "reserve1_lt", type: "BigDecimal")\n  reserve1_gte: BigDecimal @source(subgraph: "uniswap", name: "reserve1_gte", type: "BigDecimal")\n  reserve1_lte: BigDecimal @source(subgraph: "uniswap", name: "reserve1_lte", type: "BigDecimal")\n  reserve1_in: [BigDecimal!] @source(subgraph: "uniswap", name: "reserve1_in", type: "[BigDecimal!]")\n  reserve1_not_in: [BigDecimal!] @source(subgraph: "uniswap", name: "reserve1_not_in", type: "[BigDecimal!]")\n  totalSupply: BigDecimal @source(subgraph: "uniswap", name: "totalSupply", type: "BigDecimal")\n  totalSupply_not: BigDecimal @source(subgraph: "uniswap", name: "totalSupply_not", type: "BigDecimal")\n  totalSupply_gt: BigDecimal @source(subgraph: "uniswap", name: "totalSupply_gt", type: "BigDecimal")\n  totalSupply_lt: BigDecimal @source(subgraph: "uniswap", name: "totalSupply_lt", type: "BigDecimal")\n  totalSupply_gte: BigDecimal @source(subgraph: "uniswap", name: "totalSupply_gte", type: "BigDecimal")\n  totalSupply_lte: BigDecimal @source(subgraph: "uniswap", name: "totalSupply_lte", type: "BigDecimal")\n  totalSupply_in: [BigDecimal!] @source(subgraph: "uniswap", name: "totalSupply_in", type: "[BigDecimal!]")\n  totalSupply_not_in: [BigDecimal!] @source(subgraph: "uniswap", name: "totalSupply_not_in", type: "[BigDecimal!]")\n  reserveUSD: BigDecimal @source(subgraph: "uniswap", name: "reserveUSD", type: "BigDecimal")\n  reserveUSD_not: BigDecimal @source(subgraph: "uniswap", name: "reserveUSD_not", type: "BigDecimal")\n  reserveUSD_gt: BigDecimal @source(subgraph: "uniswap", name: "reserveUSD_gt", type: "BigDecimal")\n  reserveUSD_lt: BigDecimal @source(subgraph: "uniswap", name: "reserveUSD_lt", type: "BigDecimal")\n  reserveUSD_gte: BigDecimal @source(subgraph: "uniswap", name: "reserveUSD_gte", type: "BigDecimal")\n  reserveUSD_lte: BigDecimal @source(subgraph: "uniswap", name: "reserveUSD_lte", type: "BigDecimal")\n  reserveUSD_in: [BigDecimal!] @source(subgraph: "uniswap", name: "reserveUSD_in", type: "[BigDecimal!]")\n  reserveUSD_not_in: [BigDecimal!] @source(subgraph: "uniswap", name: "reserveUSD_not_in", type: "[BigDecimal!]")\n  dailyVolumeToken0: BigDecimal @source(subgraph: "uniswap", name: "dailyVolumeToken0", type: "BigDecimal")\n  dailyVolumeToken0_not: BigDecimal @source(subgraph: "uniswap", name: "dailyVolumeToken0_not", type: "BigDecimal")\n  dailyVolumeToken0_gt: BigDecimal @source(subgraph: "uniswap", name: "dailyVolumeToken0_gt", type: "BigDecimal")\n  dailyVolumeToken0_lt: BigDecimal @source(subgraph: "uniswap", name: "dailyVolumeToken0_lt", type: "BigDecimal")\n  dailyVolumeToken0_gte: BigDecimal @source(subgraph: "uniswap", name: "dailyVolumeToken0_gte", type: "BigDecimal")\n  dailyVolumeToken0_lte: BigDecimal @source(subgraph: "uniswap", name: "dailyVolumeToken0_lte", type: "BigDecimal")\n  dailyVolumeToken0_in: [BigDecimal!] @source(subgraph: "uniswap", name: "dailyVolumeToken0_in", type: "[BigDecimal!]")\n  dailyVolumeToken0_not_in: [BigDecimal!] @source(subgraph: "uniswap", name: "dailyVolumeToken0_not_in", type: "[BigDecimal!]")\n  dailyVolumeToken1: BigDecimal @source(subgraph: "uniswap", name: "dailyVolumeToken1", type: "BigDecimal")\n  dailyVolumeToken1_not: BigDecimal @source(subgraph: "uniswap", name: "dailyVolumeToken1_not", type: "BigDecimal")\n  dailyVolumeToken1_gt: BigDecimal @source(subgraph: "uniswap", name: "dailyVolumeToken1_gt", type: "BigDecimal")\n  dailyVolumeToken1_lt: BigDecimal @source(subgraph: "uniswap", name: "dailyVolumeToken1_lt", type: "BigDecimal")\n  dailyVolumeToken1_gte: BigDecimal @source(subgraph: "uniswap", name: "dailyVolumeToken1_gte", type: "BigDecimal")\n  dailyVolumeToken1_lte: BigDecimal @source(subgraph: "uniswap", name: "dailyVolumeToken1_lte", type: "BigDecimal")\n  dailyVolumeToken1_in: [BigDecimal!] @source(subgraph: "uniswap", name: "dailyVolumeToken1_in", type: "[BigDecimal!]")\n  dailyVolumeToken1_not_in: [BigDecimal!] @source(subgraph: "uniswap", name: "dailyVolumeToken1_not_in", type: "[BigDecimal!]")\n  dailyVolumeUSD: BigDecimal @source(subgraph: "uniswap", name: "dailyVolumeUSD", type: "BigDecimal")\n  dailyVolumeUSD_not: BigDecimal @source(subgraph: "uniswap", name: "dailyVolumeUSD_not", type: "BigDecimal")\n  dailyVolumeUSD_gt: BigDecimal @source(subgraph: "uniswap", name: "dailyVolumeUSD_gt", type: "BigDecimal")\n  dailyVolumeUSD_lt: BigDecimal @source(subgraph: "uniswap", name: "dailyVolumeUSD_lt", type: "BigDecimal")\n  dailyVolumeUSD_gte: BigDecimal @source(subgraph: "uniswap", name: "dailyVolumeUSD_gte", type: "BigDecimal")\n  dailyVolumeUSD_lte: BigDecimal @source(subgraph: "uniswap", name: "dailyVolumeUSD_lte", type: "BigDecimal")\n  dailyVolumeUSD_in: [BigDecimal!] @source(subgraph: "uniswap", name: "dailyVolumeUSD_in", type: "[BigDecimal!]")\n  dailyVolumeUSD_not_in: [BigDecimal!] @source(subgraph: "uniswap", name: "dailyVolumeUSD_not_in", type: "[BigDecimal!]")\n  dailyTxns: BigInt @source(subgraph: "uniswap", name: "dailyTxns", type: "BigInt")\n  dailyTxns_not: BigInt @source(subgraph: "uniswap", name: "dailyTxns_not", type: "BigInt")\n  dailyTxns_gt: BigInt @source(subgraph: "uniswap", name: "dailyTxns_gt", type: "BigInt")\n  dailyTxns_lt: BigInt @source(subgraph: "uniswap", name: "dailyTxns_lt", type: "BigInt")\n  dailyTxns_gte: BigInt @source(subgraph: "uniswap", name: "dailyTxns_gte", type: "BigInt")\n  dailyTxns_lte: BigInt @source(subgraph: "uniswap", name: "dailyTxns_lte", type: "BigInt")\n  dailyTxns_in: [BigInt!] @source(subgraph: "uniswap", name: "dailyTxns_in", type: "[BigInt!]")\n  dailyTxns_not_in: [BigInt!] @source(subgraph: "uniswap", name: "dailyTxns_not_in", type: "[BigInt!]")\n  """Filter for the block changed event."""\n  _change_block: BlockChangedFilter @source(subgraph: "uniswap", name: "_change_block", type: "BlockChangedFilter")\n  and: [PairDayData_filter] @source(subgraph: "uniswap", name: "and", type: "[PairDayData_filter]")\n  or: [PairDayData_filter] @source(subgraph: "uniswap", name: "or", type: "[PairDayData_filter]")\n}\n\nenum PairDayData_orderBy @source(subgraph: "uniswap", name: "PairDayData_orderBy") {\n  id @source(subgraph: "uniswap", name: "id")\n  date @source(subgraph: "uniswap", name: "date")\n  pairAddress @source(subgraph: "uniswap", name: "pairAddress")\n  token0 @source(subgraph: "uniswap", name: "token0")\n  token0__id @source(subgraph: "uniswap", name: "token0__id")\n  token0__symbol @source(subgraph: "uniswap", name: "token0__symbol")\n  token0__name @source(subgraph: "uniswap", name: "token0__name")\n  token0__decimals @source(subgraph: "uniswap", name: "token0__decimals")\n  token0__totalSupply @source(subgraph: "uniswap", name: "token0__totalSupply")\n  token0__tradeVolume @source(subgraph: "uniswap", name: "token0__tradeVolume")\n  token0__tradeVolumeUSD @source(subgraph: "uniswap", name: "token0__tradeVolumeUSD")\n  token0__untrackedVolumeUSD @source(subgraph: "uniswap", name: "token0__untrackedVolumeUSD")\n  token0__txCount @source(subgraph: "uniswap", name: "token0__txCount")\n  token0__totalLiquidity @source(subgraph: "uniswap", name: "token0__totalLiquidity")\n  token0__derivedETH @source(subgraph: "uniswap", name: "token0__derivedETH")\n  token1 @source(subgraph: "uniswap", name: "token1")\n  token1__id @source(subgraph: "uniswap", name: "token1__id")\n  token1__symbol @source(subgraph: "uniswap", name: "token1__symbol")\n  token1__name @source(subgraph: "uniswap", name: "token1__name")\n  token1__decimals @source(subgraph: "uniswap", name: "token1__decimals")\n  token1__totalSupply @source(subgraph: "uniswap", name: "token1__totalSupply")\n  token1__tradeVolume @source(subgraph: "uniswap", name: "token1__tradeVolume")\n  token1__tradeVolumeUSD @source(subgraph: "uniswap", name: "token1__tradeVolumeUSD")\n  token1__untrackedVolumeUSD @source(subgraph: "uniswap", name: "token1__untrackedVolumeUSD")\n  token1__txCount @source(subgraph: "uniswap", name: "token1__txCount")\n  token1__totalLiquidity @source(subgraph: "uniswap", name: "token1__totalLiquidity")\n  token1__derivedETH @source(subgraph: "uniswap", name: "token1__derivedETH")\n  reserve0 @source(subgraph: "uniswap", name: "reserve0")\n  reserve1 @source(subgraph: "uniswap", name: "reserve1")\n  totalSupply @source(subgraph: "uniswap", name: "totalSupply")\n  reserveUSD @source(subgraph: "uniswap", name: "reserveUSD")\n  dailyVolumeToken0 @source(subgraph: "uniswap", name: "dailyVolumeToken0")\n  dailyVolumeToken1 @source(subgraph: "uniswap", name: "dailyVolumeToken1")\n  dailyVolumeUSD @source(subgraph: "uniswap", name: "dailyVolumeUSD")\n  dailyTxns @source(subgraph: "uniswap", name: "dailyTxns")\n}\n\ntype PairHourData @source(subgraph: "uniswap", name: "PairHourData") @resolver(subgraph: "uniswap", operation: "query PairHourDataById($PairHourData_id: ID!) { pairHourData(id: $PairHourData_id) }", kind: "FETCH") @resolver(subgraph: "uniswap", operation: "query GetPairHourDataById($PairHourData_id: ID!) { pairHourDatas(where: { id: $PairHourData_id) } }", kind: "FETCH") @resolver(subgraph: "uniswap", operation: "query GetPairHourDataByIds($PairHourData_id: [ID!]!) { pairHourDatas(where: { id_in: $PairHourData_id }) }", kind: "BATCH") @variable(subgraph: "uniswap", name: "PairHourData_id", select: "id") {\n  id: ID! @source(subgraph: "uniswap", name: "id", type: "ID!")\n  hourStartUnix: Int! @source(subgraph: "uniswap", name: "hourStartUnix", type: "Int!")\n  pair: Pair! @source(subgraph: "uniswap", name: "pair", type: "Pair!")\n  reserve0: BigDecimal! @source(subgraph: "uniswap", name: "reserve0", type: "BigDecimal!")\n  reserve1: BigDecimal! @source(subgraph: "uniswap", name: "reserve1", type: "BigDecimal!")\n  totalSupply: BigDecimal @source(subgraph: "uniswap", name: "totalSupply", type: "BigDecimal")\n  reserveUSD: BigDecimal! @source(subgraph: "uniswap", name: "reserveUSD", type: "BigDecimal!")\n  hourlyVolumeToken0: BigDecimal! @source(subgraph: "uniswap", name: "hourlyVolumeToken0", type: "BigDecimal!")\n  hourlyVolumeToken1: BigDecimal! @source(subgraph: "uniswap", name: "hourlyVolumeToken1", type: "BigDecimal!")\n  hourlyVolumeUSD: BigDecimal! @source(subgraph: "uniswap", name: "hourlyVolumeUSD", type: "BigDecimal!")\n  hourlyTxns: BigInt! @source(subgraph: "uniswap", name: "hourlyTxns", type: "BigInt!")\n}\n\ninput PairHourData_filter @source(subgraph: "uniswap", name: "PairHourData_filter") {\n  id: ID @source(subgraph: "uniswap", name: "id", type: "ID")\n  id_not: ID @source(subgraph: "uniswap", name: "id_not", type: "ID")\n  id_gt: ID @source(subgraph: "uniswap", name: "id_gt", type: "ID")\n  id_lt: ID @source(subgraph: "uniswap", name: "id_lt", type: "ID")\n  id_gte: ID @source(subgraph: "uniswap", name: "id_gte", type: "ID")\n  id_lte: ID @source(subgraph: "uniswap", name: "id_lte", type: "ID")\n  id_in: [ID!] @source(subgraph: "uniswap", name: "id_in", type: "[ID!]")\n  id_not_in: [ID!] @source(subgraph: "uniswap", name: "id_not_in", type: "[ID!]")\n  hourStartUnix: Int @source(subgraph: "uniswap", name: "hourStartUnix", type: "Int")\n  hourStartUnix_not: Int @source(subgraph: "uniswap", name: "hourStartUnix_not", type: "Int")\n  hourStartUnix_gt: Int @source(subgraph: "uniswap", name: "hourStartUnix_gt", type: "Int")\n  hourStartUnix_lt: Int @source(subgraph: "uniswap", name: "hourStartUnix_lt", type: "Int")\n  hourStartUnix_gte: Int @source(subgraph: "uniswap", name: "hourStartUnix_gte", type: "Int")\n  hourStartUnix_lte: Int @source(subgraph: "uniswap", name: "hourStartUnix_lte", type: "Int")\n  hourStartUnix_in: [Int!] @source(subgraph: "uniswap", name: "hourStartUnix_in", type: "[Int!]")\n  hourStartUnix_not_in: [Int!] @source(subgraph: "uniswap", name: "hourStartUnix_not_in", type: "[Int!]")\n  pair: String @source(subgraph: "uniswap", name: "pair", type: "String")\n  pair_not: String @source(subgraph: "uniswap", name: "pair_not", type: "String")\n  pair_gt: String @source(subgraph: "uniswap", name: "pair_gt", type: "String")\n  pair_lt: String @source(subgraph: "uniswap", name: "pair_lt", type: "String")\n  pair_gte: String @source(subgraph: "uniswap", name: "pair_gte", type: "String")\n  pair_lte: String @source(subgraph: "uniswap", name: "pair_lte", type: "String")\n  pair_in: [String!] @source(subgraph: "uniswap", name: "pair_in", type: "[String!]")\n  pair_not_in: [String!] @source(subgraph: "uniswap", name: "pair_not_in", type: "[String!]")\n  pair_contains: String @source(subgraph: "uniswap", name: "pair_contains", type: "String")\n  pair_contains_nocase: String @source(subgraph: "uniswap", name: "pair_contains_nocase", type: "String")\n  pair_not_contains: String @source(subgraph: "uniswap", name: "pair_not_contains", type: "String")\n  pair_not_contains_nocase: String @source(subgraph: "uniswap", name: "pair_not_contains_nocase", type: "String")\n  pair_starts_with: String @source(subgraph: "uniswap", name: "pair_starts_with", type: "String")\n  pair_starts_with_nocase: String @source(subgraph: "uniswap", name: "pair_starts_with_nocase", type: "String")\n  pair_not_starts_with: String @source(subgraph: "uniswap", name: "pair_not_starts_with", type: "String")\n  pair_not_starts_with_nocase: String @source(subgraph: "uniswap", name: "pair_not_starts_with_nocase", type: "String")\n  pair_ends_with: String @source(subgraph: "uniswap", name: "pair_ends_with", type: "String")\n  pair_ends_with_nocase: String @source(subgraph: "uniswap", name: "pair_ends_with_nocase", type: "String")\n  pair_not_ends_with: String @source(subgraph: "uniswap", name: "pair_not_ends_with", type: "String")\n  pair_not_ends_with_nocase: String @source(subgraph: "uniswap", name: "pair_not_ends_with_nocase", type: "String")\n  pair_: Pair_filter @source(subgraph: "uniswap", name: "pair_", type: "Pair_filter")\n  reserve0: BigDecimal @source(subgraph: "uniswap", name: "reserve0", type: "BigDecimal")\n  reserve0_not: BigDecimal @source(subgraph: "uniswap", name: "reserve0_not", type: "BigDecimal")\n  reserve0_gt: BigDecimal @source(subgraph: "uniswap", name: "reserve0_gt", type: "BigDecimal")\n  reserve0_lt: BigDecimal @source(subgraph: "uniswap", name: "reserve0_lt", type: "BigDecimal")\n  reserve0_gte: BigDecimal @source(subgraph: "uniswap", name: "reserve0_gte", type: "BigDecimal")\n  reserve0_lte: BigDecimal @source(subgraph: "uniswap", name: "reserve0_lte", type: "BigDecimal")\n  reserve0_in: [BigDecimal!] @source(subgraph: "uniswap", name: "reserve0_in", type: "[BigDecimal!]")\n  reserve0_not_in: [BigDecimal!] @source(subgraph: "uniswap", name: "reserve0_not_in", type: "[BigDecimal!]")\n  reserve1: BigDecimal @source(subgraph: "uniswap", name: "reserve1", type: "BigDecimal")\n  reserve1_not: BigDecimal @source(subgraph: "uniswap", name: "reserve1_not", type: "BigDecimal")\n  reserve1_gt: BigDecimal @source(subgraph: "uniswap", name: "reserve1_gt", type: "BigDecimal")\n  reserve1_lt: BigDecimal @source(subgraph: "uniswap", name: "reserve1_lt", type: "BigDecimal")\n  reserve1_gte: BigDecimal @source(subgraph: "uniswap", name: "reserve1_gte", type: "BigDecimal")\n  reserve1_lte: BigDecimal @source(subgraph: "uniswap", name: "reserve1_lte", type: "BigDecimal")\n  reserve1_in: [BigDecimal!] @source(subgraph: "uniswap", name: "reserve1_in", type: "[BigDecimal!]")\n  reserve1_not_in: [BigDecimal!] @source(subgraph: "uniswap", name: "reserve1_not_in", type: "[BigDecimal!]")\n  totalSupply: BigDecimal @source(subgraph: "uniswap", name: "totalSupply", type: "BigDecimal")\n  totalSupply_not: BigDecimal @source(subgraph: "uniswap", name: "totalSupply_not", type: "BigDecimal")\n  totalSupply_gt: BigDecimal @source(subgraph: "uniswap", name: "totalSupply_gt", type: "BigDecimal")\n  totalSupply_lt: BigDecimal @source(subgraph: "uniswap", name: "totalSupply_lt", type: "BigDecimal")\n  totalSupply_gte: BigDecimal @source(subgraph: "uniswap", name: "totalSupply_gte", type: "BigDecimal")\n  totalSupply_lte: BigDecimal @source(subgraph: "uniswap", name: "totalSupply_lte", type: "BigDecimal")\n  totalSupply_in: [BigDecimal!] @source(subgraph: "uniswap", name: "totalSupply_in", type: "[BigDecimal!]")\n  totalSupply_not_in: [BigDecimal!] @source(subgraph: "uniswap", name: "totalSupply_not_in", type: "[BigDecimal!]")\n  reserveUSD: BigDecimal @source(subgraph: "uniswap", name: "reserveUSD", type: "BigDecimal")\n  reserveUSD_not: BigDecimal @source(subgraph: "uniswap", name: "reserveUSD_not", type: "BigDecimal")\n  reserveUSD_gt: BigDecimal @source(subgraph: "uniswap", name: "reserveUSD_gt", type: "BigDecimal")\n  reserveUSD_lt: BigDecimal @source(subgraph: "uniswap", name: "reserveUSD_lt", type: "BigDecimal")\n  reserveUSD_gte: BigDecimal @source(subgraph: "uniswap", name: "reserveUSD_gte", type: "BigDecimal")\n  reserveUSD_lte: BigDecimal @source(subgraph: "uniswap", name: "reserveUSD_lte", type: "BigDecimal")\n  reserveUSD_in: [BigDecimal!] @source(subgraph: "uniswap", name: "reserveUSD_in", type: "[BigDecimal!]")\n  reserveUSD_not_in: [BigDecimal!] @source(subgraph: "uniswap", name: "reserveUSD_not_in", type: "[BigDecimal!]")\n  hourlyVolumeToken0: BigDecimal @source(subgraph: "uniswap", name: "hourlyVolumeToken0", type: "BigDecimal")\n  hourlyVolumeToken0_not: BigDecimal @source(subgraph: "uniswap", name: "hourlyVolumeToken0_not", type: "BigDecimal")\n  hourlyVolumeToken0_gt: BigDecimal @source(subgraph: "uniswap", name: "hourlyVolumeToken0_gt", type: "BigDecimal")\n  hourlyVolumeToken0_lt: BigDecimal @source(subgraph: "uniswap", name: "hourlyVolumeToken0_lt", type: "BigDecimal")\n  hourlyVolumeToken0_gte: BigDecimal @source(subgraph: "uniswap", name: "hourlyVolumeToken0_gte", type: "BigDecimal")\n  hourlyVolumeToken0_lte: BigDecimal @source(subgraph: "uniswap", name: "hourlyVolumeToken0_lte", type: "BigDecimal")\n  hourlyVolumeToken0_in: [BigDecimal!] @source(subgraph: "uniswap", name: "hourlyVolumeToken0_in", type: "[BigDecimal!]")\n  hourlyVolumeToken0_not_in: [BigDecimal!] @source(subgraph: "uniswap", name: "hourlyVolumeToken0_not_in", type: "[BigDecimal!]")\n  hourlyVolumeToken1: BigDecimal @source(subgraph: "uniswap", name: "hourlyVolumeToken1", type: "BigDecimal")\n  hourlyVolumeToken1_not: BigDecimal @source(subgraph: "uniswap", name: "hourlyVolumeToken1_not", type: "BigDecimal")\n  hourlyVolumeToken1_gt: BigDecimal @source(subgraph: "uniswap", name: "hourlyVolumeToken1_gt", type: "BigDecimal")\n  hourlyVolumeToken1_lt: BigDecimal @source(subgraph: "uniswap", name: "hourlyVolumeToken1_lt", type: "BigDecimal")\n  hourlyVolumeToken1_gte: BigDecimal @source(subgraph: "uniswap", name: "hourlyVolumeToken1_gte", type: "BigDecimal")\n  hourlyVolumeToken1_lte: BigDecimal @source(subgraph: "uniswap", name: "hourlyVolumeToken1_lte", type: "BigDecimal")\n  hourlyVolumeToken1_in: [BigDecimal!] @source(subgraph: "uniswap", name: "hourlyVolumeToken1_in", type: "[BigDecimal!]")\n  hourlyVolumeToken1_not_in: [BigDecimal!] @source(subgraph: "uniswap", name: "hourlyVolumeToken1_not_in", type: "[BigDecimal!]")\n  hourlyVolumeUSD: BigDecimal @source(subgraph: "uniswap", name: "hourlyVolumeUSD", type: "BigDecimal")\n  hourlyVolumeUSD_not: BigDecimal @source(subgraph: "uniswap", name: "hourlyVolumeUSD_not", type: "BigDecimal")\n  hourlyVolumeUSD_gt: BigDecimal @source(subgraph: "uniswap", name: "hourlyVolumeUSD_gt", type: "BigDecimal")\n  hourlyVolumeUSD_lt: BigDecimal @source(subgraph: "uniswap", name: "hourlyVolumeUSD_lt", type: "BigDecimal")\n  hourlyVolumeUSD_gte: BigDecimal @source(subgraph: "uniswap", name: "hourlyVolumeUSD_gte", type: "BigDecimal")\n  hourlyVolumeUSD_lte: BigDecimal @source(subgraph: "uniswap", name: "hourlyVolumeUSD_lte", type: "BigDecimal")\n  hourlyVolumeUSD_in: [BigDecimal!] @source(subgraph: "uniswap", name: "hourlyVolumeUSD_in", type: "[BigDecimal!]")\n  hourlyVolumeUSD_not_in: [BigDecimal!] @source(subgraph: "uniswap", name: "hourlyVolumeUSD_not_in", type: "[BigDecimal!]")\n  hourlyTxns: BigInt @source(subgraph: "uniswap", name: "hourlyTxns", type: "BigInt")\n  hourlyTxns_not: BigInt @source(subgraph: "uniswap", name: "hourlyTxns_not", type: "BigInt")\n  hourlyTxns_gt: BigInt @source(subgraph: "uniswap", name: "hourlyTxns_gt", type: "BigInt")\n  hourlyTxns_lt: BigInt @source(subgraph: "uniswap", name: "hourlyTxns_lt", type: "BigInt")\n  hourlyTxns_gte: BigInt @source(subgraph: "uniswap", name: "hourlyTxns_gte", type: "BigInt")\n  hourlyTxns_lte: BigInt @source(subgraph: "uniswap", name: "hourlyTxns_lte", type: "BigInt")\n  hourlyTxns_in: [BigInt!] @source(subgraph: "uniswap", name: "hourlyTxns_in", type: "[BigInt!]")\n  hourlyTxns_not_in: [BigInt!] @source(subgraph: "uniswap", name: "hourlyTxns_not_in", type: "[BigInt!]")\n  """Filter for the block changed event."""\n  _change_block: BlockChangedFilter @source(subgraph: "uniswap", name: "_change_block", type: "BlockChangedFilter")\n  and: [PairHourData_filter] @source(subgraph: "uniswap", name: "and", type: "[PairHourData_filter]")\n  or: [PairHourData_filter] @source(subgraph: "uniswap", name: "or", type: "[PairHourData_filter]")\n}\n\nenum PairHourData_orderBy @source(subgraph: "uniswap", name: "PairHourData_orderBy") {\n  id @source(subgraph: "uniswap", name: "id")\n  hourStartUnix @source(subgraph: "uniswap", name: "hourStartUnix")\n  pair @source(subgraph: "uniswap", name: "pair")\n  pair__id @source(subgraph: "uniswap", name: "pair__id")\n  pair__reserve0 @source(subgraph: "uniswap", name: "pair__reserve0")\n  pair__reserve1 @source(subgraph: "uniswap", name: "pair__reserve1")\n  pair__totalSupply @source(subgraph: "uniswap", name: "pair__totalSupply")\n  pair__reserveETH @source(subgraph: "uniswap", name: "pair__reserveETH")\n  pair__reserveUSD @source(subgraph: "uniswap", name: "pair__reserveUSD")\n  pair__trackedReserveETH @source(subgraph: "uniswap", name: "pair__trackedReserveETH")\n  pair__token0Price @source(subgraph: "uniswap", name: "pair__token0Price")\n  pair__token1Price @source(subgraph: "uniswap", name: "pair__token1Price")\n  pair__volumeToken0 @source(subgraph: "uniswap", name: "pair__volumeToken0")\n  pair__volumeToken1 @source(subgraph: "uniswap", name: "pair__volumeToken1")\n  pair__volumeUSD @source(subgraph: "uniswap", name: "pair__volumeUSD")\n  pair__untrackedVolumeUSD @source(subgraph: "uniswap", name: "pair__untrackedVolumeUSD")\n  pair__txCount @source(subgraph: "uniswap", name: "pair__txCount")\n  pair__createdAtTimestamp @source(subgraph: "uniswap", name: "pair__createdAtTimestamp")\n  pair__createdAtBlockNumber @source(subgraph: "uniswap", name: "pair__createdAtBlockNumber")\n  pair__liquidityProviderCount @source(subgraph: "uniswap", name: "pair__liquidityProviderCount")\n  reserve0 @source(subgraph: "uniswap", name: "reserve0")\n  reserve1 @source(subgraph: "uniswap", name: "reserve1")\n  totalSupply @source(subgraph: "uniswap", name: "totalSupply")\n  reserveUSD @source(subgraph: "uniswap", name: "reserveUSD")\n  hourlyVolumeToken0 @source(subgraph: "uniswap", name: "hourlyVolumeToken0")\n  hourlyVolumeToken1 @source(subgraph: "uniswap", name: "hourlyVolumeToken1")\n  hourlyVolumeUSD @source(subgraph: "uniswap", name: "hourlyVolumeUSD")\n  hourlyTxns @source(subgraph: "uniswap", name: "hourlyTxns")\n}\n\ninput Pair_filter @source(subgraph: "uniswap", name: "Pair_filter") {\n  id: ID @source(subgraph: "uniswap", name: "id", type: "ID")\n  id_not: ID @source(subgraph: "uniswap", name: "id_not", type: "ID")\n  id_gt: ID @source(subgraph: "uniswap", name: "id_gt", type: "ID")\n  id_lt: ID @source(subgraph: "uniswap", name: "id_lt", type: "ID")\n  id_gte: ID @source(subgraph: "uniswap", name: "id_gte", type: "ID")\n  id_lte: ID @source(subgraph: "uniswap", name: "id_lte", type: "ID")\n  id_in: [ID!] @source(subgraph: "uniswap", name: "id_in", type: "[ID!]")\n  id_not_in: [ID!] @source(subgraph: "uniswap", name: "id_not_in", type: "[ID!]")\n  token0: String @source(subgraph: "uniswap", name: "token0", type: "String")\n  token0_not: String @source(subgraph: "uniswap", name: "token0_not", type: "String")\n  token0_gt: String @source(subgraph: "uniswap", name: "token0_gt", type: "String")\n  token0_lt: String @source(subgraph: "uniswap", name: "token0_lt", type: "String")\n  token0_gte: String @source(subgraph: "uniswap", name: "token0_gte", type: "String")\n  token0_lte: String @source(subgraph: "uniswap", name: "token0_lte", type: "String")\n  token0_in: [String!] @source(subgraph: "uniswap", name: "token0_in", type: "[String!]")\n  token0_not_in: [String!] @source(subgraph: "uniswap", name: "token0_not_in", type: "[String!]")\n  token0_contains: String @source(subgraph: "uniswap", name: "token0_contains", type: "String")\n  token0_contains_nocase: String @source(subgraph: "uniswap", name: "token0_contains_nocase", type: "String")\n  token0_not_contains: String @source(subgraph: "uniswap", name: "token0_not_contains", type: "String")\n  token0_not_contains_nocase: String @source(subgraph: "uniswap", name: "token0_not_contains_nocase", type: "String")\n  token0_starts_with: String @source(subgraph: "uniswap", name: "token0_starts_with", type: "String")\n  token0_starts_with_nocase: String @source(subgraph: "uniswap", name: "token0_starts_with_nocase", type: "String")\n  token0_not_starts_with: String @source(subgraph: "uniswap", name: "token0_not_starts_with", type: "String")\n  token0_not_starts_with_nocase: String @source(subgraph: "uniswap", name: "token0_not_starts_with_nocase", type: "String")\n  token0_ends_with: String @source(subgraph: "uniswap", name: "token0_ends_with", type: "String")\n  token0_ends_with_nocase: String @source(subgraph: "uniswap", name: "token0_ends_with_nocase", type: "String")\n  token0_not_ends_with: String @source(subgraph: "uniswap", name: "token0_not_ends_with", type: "String")\n  token0_not_ends_with_nocase: String @source(subgraph: "uniswap", name: "token0_not_ends_with_nocase", type: "String")\n  token0_: Token_filter @source(subgraph: "uniswap", name: "token0_", type: "Token_filter")\n  token1: String @source(subgraph: "uniswap", name: "token1", type: "String")\n  token1_not: String @source(subgraph: "uniswap", name: "token1_not", type: "String")\n  token1_gt: String @source(subgraph: "uniswap", name: "token1_gt", type: "String")\n  token1_lt: String @source(subgraph: "uniswap", name: "token1_lt", type: "String")\n  token1_gte: String @source(subgraph: "uniswap", name: "token1_gte", type: "String")\n  token1_lte: String @source(subgraph: "uniswap", name: "token1_lte", type: "String")\n  token1_in: [String!] @source(subgraph: "uniswap", name: "token1_in", type: "[String!]")\n  token1_not_in: [String!] @source(subgraph: "uniswap", name: "token1_not_in", type: "[String!]")\n  token1_contains: String @source(subgraph: "uniswap", name: "token1_contains", type: "String")\n  token1_contains_nocase: String @source(subgraph: "uniswap", name: "token1_contains_nocase", type: "String")\n  token1_not_contains: String @source(subgraph: "uniswap", name: "token1_not_contains", type: "String")\n  token1_not_contains_nocase: String @source(subgraph: "uniswap", name: "token1_not_contains_nocase", type: "String")\n  token1_starts_with: String @source(subgraph: "uniswap", name: "token1_starts_with", type: "String")\n  token1_starts_with_nocase: String @source(subgraph: "uniswap", name: "token1_starts_with_nocase", type: "String")\n  token1_not_starts_with: String @source(subgraph: "uniswap", name: "token1_not_starts_with", type: "String")\n  token1_not_starts_with_nocase: String @source(subgraph: "uniswap", name: "token1_not_starts_with_nocase", type: "String")\n  token1_ends_with: String @source(subgraph: "uniswap", name: "token1_ends_with", type: "String")\n  token1_ends_with_nocase: String @source(subgraph: "uniswap", name: "token1_ends_with_nocase", type: "String")\n  token1_not_ends_with: String @source(subgraph: "uniswap", name: "token1_not_ends_with", type: "String")\n  token1_not_ends_with_nocase: String @source(subgraph: "uniswap", name: "token1_not_ends_with_nocase", type: "String")\n  token1_: Token_filter @source(subgraph: "uniswap", name: "token1_", type: "Token_filter")\n  reserve0: BigDecimal @source(subgraph: "uniswap", name: "reserve0", type: "BigDecimal")\n  reserve0_not: BigDecimal @source(subgraph: "uniswap", name: "reserve0_not", type: "BigDecimal")\n  reserve0_gt: BigDecimal @source(subgraph: "uniswap", name: "reserve0_gt", type: "BigDecimal")\n  reserve0_lt: BigDecimal @source(subgraph: "uniswap", name: "reserve0_lt", type: "BigDecimal")\n  reserve0_gte: BigDecimal @source(subgraph: "uniswap", name: "reserve0_gte", type: "BigDecimal")\n  reserve0_lte: BigDecimal @source(subgraph: "uniswap", name: "reserve0_lte", type: "BigDecimal")\n  reserve0_in: [BigDecimal!] @source(subgraph: "uniswap", name: "reserve0_in", type: "[BigDecimal!]")\n  reserve0_not_in: [BigDecimal!] @source(subgraph: "uniswap", name: "reserve0_not_in", type: "[BigDecimal!]")\n  reserve1: BigDecimal @source(subgraph: "uniswap", name: "reserve1", type: "BigDecimal")\n  reserve1_not: BigDecimal @source(subgraph: "uniswap", name: "reserve1_not", type: "BigDecimal")\n  reserve1_gt: BigDecimal @source(subgraph: "uniswap", name: "reserve1_gt", type: "BigDecimal")\n  reserve1_lt: BigDecimal @source(subgraph: "uniswap", name: "reserve1_lt", type: "BigDecimal")\n  reserve1_gte: BigDecimal @source(subgraph: "uniswap", name: "reserve1_gte", type: "BigDecimal")\n  reserve1_lte: BigDecimal @source(subgraph: "uniswap", name: "reserve1_lte", type: "BigDecimal")\n  reserve1_in: [BigDecimal!] @source(subgraph: "uniswap", name: "reserve1_in", type: "[BigDecimal!]")\n  reserve1_not_in: [BigDecimal!] @source(subgraph: "uniswap", name: "reserve1_not_in", type: "[BigDecimal!]")\n  totalSupply: BigDecimal @source(subgraph: "uniswap", name: "totalSupply", type: "BigDecimal")\n  totalSupply_not: BigDecimal @source(subgraph: "uniswap", name: "totalSupply_not", type: "BigDecimal")\n  totalSupply_gt: BigDecimal @source(subgraph: "uniswap", name: "totalSupply_gt", type: "BigDecimal")\n  totalSupply_lt: BigDecimal @source(subgraph: "uniswap", name: "totalSupply_lt", type: "BigDecimal")\n  totalSupply_gte: BigDecimal @source(subgraph: "uniswap", name: "totalSupply_gte", type: "BigDecimal")\n  totalSupply_lte: BigDecimal @source(subgraph: "uniswap", name: "totalSupply_lte", type: "BigDecimal")\n  totalSupply_in: [BigDecimal!] @source(subgraph: "uniswap", name: "totalSupply_in", type: "[BigDecimal!]")\n  totalSupply_not_in: [BigDecimal!] @source(subgraph: "uniswap", name: "totalSupply_not_in", type: "[BigDecimal!]")\n  reserveETH: BigDecimal @source(subgraph: "uniswap", name: "reserveETH", type: "BigDecimal")\n  reserveETH_not: BigDecimal @source(subgraph: "uniswap", name: "reserveETH_not", type: "BigDecimal")\n  reserveETH_gt: BigDecimal @source(subgraph: "uniswap", name: "reserveETH_gt", type: "BigDecimal")\n  reserveETH_lt: BigDecimal @source(subgraph: "uniswap", name: "reserveETH_lt", type: "BigDecimal")\n  reserveETH_gte: BigDecimal @source(subgraph: "uniswap", name: "reserveETH_gte", type: "BigDecimal")\n  reserveETH_lte: BigDecimal @source(subgraph: "uniswap", name: "reserveETH_lte", type: "BigDecimal")\n  reserveETH_in: [BigDecimal!] @source(subgraph: "uniswap", name: "reserveETH_in", type: "[BigDecimal!]")\n  reserveETH_not_in: [BigDecimal!] @source(subgraph: "uniswap", name: "reserveETH_not_in", type: "[BigDecimal!]")\n  reserveUSD: BigDecimal @source(subgraph: "uniswap", name: "reserveUSD", type: "BigDecimal")\n  reserveUSD_not: BigDecimal @source(subgraph: "uniswap", name: "reserveUSD_not", type: "BigDecimal")\n  reserveUSD_gt: BigDecimal @source(subgraph: "uniswap", name: "reserveUSD_gt", type: "BigDecimal")\n  reserveUSD_lt: BigDecimal @source(subgraph: "uniswap", name: "reserveUSD_lt", type: "BigDecimal")\n  reserveUSD_gte: BigDecimal @source(subgraph: "uniswap", name: "reserveUSD_gte", type: "BigDecimal")\n  reserveUSD_lte: BigDecimal @source(subgraph: "uniswap", name: "reserveUSD_lte", type: "BigDecimal")\n  reserveUSD_in: [BigDecimal!] @source(subgraph: "uniswap", name: "reserveUSD_in", type: "[BigDecimal!]")\n  reserveUSD_not_in: [BigDecimal!] @source(subgraph: "uniswap", name: "reserveUSD_not_in", type: "[BigDecimal!]")\n  trackedReserveETH: BigDecimal @source(subgraph: "uniswap", name: "trackedReserveETH", type: "BigDecimal")\n  trackedReserveETH_not: BigDecimal @source(subgraph: "uniswap", name: "trackedReserveETH_not", type: "BigDecimal")\n  trackedReserveETH_gt: BigDecimal @source(subgraph: "uniswap", name: "trackedReserveETH_gt", type: "BigDecimal")\n  trackedReserveETH_lt: BigDecimal @source(subgraph: "uniswap", name: "trackedReserveETH_lt", type: "BigDecimal")\n  trackedReserveETH_gte: BigDecimal @source(subgraph: "uniswap", name: "trackedReserveETH_gte", type: "BigDecimal")\n  trackedReserveETH_lte: BigDecimal @source(subgraph: "uniswap", name: "trackedReserveETH_lte", type: "BigDecimal")\n  trackedReserveETH_in: [BigDecimal!] @source(subgraph: "uniswap", name: "trackedReserveETH_in", type: "[BigDecimal!]")\n  trackedReserveETH_not_in: [BigDecimal!] @source(subgraph: "uniswap", name: "trackedReserveETH_not_in", type: "[BigDecimal!]")\n  token0Price: BigDecimal @source(subgraph: "uniswap", name: "token0Price", type: "BigDecimal")\n  token0Price_not: BigDecimal @source(subgraph: "uniswap", name: "token0Price_not", type: "BigDecimal")\n  token0Price_gt: BigDecimal @source(subgraph: "uniswap", name: "token0Price_gt", type: "BigDecimal")\n  token0Price_lt: BigDecimal @source(subgraph: "uniswap", name: "token0Price_lt", type: "BigDecimal")\n  token0Price_gte: BigDecimal @source(subgraph: "uniswap", name: "token0Price_gte", type: "BigDecimal")\n  token0Price_lte: BigDecimal @source(subgraph: "uniswap", name: "token0Price_lte", type: "BigDecimal")\n  token0Price_in: [BigDecimal!] @source(subgraph: "uniswap", name: "token0Price_in", type: "[BigDecimal!]")\n  token0Price_not_in: [BigDecimal!] @source(subgraph: "uniswap", name: "token0Price_not_in", type: "[BigDecimal!]")\n  token1Price: BigDecimal @source(subgraph: "uniswap", name: "token1Price", type: "BigDecimal")\n  token1Price_not: BigDecimal @source(subgraph: "uniswap", name: "token1Price_not", type: "BigDecimal")\n  token1Price_gt: BigDecimal @source(subgraph: "uniswap", name: "token1Price_gt", type: "BigDecimal")\n  token1Price_lt: BigDecimal @source(subgraph: "uniswap", name: "token1Price_lt", type: "BigDecimal")\n  token1Price_gte: BigDecimal @source(subgraph: "uniswap", name: "token1Price_gte", type: "BigDecimal")\n  token1Price_lte: BigDecimal @source(subgraph: "uniswap", name: "token1Price_lte", type: "BigDecimal")\n  token1Price_in: [BigDecimal!] @source(subgraph: "uniswap", name: "token1Price_in", type: "[BigDecimal!]")\n  token1Price_not_in: [BigDecimal!] @source(subgraph: "uniswap", name: "token1Price_not_in", type: "[BigDecimal!]")\n  volumeToken0: BigDecimal @source(subgraph: "uniswap", name: "volumeToken0", type: "BigDecimal")\n  volumeToken0_not: BigDecimal @source(subgraph: "uniswap", name: "volumeToken0_not", type: "BigDecimal")\n  volumeToken0_gt: BigDecimal @source(subgraph: "uniswap", name: "volumeToken0_gt", type: "BigDecimal")\n  volumeToken0_lt: BigDecimal @source(subgraph: "uniswap", name: "volumeToken0_lt", type: "BigDecimal")\n  volumeToken0_gte: BigDecimal @source(subgraph: "uniswap", name: "volumeToken0_gte", type: "BigDecimal")\n  volumeToken0_lte: BigDecimal @source(subgraph: "uniswap", name: "volumeToken0_lte", type: "BigDecimal")\n  volumeToken0_in: [BigDecimal!] @source(subgraph: "uniswap", name: "volumeToken0_in", type: "[BigDecimal!]")\n  volumeToken0_not_in: [BigDecimal!] @source(subgraph: "uniswap", name: "volumeToken0_not_in", type: "[BigDecimal!]")\n  volumeToken1: BigDecimal @source(subgraph: "uniswap", name: "volumeToken1", type: "BigDecimal")\n  volumeToken1_not: BigDecimal @source(subgraph: "uniswap", name: "volumeToken1_not", type: "BigDecimal")\n  volumeToken1_gt: BigDecimal @source(subgraph: "uniswap", name: "volumeToken1_gt", type: "BigDecimal")\n  volumeToken1_lt: BigDecimal @source(subgraph: "uniswap", name: "volumeToken1_lt", type: "BigDecimal")\n  volumeToken1_gte: BigDecimal @source(subgraph: "uniswap", name: "volumeToken1_gte", type: "BigDecimal")\n  volumeToken1_lte: BigDecimal @source(subgraph: "uniswap", name: "volumeToken1_lte", type: "BigDecimal")\n  volumeToken1_in: [BigDecimal!] @source(subgraph: "uniswap", name: "volumeToken1_in", type: "[BigDecimal!]")\n  volumeToken1_not_in: [BigDecimal!] @source(subgraph: "uniswap", name: "volumeToken1_not_in", type: "[BigDecimal!]")\n  volumeUSD: BigDecimal @source(subgraph: "uniswap", name: "volumeUSD", type: "BigDecimal")\n  volumeUSD_not: BigDecimal @source(subgraph: "uniswap", name: "volumeUSD_not", type: "BigDecimal")\n  volumeUSD_gt: BigDecimal @source(subgraph: "uniswap", name: "volumeUSD_gt", type: "BigDecimal")\n  volumeUSD_lt: BigDecimal @source(subgraph: "uniswap", name: "volumeUSD_lt", type: "BigDecimal")\n  volumeUSD_gte: BigDecimal @source(subgraph: "uniswap", name: "volumeUSD_gte", type: "BigDecimal")\n  volumeUSD_lte: BigDecimal @source(subgraph: "uniswap", name: "volumeUSD_lte", type: "BigDecimal")\n  volumeUSD_in: [BigDecimal!] @source(subgraph: "uniswap", name: "volumeUSD_in", type: "[BigDecimal!]")\n  volumeUSD_not_in: [BigDecimal!] @source(subgraph: "uniswap", name: "volumeUSD_not_in", type: "[BigDecimal!]")\n  untrackedVolumeUSD: BigDecimal @source(subgraph: "uniswap", name: "untrackedVolumeUSD", type: "BigDecimal")\n  untrackedVolumeUSD_not: BigDecimal @source(subgraph: "uniswap", name: "untrackedVolumeUSD_not", type: "BigDecimal")\n  untrackedVolumeUSD_gt: BigDecimal @source(subgraph: "uniswap", name: "untrackedVolumeUSD_gt", type: "BigDecimal")\n  untrackedVolumeUSD_lt: BigDecimal @source(subgraph: "uniswap", name: "untrackedVolumeUSD_lt", type: "BigDecimal")\n  untrackedVolumeUSD_gte: BigDecimal @source(subgraph: "uniswap", name: "untrackedVolumeUSD_gte", type: "BigDecimal")\n  untrackedVolumeUSD_lte: BigDecimal @source(subgraph: "uniswap", name: "untrackedVolumeUSD_lte", type: "BigDecimal")\n  untrackedVolumeUSD_in: [BigDecimal!] @source(subgraph: "uniswap", name: "untrackedVolumeUSD_in", type: "[BigDecimal!]")\n  untrackedVolumeUSD_not_in: [BigDecimal!] @source(subgraph: "uniswap", name: "untrackedVolumeUSD_not_in", type: "[BigDecimal!]")\n  txCount: BigInt @source(subgraph: "uniswap", name: "txCount", type: "BigInt")\n  txCount_not: BigInt @source(subgraph: "uniswap", name: "txCount_not", type: "BigInt")\n  txCount_gt: BigInt @source(subgraph: "uniswap", name: "txCount_gt", type: "BigInt")\n  txCount_lt: BigInt @source(subgraph: "uniswap", name: "txCount_lt", type: "BigInt")\n  txCount_gte: BigInt @source(subgraph: "uniswap", name: "txCount_gte", type: "BigInt")\n  txCount_lte: BigInt @source(subgraph: "uniswap", name: "txCount_lte", type: "BigInt")\n  txCount_in: [BigInt!] @source(subgraph: "uniswap", name: "txCount_in", type: "[BigInt!]")\n  txCount_not_in: [BigInt!] @source(subgraph: "uniswap", name: "txCount_not_in", type: "[BigInt!]")\n  createdAtTimestamp: BigInt @source(subgraph: "uniswap", name: "createdAtTimestamp", type: "BigInt")\n  createdAtTimestamp_not: BigInt @source(subgraph: "uniswap", name: "createdAtTimestamp_not", type: "BigInt")\n  createdAtTimestamp_gt: BigInt @source(subgraph: "uniswap", name: "createdAtTimestamp_gt", type: "BigInt")\n  createdAtTimestamp_lt: BigInt @source(subgraph: "uniswap", name: "createdAtTimestamp_lt", type: "BigInt")\n  createdAtTimestamp_gte: BigInt @source(subgraph: "uniswap", name: "createdAtTimestamp_gte", type: "BigInt")\n  createdAtTimestamp_lte: BigInt @source(subgraph: "uniswap", name: "createdAtTimestamp_lte", type: "BigInt")\n  createdAtTimestamp_in: [BigInt!] @source(subgraph: "uniswap", name: "createdAtTimestamp_in", type: "[BigInt!]")\n  createdAtTimestamp_not_in: [BigInt!] @source(subgraph: "uniswap", name: "createdAtTimestamp_not_in", type: "[BigInt!]")\n  createdAtBlockNumber: BigInt @source(subgraph: "uniswap", name: "createdAtBlockNumber", type: "BigInt")\n  createdAtBlockNumber_not: BigInt @source(subgraph: "uniswap", name: "createdAtBlockNumber_not", type: "BigInt")\n  createdAtBlockNumber_gt: BigInt @source(subgraph: "uniswap", name: "createdAtBlockNumber_gt", type: "BigInt")\n  createdAtBlockNumber_lt: BigInt @source(subgraph: "uniswap", name: "createdAtBlockNumber_lt", type: "BigInt")\n  createdAtBlockNumber_gte: BigInt @source(subgraph: "uniswap", name: "createdAtBlockNumber_gte", type: "BigInt")\n  createdAtBlockNumber_lte: BigInt @source(subgraph: "uniswap", name: "createdAtBlockNumber_lte", type: "BigInt")\n  createdAtBlockNumber_in: [BigInt!] @source(subgraph: "uniswap", name: "createdAtBlockNumber_in", type: "[BigInt!]")\n  createdAtBlockNumber_not_in: [BigInt!] @source(subgraph: "uniswap", name: "createdAtBlockNumber_not_in", type: "[BigInt!]")\n  liquidityProviderCount: BigInt @source(subgraph: "uniswap", name: "liquidityProviderCount", type: "BigInt")\n  liquidityProviderCount_not: BigInt @source(subgraph: "uniswap", name: "liquidityProviderCount_not", type: "BigInt")\n  liquidityProviderCount_gt: BigInt @source(subgraph: "uniswap", name: "liquidityProviderCount_gt", type: "BigInt")\n  liquidityProviderCount_lt: BigInt @source(subgraph: "uniswap", name: "liquidityProviderCount_lt", type: "BigInt")\n  liquidityProviderCount_gte: BigInt @source(subgraph: "uniswap", name: "liquidityProviderCount_gte", type: "BigInt")\n  liquidityProviderCount_lte: BigInt @source(subgraph: "uniswap", name: "liquidityProviderCount_lte", type: "BigInt")\n  liquidityProviderCount_in: [BigInt!] @source(subgraph: "uniswap", name: "liquidityProviderCount_in", type: "[BigInt!]")\n  liquidityProviderCount_not_in: [BigInt!] @source(subgraph: "uniswap", name: "liquidityProviderCount_not_in", type: "[BigInt!]")\n  pairHourData_: PairHourData_filter @source(subgraph: "uniswap", name: "pairHourData_", type: "PairHourData_filter")\n  liquidityPositions_: LiquidityPosition_filter @source(subgraph: "uniswap", name: "liquidityPositions_", type: "LiquidityPosition_filter")\n  liquidityPositionSnapshots_: LiquidityPositionSnapshot_filter @source(subgraph: "uniswap", name: "liquidityPositionSnapshots_", type: "LiquidityPositionSnapshot_filter")\n  mints_: Mint_filter @source(subgraph: "uniswap", name: "mints_", type: "Mint_filter")\n  burns_: Burn_filter @source(subgraph: "uniswap", name: "burns_", type: "Burn_filter")\n  swaps_: Swap_filter @source(subgraph: "uniswap", name: "swaps_", type: "Swap_filter")\n  """Filter for the block changed event."""\n  _change_block: BlockChangedFilter @source(subgraph: "uniswap", name: "_change_block", type: "BlockChangedFilter")\n  and: [Pair_filter] @source(subgraph: "uniswap", name: "and", type: "[Pair_filter]")\n  or: [Pair_filter] @source(subgraph: "uniswap", name: "or", type: "[Pair_filter]")\n}\n\nenum Pair_orderBy @source(subgraph: "uniswap", name: "Pair_orderBy") {\n  id @source(subgraph: "uniswap", name: "id")\n  token0 @source(subgraph: "uniswap", name: "token0")\n  token0__id @source(subgraph: "uniswap", name: "token0__id")\n  token0__symbol @source(subgraph: "uniswap", name: "token0__symbol")\n  token0__name @source(subgraph: "uniswap", name: "token0__name")\n  token0__decimals @source(subgraph: "uniswap", name: "token0__decimals")\n  token0__totalSupply @source(subgraph: "uniswap", name: "token0__totalSupply")\n  token0__tradeVolume @source(subgraph: "uniswap", name: "token0__tradeVolume")\n  token0__tradeVolumeUSD @source(subgraph: "uniswap", name: "token0__tradeVolumeUSD")\n  token0__untrackedVolumeUSD @source(subgraph: "uniswap", name: "token0__untrackedVolumeUSD")\n  token0__txCount @source(subgraph: "uniswap", name: "token0__txCount")\n  token0__totalLiquidity @source(subgraph: "uniswap", name: "token0__totalLiquidity")\n  token0__derivedETH @source(subgraph: "uniswap", name: "token0__derivedETH")\n  token1 @source(subgraph: "uniswap", name: "token1")\n  token1__id @source(subgraph: "uniswap", name: "token1__id")\n  token1__symbol @source(subgraph: "uniswap", name: "token1__symbol")\n  token1__name @source(subgraph: "uniswap", name: "token1__name")\n  token1__decimals @source(subgraph: "uniswap", name: "token1__decimals")\n  token1__totalSupply @source(subgraph: "uniswap", name: "token1__totalSupply")\n  token1__tradeVolume @source(subgraph: "uniswap", name: "token1__tradeVolume")\n  token1__tradeVolumeUSD @source(subgraph: "uniswap", name: "token1__tradeVolumeUSD")\n  token1__untrackedVolumeUSD @source(subgraph: "uniswap", name: "token1__untrackedVolumeUSD")\n  token1__txCount @source(subgraph: "uniswap", name: "token1__txCount")\n  token1__totalLiquidity @source(subgraph: "uniswap", name: "token1__totalLiquidity")\n  token1__derivedETH @source(subgraph: "uniswap", name: "token1__derivedETH")\n  reserve0 @source(subgraph: "uniswap", name: "reserve0")\n  reserve1 @source(subgraph: "uniswap", name: "reserve1")\n  totalSupply @source(subgraph: "uniswap", name: "totalSupply")\n  reserveETH @source(subgraph: "uniswap", name: "reserveETH")\n  reserveUSD @source(subgraph: "uniswap", name: "reserveUSD")\n  trackedReserveETH @source(subgraph: "uniswap", name: "trackedReserveETH")\n  token0Price @source(subgraph: "uniswap", name: "token0Price")\n  token1Price @source(subgraph: "uniswap", name: "token1Price")\n  volumeToken0 @source(subgraph: "uniswap", name: "volumeToken0")\n  volumeToken1 @source(subgraph: "uniswap", name: "volumeToken1")\n  volumeUSD @source(subgraph: "uniswap", name: "volumeUSD")\n  untrackedVolumeUSD @source(subgraph: "uniswap", name: "untrackedVolumeUSD")\n  txCount @source(subgraph: "uniswap", name: "txCount")\n  createdAtTimestamp @source(subgraph: "uniswap", name: "createdAtTimestamp")\n  createdAtBlockNumber @source(subgraph: "uniswap", name: "createdAtBlockNumber")\n  liquidityProviderCount @source(subgraph: "uniswap", name: "liquidityProviderCount")\n  pairHourData @source(subgraph: "uniswap", name: "pairHourData")\n  liquidityPositions @source(subgraph: "uniswap", name: "liquidityPositions")\n  liquidityPositionSnapshots @source(subgraph: "uniswap", name: "liquidityPositionSnapshots")\n  mints @source(subgraph: "uniswap", name: "mints")\n  burns @source(subgraph: "uniswap", name: "burns")\n  swaps @source(subgraph: "uniswap", name: "swaps")\n}\n\ntype Swap @source(subgraph: "uniswap", name: "Swap") @resolver(subgraph: "uniswap", operation: "query SwapById($Swap_id: ID!) { swap(id: $Swap_id) }", kind: "FETCH") @resolver(subgraph: "uniswap", operation: "query GetSwapById($Swap_id: ID!) { swaps(where: { id: $Swap_id) } }", kind: "FETCH") @resolver(subgraph: "uniswap", operation: "query GetSwapsByIds($Swap_id: [ID!]!) { swaps(where: { id_in: $Swap_id }) }", kind: "BATCH") @variable(subgraph: "uniswap", name: "Swap_id", select: "id") {\n  id: ID! @source(subgraph: "uniswap", name: "id", type: "ID!")\n  transaction: Transaction! @source(subgraph: "uniswap", name: "transaction", type: "Transaction!")\n  timestamp: BigInt! @source(subgraph: "uniswap", name: "timestamp", type: "BigInt!")\n  pair: Pair! @source(subgraph: "uniswap", name: "pair", type: "Pair!")\n  sender: Bytes! @source(subgraph: "uniswap", name: "sender", type: "Bytes!")\n  from: Bytes! @source(subgraph: "uniswap", name: "from", type: "Bytes!")\n  amount0In: BigDecimal! @source(subgraph: "uniswap", name: "amount0In", type: "BigDecimal!")\n  amount1In: BigDecimal! @source(subgraph: "uniswap", name: "amount1In", type: "BigDecimal!")\n  amount0Out: BigDecimal! @source(subgraph: "uniswap", name: "amount0Out", type: "BigDecimal!")\n  amount1Out: BigDecimal! @source(subgraph: "uniswap", name: "amount1Out", type: "BigDecimal!")\n  to: Bytes! @source(subgraph: "uniswap", name: "to", type: "Bytes!")\n  logIndex: BigInt @source(subgraph: "uniswap", name: "logIndex", type: "BigInt")\n  amountUSD: BigDecimal! @source(subgraph: "uniswap", name: "amountUSD", type: "BigDecimal!")\n}\n\ninput Swap_filter @source(subgraph: "uniswap", name: "Swap_filter") {\n  id: ID @source(subgraph: "uniswap", name: "id", type: "ID")\n  id_not: ID @source(subgraph: "uniswap", name: "id_not", type: "ID")\n  id_gt: ID @source(subgraph: "uniswap", name: "id_gt", type: "ID")\n  id_lt: ID @source(subgraph: "uniswap", name: "id_lt", type: "ID")\n  id_gte: ID @source(subgraph: "uniswap", name: "id_gte", type: "ID")\n  id_lte: ID @source(subgraph: "uniswap", name: "id_lte", type: "ID")\n  id_in: [ID!] @source(subgraph: "uniswap", name: "id_in", type: "[ID!]")\n  id_not_in: [ID!] @source(subgraph: "uniswap", name: "id_not_in", type: "[ID!]")\n  transaction: String @source(subgraph: "uniswap", name: "transaction", type: "String")\n  transaction_not: String @source(subgraph: "uniswap", name: "transaction_not", type: "String")\n  transaction_gt: String @source(subgraph: "uniswap", name: "transaction_gt", type: "String")\n  transaction_lt: String @source(subgraph: "uniswap", name: "transaction_lt", type: "String")\n  transaction_gte: String @source(subgraph: "uniswap", name: "transaction_gte", type: "String")\n  transaction_lte: String @source(subgraph: "uniswap", name: "transaction_lte", type: "String")\n  transaction_in: [String!] @source(subgraph: "uniswap", name: "transaction_in", type: "[String!]")\n  transaction_not_in: [String!] @source(subgraph: "uniswap", name: "transaction_not_in", type: "[String!]")\n  transaction_contains: String @source(subgraph: "uniswap", name: "transaction_contains", type: "String")\n  transaction_contains_nocase: String @source(subgraph: "uniswap", name: "transaction_contains_nocase", type: "String")\n  transaction_not_contains: String @source(subgraph: "uniswap", name: "transaction_not_contains", type: "String")\n  transaction_not_contains_nocase: String @source(subgraph: "uniswap", name: "transaction_not_contains_nocase", type: "String")\n  transaction_starts_with: String @source(subgraph: "uniswap", name: "transaction_starts_with", type: "String")\n  transaction_starts_with_nocase: String @source(subgraph: "uniswap", name: "transaction_starts_with_nocase", type: "String")\n  transaction_not_starts_with: String @source(subgraph: "uniswap", name: "transaction_not_starts_with", type: "String")\n  transaction_not_starts_with_nocase: String @source(subgraph: "uniswap", name: "transaction_not_starts_with_nocase", type: "String")\n  transaction_ends_with: String @source(subgraph: "uniswap", name: "transaction_ends_with", type: "String")\n  transaction_ends_with_nocase: String @source(subgraph: "uniswap", name: "transaction_ends_with_nocase", type: "String")\n  transaction_not_ends_with: String @source(subgraph: "uniswap", name: "transaction_not_ends_with", type: "String")\n  transaction_not_ends_with_nocase: String @source(subgraph: "uniswap", name: "transaction_not_ends_with_nocase", type: "String")\n  transaction_: Transaction_filter @source(subgraph: "uniswap", name: "transaction_", type: "Transaction_filter")\n  timestamp: BigInt @source(subgraph: "uniswap", name: "timestamp", type: "BigInt")\n  timestamp_not: BigInt @source(subgraph: "uniswap", name: "timestamp_not", type: "BigInt")\n  timestamp_gt: BigInt @source(subgraph: "uniswap", name: "timestamp_gt", type: "BigInt")\n  timestamp_lt: BigInt @source(subgraph: "uniswap", name: "timestamp_lt", type: "BigInt")\n  timestamp_gte: BigInt @source(subgraph: "uniswap", name: "timestamp_gte", type: "BigInt")\n  timestamp_lte: BigInt @source(subgraph: "uniswap", name: "timestamp_lte", type: "BigInt")\n  timestamp_in: [BigInt!] @source(subgraph: "uniswap", name: "timestamp_in", type: "[BigInt!]")\n  timestamp_not_in: [BigInt!] @source(subgraph: "uniswap", name: "timestamp_not_in", type: "[BigInt!]")\n  pair: String @source(subgraph: "uniswap", name: "pair", type: "String")\n  pair_not: String @source(subgraph: "uniswap", name: "pair_not", type: "String")\n  pair_gt: String @source(subgraph: "uniswap", name: "pair_gt", type: "String")\n  pair_lt: String @source(subgraph: "uniswap", name: "pair_lt", type: "String")\n  pair_gte: String @source(subgraph: "uniswap", name: "pair_gte", type: "String")\n  pair_lte: String @source(subgraph: "uniswap", name: "pair_lte", type: "String")\n  pair_in: [String!] @source(subgraph: "uniswap", name: "pair_in", type: "[String!]")\n  pair_not_in: [String!] @source(subgraph: "uniswap", name: "pair_not_in", type: "[String!]")\n  pair_contains: String @source(subgraph: "uniswap", name: "pair_contains", type: "String")\n  pair_contains_nocase: String @source(subgraph: "uniswap", name: "pair_contains_nocase", type: "String")\n  pair_not_contains: String @source(subgraph: "uniswap", name: "pair_not_contains", type: "String")\n  pair_not_contains_nocase: String @source(subgraph: "uniswap", name: "pair_not_contains_nocase", type: "String")\n  pair_starts_with: String @source(subgraph: "uniswap", name: "pair_starts_with", type: "String")\n  pair_starts_with_nocase: String @source(subgraph: "uniswap", name: "pair_starts_with_nocase", type: "String")\n  pair_not_starts_with: String @source(subgraph: "uniswap", name: "pair_not_starts_with", type: "String")\n  pair_not_starts_with_nocase: String @source(subgraph: "uniswap", name: "pair_not_starts_with_nocase", type: "String")\n  pair_ends_with: String @source(subgraph: "uniswap", name: "pair_ends_with", type: "String")\n  pair_ends_with_nocase: String @source(subgraph: "uniswap", name: "pair_ends_with_nocase", type: "String")\n  pair_not_ends_with: String @source(subgraph: "uniswap", name: "pair_not_ends_with", type: "String")\n  pair_not_ends_with_nocase: String @source(subgraph: "uniswap", name: "pair_not_ends_with_nocase", type: "String")\n  pair_: Pair_filter @source(subgraph: "uniswap", name: "pair_", type: "Pair_filter")\n  sender: Bytes @source(subgraph: "uniswap", name: "sender", type: "Bytes")\n  sender_not: Bytes @source(subgraph: "uniswap", name: "sender_not", type: "Bytes")\n  sender_gt: Bytes @source(subgraph: "uniswap", name: "sender_gt", type: "Bytes")\n  sender_lt: Bytes @source(subgraph: "uniswap", name: "sender_lt", type: "Bytes")\n  sender_gte: Bytes @source(subgraph: "uniswap", name: "sender_gte", type: "Bytes")\n  sender_lte: Bytes @source(subgraph: "uniswap", name: "sender_lte", type: "Bytes")\n  sender_in: [Bytes!] @source(subgraph: "uniswap", name: "sender_in", type: "[Bytes!]")\n  sender_not_in: [Bytes!] @source(subgraph: "uniswap", name: "sender_not_in", type: "[Bytes!]")\n  sender_contains: Bytes @source(subgraph: "uniswap", name: "sender_contains", type: "Bytes")\n  sender_not_contains: Bytes @source(subgraph: "uniswap", name: "sender_not_contains", type: "Bytes")\n  from: Bytes @source(subgraph: "uniswap", name: "from", type: "Bytes")\n  from_not: Bytes @source(subgraph: "uniswap", name: "from_not", type: "Bytes")\n  from_gt: Bytes @source(subgraph: "uniswap", name: "from_gt", type: "Bytes")\n  from_lt: Bytes @source(subgraph: "uniswap", name: "from_lt", type: "Bytes")\n  from_gte: Bytes @source(subgraph: "uniswap", name: "from_gte", type: "Bytes")\n  from_lte: Bytes @source(subgraph: "uniswap", name: "from_lte", type: "Bytes")\n  from_in: [Bytes!] @source(subgraph: "uniswap", name: "from_in", type: "[Bytes!]")\n  from_not_in: [Bytes!] @source(subgraph: "uniswap", name: "from_not_in", type: "[Bytes!]")\n  from_contains: Bytes @source(subgraph: "uniswap", name: "from_contains", type: "Bytes")\n  from_not_contains: Bytes @source(subgraph: "uniswap", name: "from_not_contains", type: "Bytes")\n  amount0In: BigDecimal @source(subgraph: "uniswap", name: "amount0In", type: "BigDecimal")\n  amount0In_not: BigDecimal @source(subgraph: "uniswap", name: "amount0In_not", type: "BigDecimal")\n  amount0In_gt: BigDecimal @source(subgraph: "uniswap", name: "amount0In_gt", type: "BigDecimal")\n  amount0In_lt: BigDecimal @source(subgraph: "uniswap", name: "amount0In_lt", type: "BigDecimal")\n  amount0In_gte: BigDecimal @source(subgraph: "uniswap", name: "amount0In_gte", type: "BigDecimal")\n  amount0In_lte: BigDecimal @source(subgraph: "uniswap", name: "amount0In_lte", type: "BigDecimal")\n  amount0In_in: [BigDecimal!] @source(subgraph: "uniswap", name: "amount0In_in", type: "[BigDecimal!]")\n  amount0In_not_in: [BigDecimal!] @source(subgraph: "uniswap", name: "amount0In_not_in", type: "[BigDecimal!]")\n  amount1In: BigDecimal @source(subgraph: "uniswap", name: "amount1In", type: "BigDecimal")\n  amount1In_not: BigDecimal @source(subgraph: "uniswap", name: "amount1In_not", type: "BigDecimal")\n  amount1In_gt: BigDecimal @source(subgraph: "uniswap", name: "amount1In_gt", type: "BigDecimal")\n  amount1In_lt: BigDecimal @source(subgraph: "uniswap", name: "amount1In_lt", type: "BigDecimal")\n  amount1In_gte: BigDecimal @source(subgraph: "uniswap", name: "amount1In_gte", type: "BigDecimal")\n  amount1In_lte: BigDecimal @source(subgraph: "uniswap", name: "amount1In_lte", type: "BigDecimal")\n  amount1In_in: [BigDecimal!] @source(subgraph: "uniswap", name: "amount1In_in", type: "[BigDecimal!]")\n  amount1In_not_in: [BigDecimal!] @source(subgraph: "uniswap", name: "amount1In_not_in", type: "[BigDecimal!]")\n  amount0Out: BigDecimal @source(subgraph: "uniswap", name: "amount0Out", type: "BigDecimal")\n  amount0Out_not: BigDecimal @source(subgraph: "uniswap", name: "amount0Out_not", type: "BigDecimal")\n  amount0Out_gt: BigDecimal @source(subgraph: "uniswap", name: "amount0Out_gt", type: "BigDecimal")\n  amount0Out_lt: BigDecimal @source(subgraph: "uniswap", name: "amount0Out_lt", type: "BigDecimal")\n  amount0Out_gte: BigDecimal @source(subgraph: "uniswap", name: "amount0Out_gte", type: "BigDecimal")\n  amount0Out_lte: BigDecimal @source(subgraph: "uniswap", name: "amount0Out_lte", type: "BigDecimal")\n  amount0Out_in: [BigDecimal!] @source(subgraph: "uniswap", name: "amount0Out_in", type: "[BigDecimal!]")\n  amount0Out_not_in: [BigDecimal!] @source(subgraph: "uniswap", name: "amount0Out_not_in", type: "[BigDecimal!]")\n  amount1Out: BigDecimal @source(subgraph: "uniswap", name: "amount1Out", type: "BigDecimal")\n  amount1Out_not: BigDecimal @source(subgraph: "uniswap", name: "amount1Out_not", type: "BigDecimal")\n  amount1Out_gt: BigDecimal @source(subgraph: "uniswap", name: "amount1Out_gt", type: "BigDecimal")\n  amount1Out_lt: BigDecimal @source(subgraph: "uniswap", name: "amount1Out_lt", type: "BigDecimal")\n  amount1Out_gte: BigDecimal @source(subgraph: "uniswap", name: "amount1Out_gte", type: "BigDecimal")\n  amount1Out_lte: BigDecimal @source(subgraph: "uniswap", name: "amount1Out_lte", type: "BigDecimal")\n  amount1Out_in: [BigDecimal!] @source(subgraph: "uniswap", name: "amount1Out_in", type: "[BigDecimal!]")\n  amount1Out_not_in: [BigDecimal!] @source(subgraph: "uniswap", name: "amount1Out_not_in", type: "[BigDecimal!]")\n  to: Bytes @source(subgraph: "uniswap", name: "to", type: "Bytes")\n  to_not: Bytes @source(subgraph: "uniswap", name: "to_not", type: "Bytes")\n  to_gt: Bytes @source(subgraph: "uniswap", name: "to_gt", type: "Bytes")\n  to_lt: Bytes @source(subgraph: "uniswap", name: "to_lt", type: "Bytes")\n  to_gte: Bytes @source(subgraph: "uniswap", name: "to_gte", type: "Bytes")\n  to_lte: Bytes @source(subgraph: "uniswap", name: "to_lte", type: "Bytes")\n  to_in: [Bytes!] @source(subgraph: "uniswap", name: "to_in", type: "[Bytes!]")\n  to_not_in: [Bytes!] @source(subgraph: "uniswap", name: "to_not_in", type: "[Bytes!]")\n  to_contains: Bytes @source(subgraph: "uniswap", name: "to_contains", type: "Bytes")\n  to_not_contains: Bytes @source(subgraph: "uniswap", name: "to_not_contains", type: "Bytes")\n  logIndex: BigInt @source(subgraph: "uniswap", name: "logIndex", type: "BigInt")\n  logIndex_not: BigInt @source(subgraph: "uniswap", name: "logIndex_not", type: "BigInt")\n  logIndex_gt: BigInt @source(subgraph: "uniswap", name: "logIndex_gt", type: "BigInt")\n  logIndex_lt: BigInt @source(subgraph: "uniswap", name: "logIndex_lt", type: "BigInt")\n  logIndex_gte: BigInt @source(subgraph: "uniswap", name: "logIndex_gte", type: "BigInt")\n  logIndex_lte: BigInt @source(subgraph: "uniswap", name: "logIndex_lte", type: "BigInt")\n  logIndex_in: [BigInt!] @source(subgraph: "uniswap", name: "logIndex_in", type: "[BigInt!]")\n  logIndex_not_in: [BigInt!] @source(subgraph: "uniswap", name: "logIndex_not_in", type: "[BigInt!]")\n  amountUSD: BigDecimal @source(subgraph: "uniswap", name: "amountUSD", type: "BigDecimal")\n  amountUSD_not: BigDecimal @source(subgraph: "uniswap", name: "amountUSD_not", type: "BigDecimal")\n  amountUSD_gt: BigDecimal @source(subgraph: "uniswap", name: "amountUSD_gt", type: "BigDecimal")\n  amountUSD_lt: BigDecimal @source(subgraph: "uniswap", name: "amountUSD_lt", type: "BigDecimal")\n  amountUSD_gte: BigDecimal @source(subgraph: "uniswap", name: "amountUSD_gte", type: "BigDecimal")\n  amountUSD_lte: BigDecimal @source(subgraph: "uniswap", name: "amountUSD_lte", type: "BigDecimal")\n  amountUSD_in: [BigDecimal!] @source(subgraph: "uniswap", name: "amountUSD_in", type: "[BigDecimal!]")\n  amountUSD_not_in: [BigDecimal!] @source(subgraph: "uniswap", name: "amountUSD_not_in", type: "[BigDecimal!]")\n  """Filter for the block changed event."""\n  _change_block: BlockChangedFilter @source(subgraph: "uniswap", name: "_change_block", type: "BlockChangedFilter")\n  and: [Swap_filter] @source(subgraph: "uniswap", name: "and", type: "[Swap_filter]")\n  or: [Swap_filter] @source(subgraph: "uniswap", name: "or", type: "[Swap_filter]")\n}\n\nenum Swap_orderBy @source(subgraph: "uniswap", name: "Swap_orderBy") {\n  id @source(subgraph: "uniswap", name: "id")\n  transaction @source(subgraph: "uniswap", name: "transaction")\n  transaction__id @source(subgraph: "uniswap", name: "transaction__id")\n  transaction__blockNumber @source(subgraph: "uniswap", name: "transaction__blockNumber")\n  transaction__timestamp @source(subgraph: "uniswap", name: "transaction__timestamp")\n  timestamp @source(subgraph: "uniswap", name: "timestamp")\n  pair @source(subgraph: "uniswap", name: "pair")\n  pair__id @source(subgraph: "uniswap", name: "pair__id")\n  pair__reserve0 @source(subgraph: "uniswap", name: "pair__reserve0")\n  pair__reserve1 @source(subgraph: "uniswap", name: "pair__reserve1")\n  pair__totalSupply @source(subgraph: "uniswap", name: "pair__totalSupply")\n  pair__reserveETH @source(subgraph: "uniswap", name: "pair__reserveETH")\n  pair__reserveUSD @source(subgraph: "uniswap", name: "pair__reserveUSD")\n  pair__trackedReserveETH @source(subgraph: "uniswap", name: "pair__trackedReserveETH")\n  pair__token0Price @source(subgraph: "uniswap", name: "pair__token0Price")\n  pair__token1Price @source(subgraph: "uniswap", name: "pair__token1Price")\n  pair__volumeToken0 @source(subgraph: "uniswap", name: "pair__volumeToken0")\n  pair__volumeToken1 @source(subgraph: "uniswap", name: "pair__volumeToken1")\n  pair__volumeUSD @source(subgraph: "uniswap", name: "pair__volumeUSD")\n  pair__untrackedVolumeUSD @source(subgraph: "uniswap", name: "pair__untrackedVolumeUSD")\n  pair__txCount @source(subgraph: "uniswap", name: "pair__txCount")\n  pair__createdAtTimestamp @source(subgraph: "uniswap", name: "pair__createdAtTimestamp")\n  pair__createdAtBlockNumber @source(subgraph: "uniswap", name: "pair__createdAtBlockNumber")\n  pair__liquidityProviderCount @source(subgraph: "uniswap", name: "pair__liquidityProviderCount")\n  sender @source(subgraph: "uniswap", name: "sender")\n  from @source(subgraph: "uniswap", name: "from")\n  amount0In @source(subgraph: "uniswap", name: "amount0In")\n  amount1In @source(subgraph: "uniswap", name: "amount1In")\n  amount0Out @source(subgraph: "uniswap", name: "amount0Out")\n  amount1Out @source(subgraph: "uniswap", name: "amount1Out")\n  to @source(subgraph: "uniswap", name: "to")\n  logIndex @source(subgraph: "uniswap", name: "logIndex")\n  amountUSD @source(subgraph: "uniswap", name: "amountUSD")\n}\n\ntype Token @source(subgraph: "uniswap", name: "Token") @resolver(subgraph: "uniswap", operation: "query TokenById($Token_id: ID!) { token(id: $Token_id) }", kind: "FETCH") @resolver(subgraph: "uniswap", operation: "query GetTokenById($Token_id: ID!) { tokens(where: { id: $Token_id) } }", kind: "FETCH") @resolver(subgraph: "uniswap", operation: "query GetTokensByIds($Token_id: [ID!]!) { tokens(where: { id_in: $Token_id }) }", kind: "BATCH") @variable(subgraph: "uniswap", name: "Token_id", select: "id") {\n  id: ID! @source(subgraph: "uniswap", name: "id", type: "ID!")\n  symbol: String! @source(subgraph: "uniswap", name: "symbol", type: "String!")\n  name: String! @source(subgraph: "uniswap", name: "name", type: "String!")\n  decimals: BigInt! @source(subgraph: "uniswap", name: "decimals", type: "BigInt!")\n  totalSupply: BigInt! @source(subgraph: "uniswap", name: "totalSupply", type: "BigInt!")\n  tradeVolume: BigDecimal! @source(subgraph: "uniswap", name: "tradeVolume", type: "BigDecimal!")\n  tradeVolumeUSD: BigDecimal! @source(subgraph: "uniswap", name: "tradeVolumeUSD", type: "BigDecimal!")\n  untrackedVolumeUSD: BigDecimal! @source(subgraph: "uniswap", name: "untrackedVolumeUSD", type: "BigDecimal!")\n  txCount: BigInt! @source(subgraph: "uniswap", name: "txCount", type: "BigInt!")\n  totalLiquidity: BigDecimal! @source(subgraph: "uniswap", name: "totalLiquidity", type: "BigDecimal!")\n  derivedETH: BigDecimal @source(subgraph: "uniswap", name: "derivedETH", type: "BigDecimal")\n  tokenDayData(skip: Int = 0, first: Int = 100, orderBy: TokenDayData_orderBy, orderDirection: OrderDirection, where: TokenDayData_filter): [TokenDayData!]! @source(subgraph: "uniswap", name: "tokenDayData", type: "[TokenDayData!]!")\n  pairDayDataBase(skip: Int = 0, first: Int = 100, orderBy: PairDayData_orderBy, orderDirection: OrderDirection, where: PairDayData_filter): [PairDayData!]! @source(subgraph: "uniswap", name: "pairDayDataBase", type: "[PairDayData!]!")\n  pairDayDataQuote(skip: Int = 0, first: Int = 100, orderBy: PairDayData_orderBy, orderDirection: OrderDirection, where: PairDayData_filter): [PairDayData!]! @source(subgraph: "uniswap", name: "pairDayDataQuote", type: "[PairDayData!]!")\n  pairBase(skip: Int = 0, first: Int = 100, orderBy: Pair_orderBy, orderDirection: OrderDirection, where: Pair_filter): [Pair!]! @source(subgraph: "uniswap", name: "pairBase", type: "[Pair!]!")\n  pairQuote(skip: Int = 0, first: Int = 100, orderBy: Pair_orderBy, orderDirection: OrderDirection, where: Pair_filter): [Pair!]! @source(subgraph: "uniswap", name: "pairQuote", type: "[Pair!]!")\n}\n\ntype TokenDayData @source(subgraph: "uniswap", name: "TokenDayData") @resolver(subgraph: "uniswap", operation: "query TokenDayDataById($TokenDayData_id: ID!) { tokenDayData(id: $TokenDayData_id) }", kind: "FETCH") @resolver(subgraph: "uniswap", operation: "query GetTokenDayDataById($TokenDayData_id: ID!) { tokenDayDatas(where: { id: $TokenDayData_id) } }", kind: "FETCH") @resolver(subgraph: "uniswap", operation: "query GetTokenDayDataByIds($TokenDayData_id: [ID!]!) { tokenDayDatas(where: { id_in: $TokenDayData_id }) }", kind: "BATCH") @variable(subgraph: "uniswap", name: "TokenDayData_id", select: "id") {\n  id: ID! @source(subgraph: "uniswap", name: "id", type: "ID!")\n  date: Int! @source(subgraph: "uniswap", name: "date", type: "Int!")\n  token: Token! @source(subgraph: "uniswap", name: "token", type: "Token!")\n  dailyVolumeToken: BigDecimal! @source(subgraph: "uniswap", name: "dailyVolumeToken", type: "BigDecimal!")\n  dailyVolumeETH: BigDecimal! @source(subgraph: "uniswap", name: "dailyVolumeETH", type: "BigDecimal!")\n  dailyVolumeUSD: BigDecimal! @source(subgraph: "uniswap", name: "dailyVolumeUSD", type: "BigDecimal!")\n  dailyTxns: BigInt! @source(subgraph: "uniswap", name: "dailyTxns", type: "BigInt!")\n  totalLiquidityToken: BigDecimal! @source(subgraph: "uniswap", name: "totalLiquidityToken", type: "BigDecimal!")\n  totalLiquidityETH: BigDecimal! @source(subgraph: "uniswap", name: "totalLiquidityETH", type: "BigDecimal!")\n  totalLiquidityUSD: BigDecimal! @source(subgraph: "uniswap", name: "totalLiquidityUSD", type: "BigDecimal!")\n  priceUSD: BigDecimal! @source(subgraph: "uniswap", name: "priceUSD", type: "BigDecimal!")\n}\n\ninput TokenDayData_filter @source(subgraph: "uniswap", name: "TokenDayData_filter") {\n  id: ID @source(subgraph: "uniswap", name: "id", type: "ID")\n  id_not: ID @source(subgraph: "uniswap", name: "id_not", type: "ID")\n  id_gt: ID @source(subgraph: "uniswap", name: "id_gt", type: "ID")\n  id_lt: ID @source(subgraph: "uniswap", name: "id_lt", type: "ID")\n  id_gte: ID @source(subgraph: "uniswap", name: "id_gte", type: "ID")\n  id_lte: ID @source(subgraph: "uniswap", name: "id_lte", type: "ID")\n  id_in: [ID!] @source(subgraph: "uniswap", name: "id_in", type: "[ID!]")\n  id_not_in: [ID!] @source(subgraph: "uniswap", name: "id_not_in", type: "[ID!]")\n  date: Int @source(subgraph: "uniswap", name: "date", type: "Int")\n  date_not: Int @source(subgraph: "uniswap", name: "date_not", type: "Int")\n  date_gt: Int @source(subgraph: "uniswap", name: "date_gt", type: "Int")\n  date_lt: Int @source(subgraph: "uniswap", name: "date_lt", type: "Int")\n  date_gte: Int @source(subgraph: "uniswap", name: "date_gte", type: "Int")\n  date_lte: Int @source(subgraph: "uniswap", name: "date_lte", type: "Int")\n  date_in: [Int!] @source(subgraph: "uniswap", name: "date_in", type: "[Int!]")\n  date_not_in: [Int!] @source(subgraph: "uniswap", name: "date_not_in", type: "[Int!]")\n  token: String @source(subgraph: "uniswap", name: "token", type: "String")\n  token_not: String @source(subgraph: "uniswap", name: "token_not", type: "String")\n  token_gt: String @source(subgraph: "uniswap", name: "token_gt", type: "String")\n  token_lt: String @source(subgraph: "uniswap", name: "token_lt", type: "String")\n  token_gte: String @source(subgraph: "uniswap", name: "token_gte", type: "String")\n  token_lte: String @source(subgraph: "uniswap", name: "token_lte", type: "String")\n  token_in: [String!] @source(subgraph: "uniswap", name: "token_in", type: "[String!]")\n  token_not_in: [String!] @source(subgraph: "uniswap", name: "token_not_in", type: "[String!]")\n  token_contains: String @source(subgraph: "uniswap", name: "token_contains", type: "String")\n  token_contains_nocase: String @source(subgraph: "uniswap", name: "token_contains_nocase", type: "String")\n  token_not_contains: String @source(subgraph: "uniswap", name: "token_not_contains", type: "String")\n  token_not_contains_nocase: String @source(subgraph: "uniswap", name: "token_not_contains_nocase", type: "String")\n  token_starts_with: String @source(subgraph: "uniswap", name: "token_starts_with", type: "String")\n  token_starts_with_nocase: String @source(subgraph: "uniswap", name: "token_starts_with_nocase", type: "String")\n  token_not_starts_with: String @source(subgraph: "uniswap", name: "token_not_starts_with", type: "String")\n  token_not_starts_with_nocase: String @source(subgraph: "uniswap", name: "token_not_starts_with_nocase", type: "String")\n  token_ends_with: String @source(subgraph: "uniswap", name: "token_ends_with", type: "String")\n  token_ends_with_nocase: String @source(subgraph: "uniswap", name: "token_ends_with_nocase", type: "String")\n  token_not_ends_with: String @source(subgraph: "uniswap", name: "token_not_ends_with", type: "String")\n  token_not_ends_with_nocase: String @source(subgraph: "uniswap", name: "token_not_ends_with_nocase", type: "String")\n  token_: Token_filter @source(subgraph: "uniswap", name: "token_", type: "Token_filter")\n  dailyVolumeToken: BigDecimal @source(subgraph: "uniswap", name: "dailyVolumeToken", type: "BigDecimal")\n  dailyVolumeToken_not: BigDecimal @source(subgraph: "uniswap", name: "dailyVolumeToken_not", type: "BigDecimal")\n  dailyVolumeToken_gt: BigDecimal @source(subgraph: "uniswap", name: "dailyVolumeToken_gt", type: "BigDecimal")\n  dailyVolumeToken_lt: BigDecimal @source(subgraph: "uniswap", name: "dailyVolumeToken_lt", type: "BigDecimal")\n  dailyVolumeToken_gte: BigDecimal @source(subgraph: "uniswap", name: "dailyVolumeToken_gte", type: "BigDecimal")\n  dailyVolumeToken_lte: BigDecimal @source(subgraph: "uniswap", name: "dailyVolumeToken_lte", type: "BigDecimal")\n  dailyVolumeToken_in: [BigDecimal!] @source(subgraph: "uniswap", name: "dailyVolumeToken_in", type: "[BigDecimal!]")\n  dailyVolumeToken_not_in: [BigDecimal!] @source(subgraph: "uniswap", name: "dailyVolumeToken_not_in", type: "[BigDecimal!]")\n  dailyVolumeETH: BigDecimal @source(subgraph: "uniswap", name: "dailyVolumeETH", type: "BigDecimal")\n  dailyVolumeETH_not: BigDecimal @source(subgraph: "uniswap", name: "dailyVolumeETH_not", type: "BigDecimal")\n  dailyVolumeETH_gt: BigDecimal @source(subgraph: "uniswap", name: "dailyVolumeETH_gt", type: "BigDecimal")\n  dailyVolumeETH_lt: BigDecimal @source(subgraph: "uniswap", name: "dailyVolumeETH_lt", type: "BigDecimal")\n  dailyVolumeETH_gte: BigDecimal @source(subgraph: "uniswap", name: "dailyVolumeETH_gte", type: "BigDecimal")\n  dailyVolumeETH_lte: BigDecimal @source(subgraph: "uniswap", name: "dailyVolumeETH_lte", type: "BigDecimal")\n  dailyVolumeETH_in: [BigDecimal!] @source(subgraph: "uniswap", name: "dailyVolumeETH_in", type: "[BigDecimal!]")\n  dailyVolumeETH_not_in: [BigDecimal!] @source(subgraph: "uniswap", name: "dailyVolumeETH_not_in", type: "[BigDecimal!]")\n  dailyVolumeUSD: BigDecimal @source(subgraph: "uniswap", name: "dailyVolumeUSD", type: "BigDecimal")\n  dailyVolumeUSD_not: BigDecimal @source(subgraph: "uniswap", name: "dailyVolumeUSD_not", type: "BigDecimal")\n  dailyVolumeUSD_gt: BigDecimal @source(subgraph: "uniswap", name: "dailyVolumeUSD_gt", type: "BigDecimal")\n  dailyVolumeUSD_lt: BigDecimal @source(subgraph: "uniswap", name: "dailyVolumeUSD_lt", type: "BigDecimal")\n  dailyVolumeUSD_gte: BigDecimal @source(subgraph: "uniswap", name: "dailyVolumeUSD_gte", type: "BigDecimal")\n  dailyVolumeUSD_lte: BigDecimal @source(subgraph: "uniswap", name: "dailyVolumeUSD_lte", type: "BigDecimal")\n  dailyVolumeUSD_in: [BigDecimal!] @source(subgraph: "uniswap", name: "dailyVolumeUSD_in", type: "[BigDecimal!]")\n  dailyVolumeUSD_not_in: [BigDecimal!] @source(subgraph: "uniswap", name: "dailyVolumeUSD_not_in", type: "[BigDecimal!]")\n  dailyTxns: BigInt @source(subgraph: "uniswap", name: "dailyTxns", type: "BigInt")\n  dailyTxns_not: BigInt @source(subgraph: "uniswap", name: "dailyTxns_not", type: "BigInt")\n  dailyTxns_gt: BigInt @source(subgraph: "uniswap", name: "dailyTxns_gt", type: "BigInt")\n  dailyTxns_lt: BigInt @source(subgraph: "uniswap", name: "dailyTxns_lt", type: "BigInt")\n  dailyTxns_gte: BigInt @source(subgraph: "uniswap", name: "dailyTxns_gte", type: "BigInt")\n  dailyTxns_lte: BigInt @source(subgraph: "uniswap", name: "dailyTxns_lte", type: "BigInt")\n  dailyTxns_in: [BigInt!] @source(subgraph: "uniswap", name: "dailyTxns_in", type: "[BigInt!]")\n  dailyTxns_not_in: [BigInt!] @source(subgraph: "uniswap", name: "dailyTxns_not_in", type: "[BigInt!]")\n  totalLiquidityToken: BigDecimal @source(subgraph: "uniswap", name: "totalLiquidityToken", type: "BigDecimal")\n  totalLiquidityToken_not: BigDecimal @source(subgraph: "uniswap", name: "totalLiquidityToken_not", type: "BigDecimal")\n  totalLiquidityToken_gt: BigDecimal @source(subgraph: "uniswap", name: "totalLiquidityToken_gt", type: "BigDecimal")\n  totalLiquidityToken_lt: BigDecimal @source(subgraph: "uniswap", name: "totalLiquidityToken_lt", type: "BigDecimal")\n  totalLiquidityToken_gte: BigDecimal @source(subgraph: "uniswap", name: "totalLiquidityToken_gte", type: "BigDecimal")\n  totalLiquidityToken_lte: BigDecimal @source(subgraph: "uniswap", name: "totalLiquidityToken_lte", type: "BigDecimal")\n  totalLiquidityToken_in: [BigDecimal!] @source(subgraph: "uniswap", name: "totalLiquidityToken_in", type: "[BigDecimal!]")\n  totalLiquidityToken_not_in: [BigDecimal!] @source(subgraph: "uniswap", name: "totalLiquidityToken_not_in", type: "[BigDecimal!]")\n  totalLiquidityETH: BigDecimal @source(subgraph: "uniswap", name: "totalLiquidityETH", type: "BigDecimal")\n  totalLiquidityETH_not: BigDecimal @source(subgraph: "uniswap", name: "totalLiquidityETH_not", type: "BigDecimal")\n  totalLiquidityETH_gt: BigDecimal @source(subgraph: "uniswap", name: "totalLiquidityETH_gt", type: "BigDecimal")\n  totalLiquidityETH_lt: BigDecimal @source(subgraph: "uniswap", name: "totalLiquidityETH_lt", type: "BigDecimal")\n  totalLiquidityETH_gte: BigDecimal @source(subgraph: "uniswap", name: "totalLiquidityETH_gte", type: "BigDecimal")\n  totalLiquidityETH_lte: BigDecimal @source(subgraph: "uniswap", name: "totalLiquidityETH_lte", type: "BigDecimal")\n  totalLiquidityETH_in: [BigDecimal!] @source(subgraph: "uniswap", name: "totalLiquidityETH_in", type: "[BigDecimal!]")\n  totalLiquidityETH_not_in: [BigDecimal!] @source(subgraph: "uniswap", name: "totalLiquidityETH_not_in", type: "[BigDecimal!]")\n  totalLiquidityUSD: BigDecimal @source(subgraph: "uniswap", name: "totalLiquidityUSD", type: "BigDecimal")\n  totalLiquidityUSD_not: BigDecimal @source(subgraph: "uniswap", name: "totalLiquidityUSD_not", type: "BigDecimal")\n  totalLiquidityUSD_gt: BigDecimal @source(subgraph: "uniswap", name: "totalLiquidityUSD_gt", type: "BigDecimal")\n  totalLiquidityUSD_lt: BigDecimal @source(subgraph: "uniswap", name: "totalLiquidityUSD_lt", type: "BigDecimal")\n  totalLiquidityUSD_gte: BigDecimal @source(subgraph: "uniswap", name: "totalLiquidityUSD_gte", type: "BigDecimal")\n  totalLiquidityUSD_lte: BigDecimal @source(subgraph: "uniswap", name: "totalLiquidityUSD_lte", type: "BigDecimal")\n  totalLiquidityUSD_in: [BigDecimal!] @source(subgraph: "uniswap", name: "totalLiquidityUSD_in", type: "[BigDecimal!]")\n  totalLiquidityUSD_not_in: [BigDecimal!] @source(subgraph: "uniswap", name: "totalLiquidityUSD_not_in", type: "[BigDecimal!]")\n  priceUSD: BigDecimal @source(subgraph: "uniswap", name: "priceUSD", type: "BigDecimal")\n  priceUSD_not: BigDecimal @source(subgraph: "uniswap", name: "priceUSD_not", type: "BigDecimal")\n  priceUSD_gt: BigDecimal @source(subgraph: "uniswap", name: "priceUSD_gt", type: "BigDecimal")\n  priceUSD_lt: BigDecimal @source(subgraph: "uniswap", name: "priceUSD_lt", type: "BigDecimal")\n  priceUSD_gte: BigDecimal @source(subgraph: "uniswap", name: "priceUSD_gte", type: "BigDecimal")\n  priceUSD_lte: BigDecimal @source(subgraph: "uniswap", name: "priceUSD_lte", type: "BigDecimal")\n  priceUSD_in: [BigDecimal!] @source(subgraph: "uniswap", name: "priceUSD_in", type: "[BigDecimal!]")\n  priceUSD_not_in: [BigDecimal!] @source(subgraph: "uniswap", name: "priceUSD_not_in", type: "[BigDecimal!]")\n  """Filter for the block changed event."""\n  _change_block: BlockChangedFilter @source(subgraph: "uniswap", name: "_change_block", type: "BlockChangedFilter")\n  and: [TokenDayData_filter] @source(subgraph: "uniswap", name: "and", type: "[TokenDayData_filter]")\n  or: [TokenDayData_filter] @source(subgraph: "uniswap", name: "or", type: "[TokenDayData_filter]")\n}\n\nenum TokenDayData_orderBy @source(subgraph: "uniswap", name: "TokenDayData_orderBy") {\n  id @source(subgraph: "uniswap", name: "id")\n  date @source(subgraph: "uniswap", name: "date")\n  token @source(subgraph: "uniswap", name: "token")\n  token__id @source(subgraph: "uniswap", name: "token__id")\n  token__symbol @source(subgraph: "uniswap", name: "token__symbol")\n  token__name @source(subgraph: "uniswap", name: "token__name")\n  token__decimals @source(subgraph: "uniswap", name: "token__decimals")\n  token__totalSupply @source(subgraph: "uniswap", name: "token__totalSupply")\n  token__tradeVolume @source(subgraph: "uniswap", name: "token__tradeVolume")\n  token__tradeVolumeUSD @source(subgraph: "uniswap", name: "token__tradeVolumeUSD")\n  token__untrackedVolumeUSD @source(subgraph: "uniswap", name: "token__untrackedVolumeUSD")\n  token__txCount @source(subgraph: "uniswap", name: "token__txCount")\n  token__totalLiquidity @source(subgraph: "uniswap", name: "token__totalLiquidity")\n  token__derivedETH @source(subgraph: "uniswap", name: "token__derivedETH")\n  dailyVolumeToken @source(subgraph: "uniswap", name: "dailyVolumeToken")\n  dailyVolumeETH @source(subgraph: "uniswap", name: "dailyVolumeETH")\n  dailyVolumeUSD @source(subgraph: "uniswap", name: "dailyVolumeUSD")\n  dailyTxns @source(subgraph: "uniswap", name: "dailyTxns")\n  totalLiquidityToken @source(subgraph: "uniswap", name: "totalLiquidityToken")\n  totalLiquidityETH @source(subgraph: "uniswap", name: "totalLiquidityETH")\n  totalLiquidityUSD @source(subgraph: "uniswap", name: "totalLiquidityUSD")\n  priceUSD @source(subgraph: "uniswap", name: "priceUSD")\n}\n\ninput Token_filter @source(subgraph: "uniswap", name: "Token_filter") {\n  id: ID @source(subgraph: "uniswap", name: "id", type: "ID")\n  id_not: ID @source(subgraph: "uniswap", name: "id_not", type: "ID")\n  id_gt: ID @source(subgraph: "uniswap", name: "id_gt", type: "ID")\n  id_lt: ID @source(subgraph: "uniswap", name: "id_lt", type: "ID")\n  id_gte: ID @source(subgraph: "uniswap", name: "id_gte", type: "ID")\n  id_lte: ID @source(subgraph: "uniswap", name: "id_lte", type: "ID")\n  id_in: [ID!] @source(subgraph: "uniswap", name: "id_in", type: "[ID!]")\n  id_not_in: [ID!] @source(subgraph: "uniswap", name: "id_not_in", type: "[ID!]")\n  symbol: String @source(subgraph: "uniswap", name: "symbol", type: "String")\n  symbol_not: String @source(subgraph: "uniswap", name: "symbol_not", type: "String")\n  symbol_gt: String @source(subgraph: "uniswap", name: "symbol_gt", type: "String")\n  symbol_lt: String @source(subgraph: "uniswap", name: "symbol_lt", type: "String")\n  symbol_gte: String @source(subgraph: "uniswap", name: "symbol_gte", type: "String")\n  symbol_lte: String @source(subgraph: "uniswap", name: "symbol_lte", type: "String")\n  symbol_in: [String!] @source(subgraph: "uniswap", name: "symbol_in", type: "[String!]")\n  symbol_not_in: [String!] @source(subgraph: "uniswap", name: "symbol_not_in", type: "[String!]")\n  symbol_contains: String @source(subgraph: "uniswap", name: "symbol_contains", type: "String")\n  symbol_contains_nocase: String @source(subgraph: "uniswap", name: "symbol_contains_nocase", type: "String")\n  symbol_not_contains: String @source(subgraph: "uniswap", name: "symbol_not_contains", type: "String")\n  symbol_not_contains_nocase: String @source(subgraph: "uniswap", name: "symbol_not_contains_nocase", type: "String")\n  symbol_starts_with: String @source(subgraph: "uniswap", name: "symbol_starts_with", type: "String")\n  symbol_starts_with_nocase: String @source(subgraph: "uniswap", name: "symbol_starts_with_nocase", type: "String")\n  symbol_not_starts_with: String @source(subgraph: "uniswap", name: "symbol_not_starts_with", type: "String")\n  symbol_not_starts_with_nocase: String @source(subgraph: "uniswap", name: "symbol_not_starts_with_nocase", type: "String")\n  symbol_ends_with: String @source(subgraph: "uniswap", name: "symbol_ends_with", type: "String")\n  symbol_ends_with_nocase: String @source(subgraph: "uniswap", name: "symbol_ends_with_nocase", type: "String")\n  symbol_not_ends_with: String @source(subgraph: "uniswap", name: "symbol_not_ends_with", type: "String")\n  symbol_not_ends_with_nocase: String @source(subgraph: "uniswap", name: "symbol_not_ends_with_nocase", type: "String")\n  name: String @source(subgraph: "uniswap", name: "name", type: "String")\n  name_not: String @source(subgraph: "uniswap", name: "name_not", type: "String")\n  name_gt: String @source(subgraph: "uniswap", name: "name_gt", type: "String")\n  name_lt: String @source(subgraph: "uniswap", name: "name_lt", type: "String")\n  name_gte: String @source(subgraph: "uniswap", name: "name_gte", type: "String")\n  name_lte: String @source(subgraph: "uniswap", name: "name_lte", type: "String")\n  name_in: [String!] @source(subgraph: "uniswap", name: "name_in", type: "[String!]")\n  name_not_in: [String!] @source(subgraph: "uniswap", name: "name_not_in", type: "[String!]")\n  name_contains: String @source(subgraph: "uniswap", name: "name_contains", type: "String")\n  name_contains_nocase: String @source(subgraph: "uniswap", name: "name_contains_nocase", type: "String")\n  name_not_contains: String @source(subgraph: "uniswap", name: "name_not_contains", type: "String")\n  name_not_contains_nocase: String @source(subgraph: "uniswap", name: "name_not_contains_nocase", type: "String")\n  name_starts_with: String @source(subgraph: "uniswap", name: "name_starts_with", type: "String")\n  name_starts_with_nocase: String @source(subgraph: "uniswap", name: "name_starts_with_nocase", type: "String")\n  name_not_starts_with: String @source(subgraph: "uniswap", name: "name_not_starts_with", type: "String")\n  name_not_starts_with_nocase: String @source(subgraph: "uniswap", name: "name_not_starts_with_nocase", type: "String")\n  name_ends_with: String @source(subgraph: "uniswap", name: "name_ends_with", type: "String")\n  name_ends_with_nocase: String @source(subgraph: "uniswap", name: "name_ends_with_nocase", type: "String")\n  name_not_ends_with: String @source(subgraph: "uniswap", name: "name_not_ends_with", type: "String")\n  name_not_ends_with_nocase: String @source(subgraph: "uniswap", name: "name_not_ends_with_nocase", type: "String")\n  decimals: BigInt @source(subgraph: "uniswap", name: "decimals", type: "BigInt")\n  decimals_not: BigInt @source(subgraph: "uniswap", name: "decimals_not", type: "BigInt")\n  decimals_gt: BigInt @source(subgraph: "uniswap", name: "decimals_gt", type: "BigInt")\n  decimals_lt: BigInt @source(subgraph: "uniswap", name: "decimals_lt", type: "BigInt")\n  decimals_gte: BigInt @source(subgraph: "uniswap", name: "decimals_gte", type: "BigInt")\n  decimals_lte: BigInt @source(subgraph: "uniswap", name: "decimals_lte", type: "BigInt")\n  decimals_in: [BigInt!] @source(subgraph: "uniswap", name: "decimals_in", type: "[BigInt!]")\n  decimals_not_in: [BigInt!] @source(subgraph: "uniswap", name: "decimals_not_in", type: "[BigInt!]")\n  totalSupply: BigInt @source(subgraph: "uniswap", name: "totalSupply", type: "BigInt")\n  totalSupply_not: BigInt @source(subgraph: "uniswap", name: "totalSupply_not", type: "BigInt")\n  totalSupply_gt: BigInt @source(subgraph: "uniswap", name: "totalSupply_gt", type: "BigInt")\n  totalSupply_lt: BigInt @source(subgraph: "uniswap", name: "totalSupply_lt", type: "BigInt")\n  totalSupply_gte: BigInt @source(subgraph: "uniswap", name: "totalSupply_gte", type: "BigInt")\n  totalSupply_lte: BigInt @source(subgraph: "uniswap", name: "totalSupply_lte", type: "BigInt")\n  totalSupply_in: [BigInt!] @source(subgraph: "uniswap", name: "totalSupply_in", type: "[BigInt!]")\n  totalSupply_not_in: [BigInt!] @source(subgraph: "uniswap", name: "totalSupply_not_in", type: "[BigInt!]")\n  tradeVolume: BigDecimal @source(subgraph: "uniswap", name: "tradeVolume", type: "BigDecimal")\n  tradeVolume_not: BigDecimal @source(subgraph: "uniswap", name: "tradeVolume_not", type: "BigDecimal")\n  tradeVolume_gt: BigDecimal @source(subgraph: "uniswap", name: "tradeVolume_gt", type: "BigDecimal")\n  tradeVolume_lt: BigDecimal @source(subgraph: "uniswap", name: "tradeVolume_lt", type: "BigDecimal")\n  tradeVolume_gte: BigDecimal @source(subgraph: "uniswap", name: "tradeVolume_gte", type: "BigDecimal")\n  tradeVolume_lte: BigDecimal @source(subgraph: "uniswap", name: "tradeVolume_lte", type: "BigDecimal")\n  tradeVolume_in: [BigDecimal!] @source(subgraph: "uniswap", name: "tradeVolume_in", type: "[BigDecimal!]")\n  tradeVolume_not_in: [BigDecimal!] @source(subgraph: "uniswap", name: "tradeVolume_not_in", type: "[BigDecimal!]")\n  tradeVolumeUSD: BigDecimal @source(subgraph: "uniswap", name: "tradeVolumeUSD", type: "BigDecimal")\n  tradeVolumeUSD_not: BigDecimal @source(subgraph: "uniswap", name: "tradeVolumeUSD_not", type: "BigDecimal")\n  tradeVolumeUSD_gt: BigDecimal @source(subgraph: "uniswap", name: "tradeVolumeUSD_gt", type: "BigDecimal")\n  tradeVolumeUSD_lt: BigDecimal @source(subgraph: "uniswap", name: "tradeVolumeUSD_lt", type: "BigDecimal")\n  tradeVolumeUSD_gte: BigDecimal @source(subgraph: "uniswap", name: "tradeVolumeUSD_gte", type: "BigDecimal")\n  tradeVolumeUSD_lte: BigDecimal @source(subgraph: "uniswap", name: "tradeVolumeUSD_lte", type: "BigDecimal")\n  tradeVolumeUSD_in: [BigDecimal!] @source(subgraph: "uniswap", name: "tradeVolumeUSD_in", type: "[BigDecimal!]")\n  tradeVolumeUSD_not_in: [BigDecimal!] @source(subgraph: "uniswap", name: "tradeVolumeUSD_not_in", type: "[BigDecimal!]")\n  untrackedVolumeUSD: BigDecimal @source(subgraph: "uniswap", name: "untrackedVolumeUSD", type: "BigDecimal")\n  untrackedVolumeUSD_not: BigDecimal @source(subgraph: "uniswap", name: "untrackedVolumeUSD_not", type: "BigDecimal")\n  untrackedVolumeUSD_gt: BigDecimal @source(subgraph: "uniswap", name: "untrackedVolumeUSD_gt", type: "BigDecimal")\n  untrackedVolumeUSD_lt: BigDecimal @source(subgraph: "uniswap", name: "untrackedVolumeUSD_lt", type: "BigDecimal")\n  untrackedVolumeUSD_gte: BigDecimal @source(subgraph: "uniswap", name: "untrackedVolumeUSD_gte", type: "BigDecimal")\n  untrackedVolumeUSD_lte: BigDecimal @source(subgraph: "uniswap", name: "untrackedVolumeUSD_lte", type: "BigDecimal")\n  untrackedVolumeUSD_in: [BigDecimal!] @source(subgraph: "uniswap", name: "untrackedVolumeUSD_in", type: "[BigDecimal!]")\n  untrackedVolumeUSD_not_in: [BigDecimal!] @source(subgraph: "uniswap", name: "untrackedVolumeUSD_not_in", type: "[BigDecimal!]")\n  txCount: BigInt @source(subgraph: "uniswap", name: "txCount", type: "BigInt")\n  txCount_not: BigInt @source(subgraph: "uniswap", name: "txCount_not", type: "BigInt")\n  txCount_gt: BigInt @source(subgraph: "uniswap", name: "txCount_gt", type: "BigInt")\n  txCount_lt: BigInt @source(subgraph: "uniswap", name: "txCount_lt", type: "BigInt")\n  txCount_gte: BigInt @source(subgraph: "uniswap", name: "txCount_gte", type: "BigInt")\n  txCount_lte: BigInt @source(subgraph: "uniswap", name: "txCount_lte", type: "BigInt")\n  txCount_in: [BigInt!] @source(subgraph: "uniswap", name: "txCount_in", type: "[BigInt!]")\n  txCount_not_in: [BigInt!] @source(subgraph: "uniswap", name: "txCount_not_in", type: "[BigInt!]")\n  totalLiquidity: BigDecimal @source(subgraph: "uniswap", name: "totalLiquidity", type: "BigDecimal")\n  totalLiquidity_not: BigDecimal @source(subgraph: "uniswap", name: "totalLiquidity_not", type: "BigDecimal")\n  totalLiquidity_gt: BigDecimal @source(subgraph: "uniswap", name: "totalLiquidity_gt", type: "BigDecimal")\n  totalLiquidity_lt: BigDecimal @source(subgraph: "uniswap", name: "totalLiquidity_lt", type: "BigDecimal")\n  totalLiquidity_gte: BigDecimal @source(subgraph: "uniswap", name: "totalLiquidity_gte", type: "BigDecimal")\n  totalLiquidity_lte: BigDecimal @source(subgraph: "uniswap", name: "totalLiquidity_lte", type: "BigDecimal")\n  totalLiquidity_in: [BigDecimal!] @source(subgraph: "uniswap", name: "totalLiquidity_in", type: "[BigDecimal!]")\n  totalLiquidity_not_in: [BigDecimal!] @source(subgraph: "uniswap", name: "totalLiquidity_not_in", type: "[BigDecimal!]")\n  derivedETH: BigDecimal @source(subgraph: "uniswap", name: "derivedETH", type: "BigDecimal")\n  derivedETH_not: BigDecimal @source(subgraph: "uniswap", name: "derivedETH_not", type: "BigDecimal")\n  derivedETH_gt: BigDecimal @source(subgraph: "uniswap", name: "derivedETH_gt", type: "BigDecimal")\n  derivedETH_lt: BigDecimal @source(subgraph: "uniswap", name: "derivedETH_lt", type: "BigDecimal")\n  derivedETH_gte: BigDecimal @source(subgraph: "uniswap", name: "derivedETH_gte", type: "BigDecimal")\n  derivedETH_lte: BigDecimal @source(subgraph: "uniswap", name: "derivedETH_lte", type: "BigDecimal")\n  derivedETH_in: [BigDecimal!] @source(subgraph: "uniswap", name: "derivedETH_in", type: "[BigDecimal!]")\n  derivedETH_not_in: [BigDecimal!] @source(subgraph: "uniswap", name: "derivedETH_not_in", type: "[BigDecimal!]")\n  tokenDayData_: TokenDayData_filter @source(subgraph: "uniswap", name: "tokenDayData_", type: "TokenDayData_filter")\n  pairDayDataBase_: PairDayData_filter @source(subgraph: "uniswap", name: "pairDayDataBase_", type: "PairDayData_filter")\n  pairDayDataQuote_: PairDayData_filter @source(subgraph: "uniswap", name: "pairDayDataQuote_", type: "PairDayData_filter")\n  pairBase_: Pair_filter @source(subgraph: "uniswap", name: "pairBase_", type: "Pair_filter")\n  pairQuote_: Pair_filter @source(subgraph: "uniswap", name: "pairQuote_", type: "Pair_filter")\n  """Filter for the block changed event."""\n  _change_block: BlockChangedFilter @source(subgraph: "uniswap", name: "_change_block", type: "BlockChangedFilter")\n  and: [Token_filter] @source(subgraph: "uniswap", name: "and", type: "[Token_filter]")\n  or: [Token_filter] @source(subgraph: "uniswap", name: "or", type: "[Token_filter]")\n}\n\nenum Token_orderBy @source(subgraph: "uniswap", name: "Token_orderBy") {\n  id @source(subgraph: "uniswap", name: "id")\n  symbol @source(subgraph: "uniswap", name: "symbol")\n  name @source(subgraph: "uniswap", name: "name")\n  decimals @source(subgraph: "uniswap", name: "decimals")\n  totalSupply @source(subgraph: "uniswap", name: "totalSupply")\n  tradeVolume @source(subgraph: "uniswap", name: "tradeVolume")\n  tradeVolumeUSD @source(subgraph: "uniswap", name: "tradeVolumeUSD")\n  untrackedVolumeUSD @source(subgraph: "uniswap", name: "untrackedVolumeUSD")\n  txCount @source(subgraph: "uniswap", name: "txCount")\n  totalLiquidity @source(subgraph: "uniswap", name: "totalLiquidity")\n  derivedETH @source(subgraph: "uniswap", name: "derivedETH")\n  tokenDayData @source(subgraph: "uniswap", name: "tokenDayData")\n  pairDayDataBase @source(subgraph: "uniswap", name: "pairDayDataBase")\n  pairDayDataQuote @source(subgraph: "uniswap", name: "pairDayDataQuote")\n  pairBase @source(subgraph: "uniswap", name: "pairBase")\n  pairQuote @source(subgraph: "uniswap", name: "pairQuote")\n}\n\ntype UniswapDayData @source(subgraph: "uniswap", name: "UniswapDayData") @resolver(subgraph: "uniswap", operation: "query UniswapDayDataById($UniswapDayData_id: ID!) { uniswapDayData(id: $UniswapDayData_id) }", kind: "FETCH") @resolver(subgraph: "uniswap", operation: "query GetUniswapDayDataById($UniswapDayData_id: ID!) { uniswapDayDatas(where: { id: $UniswapDayData_id) } }", kind: "FETCH") @resolver(subgraph: "uniswap", operation: "query GetUniswapDayDataByIds($UniswapDayData_id: [ID!]!) { uniswapDayDatas(where: { id_in: $UniswapDayData_id }) }", kind: "BATCH") @variable(subgraph: "uniswap", name: "UniswapDayData_id", select: "id") {\n  id: ID! @source(subgraph: "uniswap", name: "id", type: "ID!")\n  date: Int! @source(subgraph: "uniswap", name: "date", type: "Int!")\n  dailyVolumeETH: BigDecimal! @source(subgraph: "uniswap", name: "dailyVolumeETH", type: "BigDecimal!")\n  dailyVolumeUSD: BigDecimal! @source(subgraph: "uniswap", name: "dailyVolumeUSD", type: "BigDecimal!")\n  dailyVolumeUntracked: BigDecimal! @source(subgraph: "uniswap", name: "dailyVolumeUntracked", type: "BigDecimal!")\n  totalVolumeETH: BigDecimal! @source(subgraph: "uniswap", name: "totalVolumeETH", type: "BigDecimal!")\n  totalLiquidityETH: BigDecimal! @source(subgraph: "uniswap", name: "totalLiquidityETH", type: "BigDecimal!")\n  totalVolumeUSD: BigDecimal! @source(subgraph: "uniswap", name: "totalVolumeUSD", type: "BigDecimal!")\n  totalLiquidityUSD: BigDecimal! @source(subgraph: "uniswap", name: "totalLiquidityUSD", type: "BigDecimal!")\n  txCount: BigInt! @source(subgraph: "uniswap", name: "txCount", type: "BigInt!")\n}\n\ninput UniswapDayData_filter @source(subgraph: "uniswap", name: "UniswapDayData_filter") {\n  id: ID @source(subgraph: "uniswap", name: "id", type: "ID")\n  id_not: ID @source(subgraph: "uniswap", name: "id_not", type: "ID")\n  id_gt: ID @source(subgraph: "uniswap", name: "id_gt", type: "ID")\n  id_lt: ID @source(subgraph: "uniswap", name: "id_lt", type: "ID")\n  id_gte: ID @source(subgraph: "uniswap", name: "id_gte", type: "ID")\n  id_lte: ID @source(subgraph: "uniswap", name: "id_lte", type: "ID")\n  id_in: [ID!] @source(subgraph: "uniswap", name: "id_in", type: "[ID!]")\n  id_not_in: [ID!] @source(subgraph: "uniswap", name: "id_not_in", type: "[ID!]")\n  date: Int @source(subgraph: "uniswap", name: "date", type: "Int")\n  date_not: Int @source(subgraph: "uniswap", name: "date_not", type: "Int")\n  date_gt: Int @source(subgraph: "uniswap", name: "date_gt", type: "Int")\n  date_lt: Int @source(subgraph: "uniswap", name: "date_lt", type: "Int")\n  date_gte: Int @source(subgraph: "uniswap", name: "date_gte", type: "Int")\n  date_lte: Int @source(subgraph: "uniswap", name: "date_lte", type: "Int")\n  date_in: [Int!] @source(subgraph: "uniswap", name: "date_in", type: "[Int!]")\n  date_not_in: [Int!] @source(subgraph: "uniswap", name: "date_not_in", type: "[Int!]")\n  dailyVolumeETH: BigDecimal @source(subgraph: "uniswap", name: "dailyVolumeETH", type: "BigDecimal")\n  dailyVolumeETH_not: BigDecimal @source(subgraph: "uniswap", name: "dailyVolumeETH_not", type: "BigDecimal")\n  dailyVolumeETH_gt: BigDecimal @source(subgraph: "uniswap", name: "dailyVolumeETH_gt", type: "BigDecimal")\n  dailyVolumeETH_lt: BigDecimal @source(subgraph: "uniswap", name: "dailyVolumeETH_lt", type: "BigDecimal")\n  dailyVolumeETH_gte: BigDecimal @source(subgraph: "uniswap", name: "dailyVolumeETH_gte", type: "BigDecimal")\n  dailyVolumeETH_lte: BigDecimal @source(subgraph: "uniswap", name: "dailyVolumeETH_lte", type: "BigDecimal")\n  dailyVolumeETH_in: [BigDecimal!] @source(subgraph: "uniswap", name: "dailyVolumeETH_in", type: "[BigDecimal!]")\n  dailyVolumeETH_not_in: [BigDecimal!] @source(subgraph: "uniswap", name: "dailyVolumeETH_not_in", type: "[BigDecimal!]")\n  dailyVolumeUSD: BigDecimal @source(subgraph: "uniswap", name: "dailyVolumeUSD", type: "BigDecimal")\n  dailyVolumeUSD_not: BigDecimal @source(subgraph: "uniswap", name: "dailyVolumeUSD_not", type: "BigDecimal")\n  dailyVolumeUSD_gt: BigDecimal @source(subgraph: "uniswap", name: "dailyVolumeUSD_gt", type: "BigDecimal")\n  dailyVolumeUSD_lt: BigDecimal @source(subgraph: "uniswap", name: "dailyVolumeUSD_lt", type: "BigDecimal")\n  dailyVolumeUSD_gte: BigDecimal @source(subgraph: "uniswap", name: "dailyVolumeUSD_gte", type: "BigDecimal")\n  dailyVolumeUSD_lte: BigDecimal @source(subgraph: "uniswap", name: "dailyVolumeUSD_lte", type: "BigDecimal")\n  dailyVolumeUSD_in: [BigDecimal!] @source(subgraph: "uniswap", name: "dailyVolumeUSD_in", type: "[BigDecimal!]")\n  dailyVolumeUSD_not_in: [BigDecimal!] @source(subgraph: "uniswap", name: "dailyVolumeUSD_not_in", type: "[BigDecimal!]")\n  dailyVolumeUntracked: BigDecimal @source(subgraph: "uniswap", name: "dailyVolumeUntracked", type: "BigDecimal")\n  dailyVolumeUntracked_not: BigDecimal @source(subgraph: "uniswap", name: "dailyVolumeUntracked_not", type: "BigDecimal")\n  dailyVolumeUntracked_gt: BigDecimal @source(subgraph: "uniswap", name: "dailyVolumeUntracked_gt", type: "BigDecimal")\n  dailyVolumeUntracked_lt: BigDecimal @source(subgraph: "uniswap", name: "dailyVolumeUntracked_lt", type: "BigDecimal")\n  dailyVolumeUntracked_gte: BigDecimal @source(subgraph: "uniswap", name: "dailyVolumeUntracked_gte", type: "BigDecimal")\n  dailyVolumeUntracked_lte: BigDecimal @source(subgraph: "uniswap", name: "dailyVolumeUntracked_lte", type: "BigDecimal")\n  dailyVolumeUntracked_in: [BigDecimal!] @source(subgraph: "uniswap", name: "dailyVolumeUntracked_in", type: "[BigDecimal!]")\n  dailyVolumeUntracked_not_in: [BigDecimal!] @source(subgraph: "uniswap", name: "dailyVolumeUntracked_not_in", type: "[BigDecimal!]")\n  totalVolumeETH: BigDecimal @source(subgraph: "uniswap", name: "totalVolumeETH", type: "BigDecimal")\n  totalVolumeETH_not: BigDecimal @source(subgraph: "uniswap", name: "totalVolumeETH_not", type: "BigDecimal")\n  totalVolumeETH_gt: BigDecimal @source(subgraph: "uniswap", name: "totalVolumeETH_gt", type: "BigDecimal")\n  totalVolumeETH_lt: BigDecimal @source(subgraph: "uniswap", name: "totalVolumeETH_lt", type: "BigDecimal")\n  totalVolumeETH_gte: BigDecimal @source(subgraph: "uniswap", name: "totalVolumeETH_gte", type: "BigDecimal")\n  totalVolumeETH_lte: BigDecimal @source(subgraph: "uniswap", name: "totalVolumeETH_lte", type: "BigDecimal")\n  totalVolumeETH_in: [BigDecimal!] @source(subgraph: "uniswap", name: "totalVolumeETH_in", type: "[BigDecimal!]")\n  totalVolumeETH_not_in: [BigDecimal!] @source(subgraph: "uniswap", name: "totalVolumeETH_not_in", type: "[BigDecimal!]")\n  totalLiquidityETH: BigDecimal @source(subgraph: "uniswap", name: "totalLiquidityETH", type: "BigDecimal")\n  totalLiquidityETH_not: BigDecimal @source(subgraph: "uniswap", name: "totalLiquidityETH_not", type: "BigDecimal")\n  totalLiquidityETH_gt: BigDecimal @source(subgraph: "uniswap", name: "totalLiquidityETH_gt", type: "BigDecimal")\n  totalLiquidityETH_lt: BigDecimal @source(subgraph: "uniswap", name: "totalLiquidityETH_lt", type: "BigDecimal")\n  totalLiquidityETH_gte: BigDecimal @source(subgraph: "uniswap", name: "totalLiquidityETH_gte", type: "BigDecimal")\n  totalLiquidityETH_lte: BigDecimal @source(subgraph: "uniswap", name: "totalLiquidityETH_lte", type: "BigDecimal")\n  totalLiquidityETH_in: [BigDecimal!] @source(subgraph: "uniswap", name: "totalLiquidityETH_in", type: "[BigDecimal!]")\n  totalLiquidityETH_not_in: [BigDecimal!] @source(subgraph: "uniswap", name: "totalLiquidityETH_not_in", type: "[BigDecimal!]")\n  totalVolumeUSD: BigDecimal @source(subgraph: "uniswap", name: "totalVolumeUSD", type: "BigDecimal")\n  totalVolumeUSD_not: BigDecimal @source(subgraph: "uniswap", name: "totalVolumeUSD_not", type: "BigDecimal")\n  totalVolumeUSD_gt: BigDecimal @source(subgraph: "uniswap", name: "totalVolumeUSD_gt", type: "BigDecimal")\n  totalVolumeUSD_lt: BigDecimal @source(subgraph: "uniswap", name: "totalVolumeUSD_lt", type: "BigDecimal")\n  totalVolumeUSD_gte: BigDecimal @source(subgraph: "uniswap", name: "totalVolumeUSD_gte", type: "BigDecimal")\n  totalVolumeUSD_lte: BigDecimal @source(subgraph: "uniswap", name: "totalVolumeUSD_lte", type: "BigDecimal")\n  totalVolumeUSD_in: [BigDecimal!] @source(subgraph: "uniswap", name: "totalVolumeUSD_in", type: "[BigDecimal!]")\n  totalVolumeUSD_not_in: [BigDecimal!] @source(subgraph: "uniswap", name: "totalVolumeUSD_not_in", type: "[BigDecimal!]")\n  totalLiquidityUSD: BigDecimal @source(subgraph: "uniswap", name: "totalLiquidityUSD", type: "BigDecimal")\n  totalLiquidityUSD_not: BigDecimal @source(subgraph: "uniswap", name: "totalLiquidityUSD_not", type: "BigDecimal")\n  totalLiquidityUSD_gt: BigDecimal @source(subgraph: "uniswap", name: "totalLiquidityUSD_gt", type: "BigDecimal")\n  totalLiquidityUSD_lt: BigDecimal @source(subgraph: "uniswap", name: "totalLiquidityUSD_lt", type: "BigDecimal")\n  totalLiquidityUSD_gte: BigDecimal @source(subgraph: "uniswap", name: "totalLiquidityUSD_gte", type: "BigDecimal")\n  totalLiquidityUSD_lte: BigDecimal @source(subgraph: "uniswap", name: "totalLiquidityUSD_lte", type: "BigDecimal")\n  totalLiquidityUSD_in: [BigDecimal!] @source(subgraph: "uniswap", name: "totalLiquidityUSD_in", type: "[BigDecimal!]")\n  totalLiquidityUSD_not_in: [BigDecimal!] @source(subgraph: "uniswap", name: "totalLiquidityUSD_not_in", type: "[BigDecimal!]")\n  txCount: BigInt @source(subgraph: "uniswap", name: "txCount", type: "BigInt")\n  txCount_not: BigInt @source(subgraph: "uniswap", name: "txCount_not", type: "BigInt")\n  txCount_gt: BigInt @source(subgraph: "uniswap", name: "txCount_gt", type: "BigInt")\n  txCount_lt: BigInt @source(subgraph: "uniswap", name: "txCount_lt", type: "BigInt")\n  txCount_gte: BigInt @source(subgraph: "uniswap", name: "txCount_gte", type: "BigInt")\n  txCount_lte: BigInt @source(subgraph: "uniswap", name: "txCount_lte", type: "BigInt")\n  txCount_in: [BigInt!] @source(subgraph: "uniswap", name: "txCount_in", type: "[BigInt!]")\n  txCount_not_in: [BigInt!] @source(subgraph: "uniswap", name: "txCount_not_in", type: "[BigInt!]")\n  """Filter for the block changed event."""\n  _change_block: BlockChangedFilter @source(subgraph: "uniswap", name: "_change_block", type: "BlockChangedFilter")\n  and: [UniswapDayData_filter] @source(subgraph: "uniswap", name: "and", type: "[UniswapDayData_filter]")\n  or: [UniswapDayData_filter] @source(subgraph: "uniswap", name: "or", type: "[UniswapDayData_filter]")\n}\n\nenum UniswapDayData_orderBy @source(subgraph: "uniswap", name: "UniswapDayData_orderBy") {\n  id @source(subgraph: "uniswap", name: "id")\n  date @source(subgraph: "uniswap", name: "date")\n  dailyVolumeETH @source(subgraph: "uniswap", name: "dailyVolumeETH")\n  dailyVolumeUSD @source(subgraph: "uniswap", name: "dailyVolumeUSD")\n  dailyVolumeUntracked @source(subgraph: "uniswap", name: "dailyVolumeUntracked")\n  totalVolumeETH @source(subgraph: "uniswap", name: "totalVolumeETH")\n  totalLiquidityETH @source(subgraph: "uniswap", name: "totalLiquidityETH")\n  totalVolumeUSD @source(subgraph: "uniswap", name: "totalVolumeUSD")\n  totalLiquidityUSD @source(subgraph: "uniswap", name: "totalLiquidityUSD")\n  txCount @source(subgraph: "uniswap", name: "txCount")\n}\n\ntype UniswapFactory @source(subgraph: "uniswap", name: "UniswapFactory") @resolver(subgraph: "uniswap", operation: "query UniswapFactoryById($UniswapFactory_id: ID!) { uniswapFactory(id: $UniswapFactory_id) }", kind: "FETCH") @resolver(subgraph: "uniswap", operation: "query GetUniswapFactoryById($UniswapFactory_id: ID!) { uniswapFactories(where: { id: $UniswapFactory_id) } }", kind: "FETCH") @resolver(subgraph: "uniswap", operation: "query GetUniswapFactoriesByIds($UniswapFactory_id: [ID!]!) { uniswapFactories(where: { id_in: $UniswapFactory_id }) }", kind: "BATCH") @resolver(subgraph: "uniswap", operation: "query UniswapFactoriesByPairCounts($UniswapFactory_pairCount: Int) { uniswapFactories(skip: $UniswapFactory_pairCount) }", kind: "BATCH") @variable(subgraph: "uniswap", name: "UniswapFactory_id", select: "id") @variable(subgraph: "uniswap", name: "UniswapFactory_pairCount", select: "pairCount") {\n  id: ID! @source(subgraph: "uniswap", name: "id", type: "ID!")\n  pairCount: Int! @source(subgraph: "uniswap", name: "pairCount", type: "Int!")\n  totalVolumeUSD: BigDecimal! @source(subgraph: "uniswap", name: "totalVolumeUSD", type: "BigDecimal!")\n  totalVolumeETH: BigDecimal! @source(subgraph: "uniswap", name: "totalVolumeETH", type: "BigDecimal!")\n  untrackedVolumeUSD: BigDecimal! @source(subgraph: "uniswap", name: "untrackedVolumeUSD", type: "BigDecimal!")\n  totalLiquidityUSD: BigDecimal! @source(subgraph: "uniswap", name: "totalLiquidityUSD", type: "BigDecimal!")\n  totalLiquidityETH: BigDecimal! @source(subgraph: "uniswap", name: "totalLiquidityETH", type: "BigDecimal!")\n  txCount: BigInt! @source(subgraph: "uniswap", name: "txCount", type: "BigInt!")\n}\n\ninput UniswapFactory_filter @source(subgraph: "uniswap", name: "UniswapFactory_filter") {\n  id: ID @source(subgraph: "uniswap", name: "id", type: "ID")\n  id_not: ID @source(subgraph: "uniswap", name: "id_not", type: "ID")\n  id_gt: ID @source(subgraph: "uniswap", name: "id_gt", type: "ID")\n  id_lt: ID @source(subgraph: "uniswap", name: "id_lt", type: "ID")\n  id_gte: ID @source(subgraph: "uniswap", name: "id_gte", type: "ID")\n  id_lte: ID @source(subgraph: "uniswap", name: "id_lte", type: "ID")\n  id_in: [ID!] @source(subgraph: "uniswap", name: "id_in", type: "[ID!]")\n  id_not_in: [ID!] @source(subgraph: "uniswap", name: "id_not_in", type: "[ID!]")\n  pairCount: Int @source(subgraph: "uniswap", name: "pairCount", type: "Int")\n  pairCount_not: Int @source(subgraph: "uniswap", name: "pairCount_not", type: "Int")\n  pairCount_gt: Int @source(subgraph: "uniswap", name: "pairCount_gt", type: "Int")\n  pairCount_lt: Int @source(subgraph: "uniswap", name: "pairCount_lt", type: "Int")\n  pairCount_gte: Int @source(subgraph: "uniswap", name: "pairCount_gte", type: "Int")\n  pairCount_lte: Int @source(subgraph: "uniswap", name: "pairCount_lte", type: "Int")\n  pairCount_in: [Int!] @source(subgraph: "uniswap", name: "pairCount_in", type: "[Int!]")\n  pairCount_not_in: [Int!] @source(subgraph: "uniswap", name: "pairCount_not_in", type: "[Int!]")\n  totalVolumeUSD: BigDecimal @source(subgraph: "uniswap", name: "totalVolumeUSD", type: "BigDecimal")\n  totalVolumeUSD_not: BigDecimal @source(subgraph: "uniswap", name: "totalVolumeUSD_not", type: "BigDecimal")\n  totalVolumeUSD_gt: BigDecimal @source(subgraph: "uniswap", name: "totalVolumeUSD_gt", type: "BigDecimal")\n  totalVolumeUSD_lt: BigDecimal @source(subgraph: "uniswap", name: "totalVolumeUSD_lt", type: "BigDecimal")\n  totalVolumeUSD_gte: BigDecimal @source(subgraph: "uniswap", name: "totalVolumeUSD_gte", type: "BigDecimal")\n  totalVolumeUSD_lte: BigDecimal @source(subgraph: "uniswap", name: "totalVolumeUSD_lte", type: "BigDecimal")\n  totalVolumeUSD_in: [BigDecimal!] @source(subgraph: "uniswap", name: "totalVolumeUSD_in", type: "[BigDecimal!]")\n  totalVolumeUSD_not_in: [BigDecimal!] @source(subgraph: "uniswap", name: "totalVolumeUSD_not_in", type: "[BigDecimal!]")\n  totalVolumeETH: BigDecimal @source(subgraph: "uniswap", name: "totalVolumeETH", type: "BigDecimal")\n  totalVolumeETH_not: BigDecimal @source(subgraph: "uniswap", name: "totalVolumeETH_not", type: "BigDecimal")\n  totalVolumeETH_gt: BigDecimal @source(subgraph: "uniswap", name: "totalVolumeETH_gt", type: "BigDecimal")\n  totalVolumeETH_lt: BigDecimal @source(subgraph: "uniswap", name: "totalVolumeETH_lt", type: "BigDecimal")\n  totalVolumeETH_gte: BigDecimal @source(subgraph: "uniswap", name: "totalVolumeETH_gte", type: "BigDecimal")\n  totalVolumeETH_lte: BigDecimal @source(subgraph: "uniswap", name: "totalVolumeETH_lte", type: "BigDecimal")\n  totalVolumeETH_in: [BigDecimal!] @source(subgraph: "uniswap", name: "totalVolumeETH_in", type: "[BigDecimal!]")\n  totalVolumeETH_not_in: [BigDecimal!] @source(subgraph: "uniswap", name: "totalVolumeETH_not_in", type: "[BigDecimal!]")\n  untrackedVolumeUSD: BigDecimal @source(subgraph: "uniswap", name: "untrackedVolumeUSD", type: "BigDecimal")\n  untrackedVolumeUSD_not: BigDecimal @source(subgraph: "uniswap", name: "untrackedVolumeUSD_not", type: "BigDecimal")\n  untrackedVolumeUSD_gt: BigDecimal @source(subgraph: "uniswap", name: "untrackedVolumeUSD_gt", type: "BigDecimal")\n  untrackedVolumeUSD_lt: BigDecimal @source(subgraph: "uniswap", name: "untrackedVolumeUSD_lt", type: "BigDecimal")\n  untrackedVolumeUSD_gte: BigDecimal @source(subgraph: "uniswap", name: "untrackedVolumeUSD_gte", type: "BigDecimal")\n  untrackedVolumeUSD_lte: BigDecimal @source(subgraph: "uniswap", name: "untrackedVolumeUSD_lte", type: "BigDecimal")\n  untrackedVolumeUSD_in: [BigDecimal!] @source(subgraph: "uniswap", name: "untrackedVolumeUSD_in", type: "[BigDecimal!]")\n  untrackedVolumeUSD_not_in: [BigDecimal!] @source(subgraph: "uniswap", name: "untrackedVolumeUSD_not_in", type: "[BigDecimal!]")\n  totalLiquidityUSD: BigDecimal @source(subgraph: "uniswap", name: "totalLiquidityUSD", type: "BigDecimal")\n  totalLiquidityUSD_not: BigDecimal @source(subgraph: "uniswap", name: "totalLiquidityUSD_not", type: "BigDecimal")\n  totalLiquidityUSD_gt: BigDecimal @source(subgraph: "uniswap", name: "totalLiquidityUSD_gt", type: "BigDecimal")\n  totalLiquidityUSD_lt: BigDecimal @source(subgraph: "uniswap", name: "totalLiquidityUSD_lt", type: "BigDecimal")\n  totalLiquidityUSD_gte: BigDecimal @source(subgraph: "uniswap", name: "totalLiquidityUSD_gte", type: "BigDecimal")\n  totalLiquidityUSD_lte: BigDecimal @source(subgraph: "uniswap", name: "totalLiquidityUSD_lte", type: "BigDecimal")\n  totalLiquidityUSD_in: [BigDecimal!] @source(subgraph: "uniswap", name: "totalLiquidityUSD_in", type: "[BigDecimal!]")\n  totalLiquidityUSD_not_in: [BigDecimal!] @source(subgraph: "uniswap", name: "totalLiquidityUSD_not_in", type: "[BigDecimal!]")\n  totalLiquidityETH: BigDecimal @source(subgraph: "uniswap", name: "totalLiquidityETH", type: "BigDecimal")\n  totalLiquidityETH_not: BigDecimal @source(subgraph: "uniswap", name: "totalLiquidityETH_not", type: "BigDecimal")\n  totalLiquidityETH_gt: BigDecimal @source(subgraph: "uniswap", name: "totalLiquidityETH_gt", type: "BigDecimal")\n  totalLiquidityETH_lt: BigDecimal @source(subgraph: "uniswap", name: "totalLiquidityETH_lt", type: "BigDecimal")\n  totalLiquidityETH_gte: BigDecimal @source(subgraph: "uniswap", name: "totalLiquidityETH_gte", type: "BigDecimal")\n  totalLiquidityETH_lte: BigDecimal @source(subgraph: "uniswap", name: "totalLiquidityETH_lte", type: "BigDecimal")\n  totalLiquidityETH_in: [BigDecimal!] @source(subgraph: "uniswap", name: "totalLiquidityETH_in", type: "[BigDecimal!]")\n  totalLiquidityETH_not_in: [BigDecimal!] @source(subgraph: "uniswap", name: "totalLiquidityETH_not_in", type: "[BigDecimal!]")\n  txCount: BigInt @source(subgraph: "uniswap", name: "txCount", type: "BigInt")\n  txCount_not: BigInt @source(subgraph: "uniswap", name: "txCount_not", type: "BigInt")\n  txCount_gt: BigInt @source(subgraph: "uniswap", name: "txCount_gt", type: "BigInt")\n  txCount_lt: BigInt @source(subgraph: "uniswap", name: "txCount_lt", type: "BigInt")\n  txCount_gte: BigInt @source(subgraph: "uniswap", name: "txCount_gte", type: "BigInt")\n  txCount_lte: BigInt @source(subgraph: "uniswap", name: "txCount_lte", type: "BigInt")\n  txCount_in: [BigInt!] @source(subgraph: "uniswap", name: "txCount_in", type: "[BigInt!]")\n  txCount_not_in: [BigInt!] @source(subgraph: "uniswap", name: "txCount_not_in", type: "[BigInt!]")\n  """Filter for the block changed event."""\n  _change_block: BlockChangedFilter @source(subgraph: "uniswap", name: "_change_block", type: "BlockChangedFilter")\n  and: [UniswapFactory_filter] @source(subgraph: "uniswap", name: "and", type: "[UniswapFactory_filter]")\n  or: [UniswapFactory_filter] @source(subgraph: "uniswap", name: "or", type: "[UniswapFactory_filter]")\n}\n\nenum UniswapFactory_orderBy @source(subgraph: "uniswap", name: "UniswapFactory_orderBy") {\n  id @source(subgraph: "uniswap", name: "id")\n  pairCount @source(subgraph: "uniswap", name: "pairCount")\n  totalVolumeUSD @source(subgraph: "uniswap", name: "totalVolumeUSD")\n  totalVolumeETH @source(subgraph: "uniswap", name: "totalVolumeETH")\n  untrackedVolumeUSD @source(subgraph: "uniswap", name: "untrackedVolumeUSD")\n  totalLiquidityUSD @source(subgraph: "uniswap", name: "totalLiquidityUSD")\n  totalLiquidityETH @source(subgraph: "uniswap", name: "totalLiquidityETH")\n  txCount @source(subgraph: "uniswap", name: "txCount")\n}\n\ninput User_filter @source(subgraph: "uniswap", name: "User_filter") {\n  id: ID @source(subgraph: "uniswap", name: "id", type: "ID")\n  id_not: ID @source(subgraph: "uniswap", name: "id_not", type: "ID")\n  id_gt: ID @source(subgraph: "uniswap", name: "id_gt", type: "ID")\n  id_lt: ID @source(subgraph: "uniswap", name: "id_lt", type: "ID")\n  id_gte: ID @source(subgraph: "uniswap", name: "id_gte", type: "ID")\n  id_lte: ID @source(subgraph: "uniswap", name: "id_lte", type: "ID")\n  id_in: [ID!] @source(subgraph: "uniswap", name: "id_in", type: "[ID!]")\n  id_not_in: [ID!] @source(subgraph: "uniswap", name: "id_not_in", type: "[ID!]")\n  liquidityPositions_: LiquidityPosition_filter @source(subgraph: "uniswap", name: "liquidityPositions_", type: "LiquidityPosition_filter")\n  usdSwapped: BigDecimal @source(subgraph: "uniswap", name: "usdSwapped", type: "BigDecimal")\n  usdSwapped_not: BigDecimal @source(subgraph: "uniswap", name: "usdSwapped_not", type: "BigDecimal")\n  usdSwapped_gt: BigDecimal @source(subgraph: "uniswap", name: "usdSwapped_gt", type: "BigDecimal")\n  usdSwapped_lt: BigDecimal @source(subgraph: "uniswap", name: "usdSwapped_lt", type: "BigDecimal")\n  usdSwapped_gte: BigDecimal @source(subgraph: "uniswap", name: "usdSwapped_gte", type: "BigDecimal")\n  usdSwapped_lte: BigDecimal @source(subgraph: "uniswap", name: "usdSwapped_lte", type: "BigDecimal")\n  usdSwapped_in: [BigDecimal!] @source(subgraph: "uniswap", name: "usdSwapped_in", type: "[BigDecimal!]")\n  usdSwapped_not_in: [BigDecimal!] @source(subgraph: "uniswap", name: "usdSwapped_not_in", type: "[BigDecimal!]")\n  """Filter for the block changed event."""\n  _change_block: BlockChangedFilter @source(subgraph: "uniswap", name: "_change_block", type: "BlockChangedFilter")\n  and: [User_filter] @source(subgraph: "uniswap", name: "and", type: "[User_filter]")\n  or: [User_filter] @source(subgraph: "uniswap", name: "or", type: "[User_filter]")\n}\n\nenum User_orderBy @source(subgraph: "uniswap", name: "User_orderBy") {\n  id @source(subgraph: "uniswap", name: "id")\n  liquidityPositions @source(subgraph: "uniswap", name: "liquidityPositions")\n  usdSwapped @source(subgraph: "uniswap", name: "usdSwapped")\n}'
